<?xml version="1.0" encoding="utf-8"?>
<!--
==========================================================================================
Copyright (C) Goddamn Industries 2015. All Rights Reserved.
 
This software or any its part is distributed under terms of Goddamn Industries End User
License Agreement. By downloading or using this software or any its part you agree with 
terms of Goddamn Industries End User License Agreement.
==========================================================================================
-->
<!--
  @file GoddamnTemplateLibrary.natvis
  Contains debug visualizers for Visual Studio Native Visualizer.
-->
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
  <!-- 
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Templates.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  -->
  
  <!-- UniquePtr<T> class. -->
  <Type Name="Goddamn::UniquePtr&lt;*&gt;">
    <DisplayString Condition="Pointer == 0">Empty</DisplayString>
    <DisplayString Condition="Pointer != 0">{*Pointer}</DisplayString>
    <Expand>
      <Item Condition="Pointer != 0" Name="Pointer">Pointer</Item>
    </Expand>
  </Type>
  
  <!-- SharedPtr<T> class. -->
  <Type Name="Goddamn::SharedPtr&lt;*&gt;">
    <DisplayString Condition="Pointer == 0">Empty</DisplayString>
    <DisplayString Condition="Pointer != 0">{*Pointer}</DisplayString>
    <Expand>
      <Item Condition="Pointer != 0" Name="Pointer">Pointer</Item>
      <Item Condition="Pointer != 0" Name="Reference counter">*ReferenceCount</Item>
    </Expand>
  </Type>
  
  <!-- RefPtr<T> class. -->
  <Type Name="Goddamn::RefPtr&lt;*&gt;">
    <DisplayString Condition="Pointer == 0">Empty</DisplayString>
    <DisplayString Condition="Pointer != 0">{*Pointer}</DisplayString>
    <Expand>
      <Item Condition="Pointer != 0" Name="Pointer">Pointer</Item>
      <Item Condition="Pointer != 0" Name="Reference counter">Pointer->ReferenceCount</Item>
    </Expand>
  </Type>
  
  <!-- 
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Containers.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  -->
  
  <!-- LinkedList<T> class. -->
  <Type Name="Goddamn::LinkedList&lt;*&gt;">
    <DisplayString Condition="Length == 0">Empty</DisplayString>
    <DisplayString Condition="Length != 0">{{ Length = {Length} }}</DisplayString>
    <Expand>
      <Item Condition="Length != 0" Name="Length">Length</Item>
      <LinkedListItems Condition="Length != 0">
        <Size>Length</Size>
        <HeadPointer>First</HeadPointer>
        <NextPointer>Next</NextPointer>
        <ValueNode>Element</ValueNode>
      </LinkedListItems>
    </Expand>
  </Type>
  
  <!-- DoubleLinkedList<T> class. -->
  <Type Name="Goddamn::DoubleLinkedList&lt;*&gt;">
    <DisplayString Condition="Length == 0">Empty</DisplayString>
    <DisplayString Condition="Length != 0">{{ Length = {Length} }}</DisplayString>
    <Expand>
      <Item Condition="Length != 0" Name="Length">Length</Item>
      <LinkedListItems Condition="Length != 0">
        <Size>Length</Size>
        <HeadPointer>First</HeadPointer>
        <NextPointer>Next</NextPointer>
        <ValueNode>Element</ValueNode>
      </LinkedListItems>
    </Expand>
  </Type>
  
  <!-- LockFreeList<T> class. -->
  <Type Name="Goddamn::LockFreeList&lt;*&gt;">
    <DisplayString Condition="Length == 0">Empty</DisplayString>
    <DisplayString Condition="Length != 0">{{ Length = {Length} }}</DisplayString>
    <Expand>
      <Item Condition="Length != 0" Name="Length">Length</Item>
      <LinkedListItems Condition="Length != 0">
        <Size>Length</Size>
        <HeadPointer>First</HeadPointer>
        <NextPointer>Next</NextPointer>
        <ValueNode>Element</ValueNode>
      </LinkedListItems>
    </Expand>
  </Type>
  
  <!-- RedBlackTree<T>|RedBlackTreeBase class. -->
  <Type Name="Goddamn::RedBlackTree&lt;*&gt;">
    <AlternativeType Name="Goddamn::RedBlackTreeBase"/>
    <DisplayString Condition="Length == 0">Empty</DisplayString>
    <DisplayString Condition="Length != 0">{{ Length = {Length} }}</DisplayString>
    <Expand>
      <Item Condition="Length != 0" Name="Length">Length</Item>
      <TreeItems Condition="Length != 0">
        <Size>Length</Size>
        <HeadPointer>RootNode-&gt;Left</HeadPointer>
        <LeftPointer>Left</LeftPointer>
        <RightPointer>Right</RightPointer>
        <ValueNode Condition="Element != 0">*(($T1*)Element)</ValueNode>
      </TreeItems>
    </Expand>
  </Type>
  
  <!-- Map<K, V> class. -->
  <Type Name="Goddamn::Map&lt;*,*&gt;">
    <DisplayString Condition="Length == 0">Empty</DisplayString>
    <DisplayString Condition="Length != 0">{{ Length = {Length} }}</DisplayString>
    <Expand>
      <Item Condition="Length != 0" Name="Length">Length</Item>
      <TreeItems Condition="Length != 0">
        <Size>Length</Size>
        <HeadPointer>RootNode-&gt;Left</HeadPointer>
        <LeftPointer>Left</LeftPointer>
        <RightPointer>Right</RightPointer>
        <ValueNode Condition="Element != 0">*((Goddamn::Pair&lt;$T1,$T2&gt;*)Element)</ValueNode>
      </TreeItems>
    </Expand>
  </Type>
  
  <!-- BaseString<T> class. -->
	<Type Name="Goddamn::BaseString&lt;*&gt;">
    <DisplayString Condition="Length == 0">Empty</DisplayString>
    <DisplayString Condition="Length &gt;= MaxStackLength">{HeapMemory}</DisplayString>
    <DisplayString Condition="Length &lt; MaxStackLength">{&amp;StackMemory[0]}</DisplayString>
    <StringView Condition="(Length &gt;= MaxStackLength) &amp;&amp; (Length != 0)">HeapMemory</StringView>
    <StringView Condition="(Length &lt; MaxStackLength) &amp;&amp; (Length != 0)">&amp;StackMemory[0]</StringView>
		<Expand>
      <Item Condition="Length != 0" Name="Length">Length</Item>
      <ArrayItems Condition="Length != 0">
        <Size>Length</Size>
        <ValuePointer Condition="Length &gt;= MaxStackLength">HeapMemory</ValuePointer>
        <ValuePointer Condition="Length &lt; MaxStackLength">&amp;StackMemory[0]</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>
  
  <!-- BaseStringBuilder<T> class. -->
  <Type Name="Goddamn::BaseStringBuilder&lt;*&gt;">
    <DisplayString Condition="Length == 0">Empty</DisplayString>
    <DisplayString Condition="Length != 0">{{ Length = {Container.Length - 1} }}</DisplayString>
    <StringView Condition="Length != 0">Container.Memory</StringView>
    <Expand>
      <Item Name="Length">Container.Length - 1</Item>
      <Item Name="Capacity">Container.Capacity</Item>
      <ArrayItems>
        <Size>Container.Length</Size>
        <ValuePointer>Container.Memory</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  
  <!-- Symbol class. -->
  <Type Name="Goddamn::Symbol">
    <DisplayString Condition="TableRecord == 0">Invalid</DisplayString>
    <DisplayString Condition="TableRecord != 0">&amp;(*TableRecord).SymbolData[0]</DisplayString>
  </Type>
  
  <!-- Vector<T> class. -->
	<Type Name="Goddamn::Vector&lt;*&gt;">
    <DisplayString Condition="Length == 0">Empty</DisplayString>
    <DisplayString Condition="Length != 0">{{ Length = {Length} }}</DisplayString>
		<Expand>
      <Item Condition="Length != 0" Name="Length">Length</Item>
      <Item Name="Capacity">Capacity</Item> <!-- Capacity should be shown anyway -->
      <ArrayItems Condition="Length != 0">
				<Size>Length</Size>
				<ValuePointer>Memory</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>
  
  <!-- 
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Math library. Vectors, matrices, etc.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  -->
  
  <!-- Vector2 class. -->
  <Type Name="Goddamn::Vector2t&lt;*&gt;">
    <DisplayString>X: {x} Y: {y}</DisplayString>
    <Expand>
      <Item Name="X">x</Item>
      <Item Name="Y">y</Item>
    </Expand>
  </Type>
  
  <!-- Vector3 class. -->
  <Type Name="Goddamn::Vector3t&lt;*&gt;">
    <DisplayString>X: {x} Y: {y} Z: {z}</DisplayString>
    <Expand>
      <Item Name="X">x</Item>
      <Item Name="Y">y</Item>
      <Item Name="Z">z</Item>
    </Expand>
  </Type>
  
  <!-- Vector4 class. -->
  <Type Name="Goddamn::Vector4t&lt;*&gt;">
    <DisplayString>X: {x} Y: {y} Z: {z} W: {w}</DisplayString>
    <Expand>
      <Item Name="X">x</Item>
      <Item Name="Y">y</Item>
      <Item Name="Z">z</Item>
      <Item Name="W">w</Item>
    </Expand>
  </Type>
  
  <!-- Quaternion class. -->
  <Type Name="Goddamn::Quaternion_t&lt;*&gt;">
    <DisplayString>X: {x} Y: {y} Z: {z} W: {w}</DisplayString>
    <Expand>
      <Item Name="X">x</Item>
      <Item Name="Y">y</Item>
      <Item Name="Z">z</Item>
      <Item Name="W">w</Item>
    </Expand>
  </Type>
  
  <!-- Matrix3x3 class. -->
  
  <!-- Matrix3x4 class. -->
  
  <!-- Matrix4x3 class. -->
  
  <!-- Matrix4x4 class. -->
  <Type Name="Goddamn::Matrix4x4t&lt;*&gt;">
    <DisplayString>{_0}, {_1}, {_2}, {_3}</DisplayString>
    <Expand>
      <Item Name="Row 0">_0</Item>
      <Item Name="Row 1">_1</Item>
      <Item Name="Row 2">_2</Item>
      <Item Name="Row 3">_3</Item>
     </Expand>
  </Type>
</AutoVisualizer>
