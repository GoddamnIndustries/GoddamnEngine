# ==========================================================================================
# OGLRendererMethodsGen.sh: Generates OpenGL header in base of OpenGL(ES) 
# 3 header.
# Copyright (C) $(GODDAMN_DEV) 2011 - Present. All Rights Reserved.
# 
# History:
#		* 12.06.2014 - Created by James Jhuighuy.
# ==========================================================================================

if [[ -z "$1" ]]; then
	GL3HEADER='C:\Program Files (x86)\Imagination\PowerVR\GraphicsSDK\SDK_3.3\Builds\Include\GLES3\gl3.h'
else
	GL3HEADER=$1
fi

if [[ ! -f $GL3HEADER ]]; then
	echo 'Failed to locate OpenGL(ES) 3 Header. Aborting.' >&2
	exit 1
fi

# Writing Header prefix
cat << ___EndOfData___
/// ==========================================================================================
/// OGLRendererMethods.hh - OpenGL methods declarations.
/// Copyright (C) \$(GODDAMN_DEV) 2011 - Present. All Rights Reserved.
/// 
/// History:
///		* Generated by OGLRendererMethodsGen.sh script. 
///       Please, do not edit manually.
/// ==========================================================================================

#if (!defined(GD_ENGINE_RENDERER_IMPL_OGL_RENDERER))
#	error 'This header should be included inside "OGLRenderer.h"'
#endif	// if (!defined(GD_ENGINE_RENDERER_IMPL_OGL_RENDERER))

#define GD_DEFINE_OGL_METHOD_GLUE_ARGS(...) \\
	__VA_ARGS__

#define GD_DEFINE_OGL_METHOD_DEFINITION(ReturnType, MethodName, ArgumentsDeclarations, ArgumentsPassing) \\
	private: \\
		ReturnType (* _##MethodName)(ArgumentsDeclarations) = nullptr; \\
	public: \\
		GDINL ReturnType MethodName(ArgumentsDeclarations) const { \\
			return self->_##MethodName(ArgumentsPassing); \\
		}

#define GD_DEFINE_OGL_METHOD_LINKED(ReturnType, MethodName, ArgumentsDeclarations, ArgumentsPassing) \\
	public: \\
		GDINL static ReturnType MethodName(ArgumentsDeclarations) { \\
			return ::gl##MethodName(ArgumentsPassing); \\
		}

#if (!defined(GD_DEFINE_OGL_METHOD))
#	if (!defined(GD_HRI_OGL_ES)) 
#		define GD_DEFINE_OGL_METHOD(ReturnType, MethodName, ArgumentsDeclarations, ArgumentsPassing) GD_DEFINE_OGL_METHOD_DEFINITION(ReturnType, MethodName, ArgumentsDeclarations, ArgumentsPassing)
#	else	// if (!defined(IE_HRI_OGL_ES))
#		define GD_DEFINE_OGL_METHOD(ReturnType, MethodName, ArgumentsDeclarations, ArgumentsPassing) GD_DEFINE_OGL_METHOD_LINKED(ReturnType, MethodName, ArgumentsDeclarations, ArgumentsPassing)
#	endif	// if (!defined(IE_HRI_OGL_ES))
#endif	// if (!defined(GD_HRI_OGL_METHOD_DECL))

#define GD_DEFINE_OGL_METHOD_0(ReturnType, MethodName) \\
	GD_DEFINE_OGL_METHOD(ReturnType, MethodName, \\
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(), \\
		GD_DEFINE_OGL_METHOD_GLUE_ARGS() \\
		)

#define GD_DEFINE_OGL_METHOD_1(ReturnType, MethodName, T0, A0) \\
	GD_DEFINE_OGL_METHOD(ReturnType, MethodName, \\
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(T0 A0), \\
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(A0) \\
		)

#define GD_DEFINE_OGL_METHOD_2(ReturnType, MethodName, T0, A0, T1, A1) \\
	GD_DEFINE_OGL_METHOD(ReturnType, MethodName, \\
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(T0 A0, T1 A1), \\
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(A0, A1) \\
		)

#define GD_DEFINE_OGL_METHOD_3(ReturnType, MethodName, T0, A0, T1, A1, T2, A2) \\
	GD_DEFINE_OGL_METHOD(ReturnType, MethodName, \\
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(T0 A0, T1 A1, T2 A2), \\
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(A0, A1, A2) \\
		)

#define GD_DEFINE_OGL_METHOD_4(ReturnType, MethodName, T0, A0, T1, A1, T2, A2, T3, A3) \\
	GD_DEFINE_OGL_METHOD(ReturnType, MethodName, \\
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(T0 A0, T1 A1, T2 A2, T3 A3), \\
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(A0, A1, A2, A3) \\
		)

#define GD_DEFINE_OGL_METHOD_5(ReturnType, MethodName, T0, A0, T1, A1, T2, A2, T3, A3, T4, A4) \\
	GD_DEFINE_OGL_METHOD(ReturnType, MethodName, \\
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(T0 A0, T1 A1, T2 A2, T3 A3, T4 A4), \\
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(A0, A1, A2, A3, A4) \\
		)

#define GD_DEFINE_OGL_METHOD_6(ReturnType, MethodName, T0, A0, T1, A1, T2, A2, T3, A3, T4, A4, T5, A5) \\
	GD_DEFINE_OGL_METHOD(ReturnType, MethodName, \\
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(T0 A0, T1 A1, T2 A2, T3 A3, T4 A4, T5 A5), \\
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(A0, A1, A2, A3, A4, A5) \\
		)

#define GD_DEFINE_OGL_METHOD_7(ReturnType, MethodName, T0, A0, T1, A1, T2, A2, T3, A3, T4, A4, T5, A5, T6, A6) \\
	GD_DEFINE_OGL_METHOD(ReturnType, MethodName, \\
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(T0 A0, T1 A1, T2 A2, T3 A3, T4 A4, T5 A5, T6 A6), \\
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(A0, A1, A2, A3, A4, A5, A6) \\
		)

#define GD_DEFINE_OGL_METHOD_8(ReturnType, MethodName, T0, A0, T1, A1, T2, A2, T3, A3, T4, A4, T5, A5, T6, A6, T7, A7) \\
	GD_DEFINE_OGL_METHOD(ReturnType, MethodName, \\
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(T0 A0, T1 A1, T2 A2, T3 A3, T4 A4, T5 A5, T6 A6, T7 A7), \\
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(A0, A1, A2, A3, A4, A5, A6, A7) \\
		)

#define GD_DEFINE_OGL_METHOD_9(ReturnType, MethodName, T0, A0, T1, A1, T2, A2, T3, A3, T4, A4, T5, A5, T6, A6, T7, A7, T8, A8) \\
	GD_DEFINE_OGL_METHOD(ReturnType, MethodName, \\
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(T0 A0, T1 A1, T2 A2, T3 A3, T4 A4, T5 A5, T6 A6, T7 A7, T8 A8), \\
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(A0, A1, A2, A3, A4, A5, A6, A7, A8) \\
		)

#define GD_DEFINE_OGL_METHOD_10(ReturnType, MethodName, T0, A0, T1, A1, T2, A2, T3, A3, T4, A4, T5, A5, T6, A6, T7, A7, T8, A8, T9, A9) \\
	GD_DEFINE_OGL_METHOD(ReturnType, MethodName, \\
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(T0 A0, T1 A1, T2 A2, T3 A3, T4 A4, T5 A5, T6 A6, T7 A7, T8 A8, T9 A9), \\
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) \\
		)
		
#define GD_DEFINE_OGL_METHOD_11(ReturnType, MethodName, T0, A0, T1, A1, T2, A2, T3, A3, T4, A4, T5, A5, T6, A6, T7, A7, T8, A8, T9, A9, T10, A10) \\
	GD_DEFINE_OGL_METHOD(ReturnType, MethodName, \\
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(T0 A0, T1 A1, T2 A2, T3 A3, T4 A4, T5 A5, T6 A6, T7 A7, T8 A8, T9 A9, T10 A10), \\
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) \\
		)

/// ==========================================================================================
/// Some OpenGL <-> Goddamn coding style conversions.
/// ==========================================================================================

#ifndef GD_ENGINE_RENDERER_IMPL_OGL
#define GD_ENGINE_RENDERER_IMPL_OGL
#	define GL_GetError glGetError
#endif

/// ==========================================================================================
/// OpenGL <-> Functionality
/// ==========================================================================================
___EndOfData___

while read -r LINE; do
	if [[ $LINE == GL_API* ]]; then
		# Found function definition	
		# Locating parameters start brace
		BRACE_OPEN_INDEX=` awk -v a="$LINE" -v b='(' 'BEGIN{print index(a,b)}'`
		BRACE_CLOSE_INDEX=`awk -v a="$LINE" -v b=')' 'BEGIN{print index(a,b)}'`

		# Process function definition
		FUNCTION_DECLS=(`echo ${LINE:0:$(($BRACE_OPEN_INDEX - 1))} | tr " " "\n"`)
		FUNCTION_TYPE=${FUNCTION_DECLS[1]}
		if [[ $FUNCTION_TYPE == const ]]; then # Lets check if type is something like 'const GLsomething* param'
			FUNCTION_TYPE='const '${FUNCTION_DECLS[2]}
			FUNCTION_NAME=${FUNCTION_DECLS[4]:2}
		else
			FUNCTION_NAME=${FUNCTION_DECLS[3]:2}
		fi
				
		# Processing function parameters.
		PARAMETERS=(`echo ${LINE:$BRACE_OPEN_INDEX:$(($BRACE_CLOSE_INDEX - $BRACE_OPEN_INDEX - 1))} | tr " " "\n"`)
		PARAMETERS_LENGTH=${#PARAMETERS[@]}
		
		PARAMETERS_DECL='\n'
		PARAMETERS_COUNT=0
		
		# Explicit no parameters was defined using 'void' keyword.
		if [[ $PARAMETERS_LENGTH != 1 ]]; then
			PARAMETERS_DECL=',\n'
			for (( PARAMETER_INDEX=0; PARAMETER_INDEX<$PARAMETERS_LENGTH; )); do
				PARAMETER_TYPE=${PARAMETERS[$PARAMETER_INDEX]}
				if [[ $PARAMETER_TYPE == const ]]; then	# Const pointer
					PARAMETER_TYPE='const '${PARAMETERS[$PARAMETER_INDEX + 1]}
					PARAMETER_TYPE_NEXT=${PARAMETERS[$PARAMETER_INDEX + 2]}
					if [[ $PARAMETER_TYPE_NEXT == const* ]]; then	# Const pointer on const pointer
						PARAMETER_TYPE=$PARAMETER_TYPE' '$PARAMETER_TYPE_NEXT
						((++PARAMETER_INDEX))
					fi
					
					PARAMETER_NAME=${PARAMETERS[$PARAMETER_INDEX + 2]}
					((PARAMETER_INDEX += 3))
				else
					PARAMETER_NAME=${PARAMETERS[$PARAMETER_INDEX + 1]}
					((PARAMETER_INDEX += 2))
				fi
				
				if [[ $PARAMETER_NAME == '*'* ]]; then	# Pointer sign was added to name and not to type
					PARAMETER_NAME=${PARAMETER_NAME:1}
					PARAMETER_TYPE=$PARAMETER_TYPE'*'
				fi
				
				PARAMETERS_DECL=$PARAMETERS_DECL"\t$PARAMETER_TYPE const, $PARAMETER_NAME\n"
				((PARAMETERS_COUNT ++))
			done
		fi
		
		printf "\n\n// $FUNCTION_TYPE gl$FUNCTION_NAME(${PARAMETERS[*]})"
		printf "\nGD_DEFINE_OGL_METHOD_$PARAMETERS_COUNT(\n\t$FUNCTION_TYPE, $FUNCTION_NAME$PARAMETERS_DECL\t)"
	fi
done < "$GL3HEADER"

# Writing Header postfix
cat << ___EndOfData___


#undef GD_DEFINE_OGL_METHOD_0
#undef GD_DEFINE_OGL_METHOD_1
#undef GD_DEFINE_OGL_METHOD_2
#undef GD_DEFINE_OGL_METHOD_3
#undef GD_DEFINE_OGL_METHOD_4
#undef GD_DEFINE_OGL_METHOD_5
#undef GD_DEFINE_OGL_METHOD_6
#undef GD_DEFINE_OGL_METHOD_7
#undef GD_DEFINE_OGL_METHOD_8
#undef GD_DEFINE_OGL_METHOD_9
#undef GD_DEFINE_OGL_METHOD_10
#undef GD_DEFINE_OGL_METHOD_11
#undef GD_DEFINE_OGL_METHOD_GLUE_ARGS
___EndOfData___


