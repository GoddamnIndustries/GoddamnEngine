// Reserved for future use.
#if GD_FALSE
		template<typename TArg1, typename TArg2, typename TArg3, typename TArg4, typename TArg5, typename TArg6, typename TArg7, typename TArg8, typename TArg9>
		struct JobDelegateArgsWrap9 final : public TNonCopyable
		{
			TArg1 Arg1;
			TArg2 Arg2;
			TArg3 Arg3;
			TArg4 Arg4;
			TArg5 Arg5;
			TArg6 Arg6;
			TArg7 Arg7;
			TArg8 Arg8;
			TArg9 Arg9;

		public:
			GDINL explicit JobDelegateArgsWrap9(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9)
				: Arg1(arg1), Arg2(arg2), Arg3(arg3), Arg4(arg4), Arg5(arg5), Arg6(arg6), Arg7(arg7), Arg8(arg8), Arg9(arg9)
			{
				static_assert(sizeof(JobDelegateArgsWrap9) <= sizeof(JobDelegateArgs), "Total size of arguments runs out of bounds.");
			}
		} GD_ALIGN_GCC(16);	// struct JobDelegateArgsWrap9<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9>

		template<typename TArg1, typename TArg2, typename TArg3, typename TArg4, typename TArg5, typename TArg6, typename TArg7, typename TArg8, typename TArg9
			   , typename TArg10>
		struct JobDelegateArgsWrap10 final : public TNonCopyable
		{
			TArg1 Arg1;
			TArg2 Arg2;
			TArg3 Arg3;
			TArg4 Arg4;
			TArg5 Arg5;
			TArg6 Arg6;
			TArg7 Arg7;
			TArg8 Arg8;
			TArg9 Arg9;
			TArg10 Arg10;

		public:
			GDINL explicit JobDelegateArgsWrap10(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9
				, TArg10 arg10
				)
				: Arg1(arg1), Arg2(arg2), Arg3(arg3), Arg4(arg4), Arg5(arg5), Arg6(arg6), Arg7(arg7), Arg8(arg8), Arg9(arg9)
				, Arg10(arg10)
			{
				static_assert(sizeof(JobDelegateArgsWrap10) <= sizeof(JobDelegateArgs), "Total size of arguments runs out of bounds.");
			}
		} GD_ALIGN_GCC(16);	// struct JobDelegateArgsWrap10<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10>

		template<typename TArg1, typename TArg2, typename TArg3, typename TArg4, typename TArg5, typename TArg6, typename TArg7, typename TArg8, typename TArg9
			   , typename TArg10, typename TArg11>
		struct JobDelegateArgsWrap11 final : public TNonCopyable
		{
			TArg1 Arg1;
			TArg2 Arg2;
			TArg3 Arg3;
			TArg4 Arg4;
			TArg5 Arg5;
			TArg6 Arg6;
			TArg7 Arg7;
			TArg8 Arg8;
			TArg9 Arg9;
			TArg10 Arg10;
			TArg11 Arg11;

		public:
			GDINL explicit JobDelegateArgsWrap11(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9
				, TArg10 arg10, TArg11 arg11
				)
				: Arg1(arg1), Arg2(arg2), Arg3(arg3), Arg4(arg4), Arg5(arg5), Arg6(arg6), Arg7(arg7), Arg8(arg8), Arg9(arg9)
				, Arg10(arg10), Arg11(arg11)
			{
				static_assert(sizeof(JobDelegateArgsWrap11) <= sizeof(JobDelegateArgs), "Total size of arguments runs out of bounds.");
			}
		} GD_ALIGN_GCC(16);	// struct JobDelegateArgsWrap11<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11>

		template<typename TArg1, typename TArg2, typename TArg3, typename TArg4, typename TArg5, typename TArg6, typename TArg7, typename TArg8, typename TArg9
			   , typename TArg10, typename TArg11, typename TArg12>
		struct JobDelegateArgsWrap12 final : public TNonCopyable
		{
			TArg1 Arg1;
			TArg2 Arg2;
			TArg3 Arg3;
			TArg4 Arg4;
			TArg5 Arg5;
			TArg6 Arg6;
			TArg7 Arg7;
			TArg8 Arg8;
			TArg9 Arg9;
			TArg10 Arg10;
			TArg11 Arg11;
			TArg12 Arg12;

		public:
			GDINL explicit JobDelegateArgsWrap12(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9
				, TArg10 arg10, TArg11 arg11, TArg12 arg12
				)
				: Arg1(arg1), Arg2(arg2), Arg3(arg3), Arg4(arg4), Arg5(arg5), Arg6(arg6), Arg7(arg7), Arg8(arg8), Arg9(arg9)
				, Arg10(arg10), Arg11(arg11), Arg12(arg12)
			{
				static_assert(sizeof(JobDelegateArgsWrap12) <= sizeof(JobDelegateArgs), "Total size of arguments runs out of bounds.");
			}
		} GD_ALIGN_GCC(16);	// struct JobDelegateArgsWrap12<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12>

		template<typename TArg1, typename TArg2, typename TArg3, typename TArg4, typename TArg5, typename TArg6, typename TArg7, typename TArg8, typename TArg9
			   , typename TArg10, typename TArg11, typename TArg12, typename TArg13>
		struct JobDelegateArgsWrap13 final : public TNonCopyable
		{
			TArg1 Arg1;
			TArg2 Arg2;
			TArg3 Arg3;
			TArg4 Arg4;
			TArg5 Arg5;
			TArg6 Arg6;
			TArg7 Arg7;
			TArg8 Arg8;
			TArg9 Arg9;
			TArg10 Arg10;
			TArg11 Arg11;
			TArg12 Arg12;
			TArg13 Arg13;

		public:
			GDINL explicit JobDelegateArgsWrap13(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9
				, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13
				)
				: Arg1(arg1), Arg2(arg2), Arg3(arg3), Arg4(arg4), Arg5(arg5), Arg6(arg6), Arg7(arg7), Arg8(arg8), Arg9(arg9)
				, Arg10(arg10), Arg11(arg11), Arg12(arg12), Arg13(arg13)
			{
				static_assert(sizeof(JobDelegateArgsWrap13) <= sizeof(JobDelegateArgs), "Total size of arguments runs out of bounds.");
			}
		} GD_ALIGN_GCC(16);	// struct JobDelegateArgsWrap13<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13>

		template<typename TArg1, typename TArg2, typename TArg3, typename TArg4, typename TArg5, typename TArg6, typename TArg7, typename TArg8, typename TArg9
			   , typename TArg10, typename TArg11, typename TArg12, typename TArg13, typename TArg14>
		struct JobDelegateArgsWrap14 final : public TNonCopyable
		{
			TArg1 Arg1;
			TArg2 Arg2;
			TArg3 Arg3;
			TArg4 Arg4;
			TArg5 Arg5;
			TArg6 Arg6;
			TArg7 Arg7;
			TArg8 Arg8;
			TArg9 Arg9;
			TArg10 Arg10;
			TArg11 Arg11;
			TArg12 Arg12;
			TArg13 Arg13;
			TArg14 Arg14;

		public:
			GDINL explicit JobDelegateArgsWrap14(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9
				, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13, TArg14 arg14
				)
				: Arg1(arg1), Arg2(arg2), Arg3(arg3), Arg4(arg4), Arg5(arg5), Arg6(arg6), Arg7(arg7), Arg8(arg8), Arg9(arg9)
				, Arg10(arg10), Arg11(arg11), Arg12(arg12), Arg13(arg13), Arg14(arg14)
			{
				static_assert(sizeof(JobDelegateArgsWrap14) <= sizeof(JobDelegateArgs), "Total size of arguments runs out of bounds.");
			}
		} GD_ALIGN_GCC(16);	// struct JobDelegateArgsWrap14<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14>

		template<typename TArg1, typename TArg2, typename TArg3, typename TArg4, typename TArg5, typename TArg6, typename TArg7, typename TArg8, typename TArg9
			   , typename TArg10, typename TArg11, typename TArg12, typename TArg13, typename TArg14, typename TArg15>
		struct JobDelegateArgsWrap15 final : public TNonCopyable
		{
			TArg1 Arg1;
			TArg2 Arg2;
			TArg3 Arg3;
			TArg4 Arg4;
			TArg5 Arg5;
			TArg6 Arg6;
			TArg7 Arg7;
			TArg8 Arg8;
			TArg9 Arg9;
			TArg10 Arg10;
			TArg11 Arg11;
			TArg12 Arg12;
			TArg13 Arg13;
			TArg14 Arg14;
			TArg15 Arg15;

		public:
			GDINL explicit JobDelegateArgsWrap15(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9
				, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13, TArg14 arg14, TArg15 arg15
				)
				: Arg1(arg1), Arg2(arg2), Arg3(arg3), Arg4(arg4), Arg5(arg5), Arg6(arg6), Arg7(arg7), Arg8(arg8), Arg9(arg9)
				, Arg10(arg10), Arg11(arg11), Arg12(arg12), Arg13(arg13), Arg14(arg14), Arg15(arg15)
			{
				static_assert(sizeof(JobDelegateArgsWrap15) <= sizeof(JobDelegateArgs), "Total size of arguments runs out of bounds.");
			}
		} GD_ALIGN_GCC(16);	// struct JobDelegateArgsWrap15<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15>

		template<typename TArg1, typename TArg2, typename TArg3, typename TArg4, typename TArg5, typename TArg6, typename TArg7, typename TArg8, typename TArg9
			   , typename TArg10, typename TArg11, typename TArg12, typename TArg13, typename TArg14, typename TArg15, typename TArg16>
		struct JobDelegateArgsWrap16 final : public TNonCopyable
		{ 
			TArg1 Arg1;
			TArg2 Arg2;
			TArg3 Arg3;
			TArg4 Arg4;
			TArg5 Arg5;
			TArg6 Arg6;
			TArg7 Arg7;
			TArg8 Arg8;
			TArg9 Arg9;
			TArg10 Arg10;
			TArg11 Arg11;
			TArg12 Arg12;
			TArg13 Arg13;
			TArg14 Arg14;
			TArg15 Arg15;
			TArg16 Arg16;

		public:
			GDINL explicit JobDelegateArgsWrap16(TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9
				, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13, TArg14 arg14, TArg15 arg15, TArg16 arg16)
				: Arg1(arg1), Arg2(arg2), Arg3(arg3), Arg4(arg4), Arg5(arg5), Arg6(arg6), Arg7(arg7), Arg8(arg8), Arg9(arg9)
				, Arg10(arg10), Arg11(arg11), Arg12(arg12), Arg13(arg13), Arg14(arg14), Arg15(arg15), Arg16(arg16)
			{
				static_assert(sizeof(JobDelegateArgsWrap16) <= sizeof(JobDelegateArgs), "Total size of arguments runs out of bounds.");
			}
		} GD_ALIGN_GCC(16);	// struct JobDelegateArgsWrap16<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16>
#endif	// if GD_FALSE