//////////////////////////////////////////////////////////////////////////
/// Compiler.hh: shader cross compiler generator and compiler interface.
/// Copyright (C) $(GODDAMN_DEV) 2011 - Present. All Rights Reserved.
/// 
/// History:
///		* 13.06.2014 - Created by James Jhuighuy.
//////////////////////////////////////////////////////////////////////////

#pragma once
#ifndef GD_ENGINE_RENDERER_SHADER_CROSS_COMPILER_COMPILER
#define GD_ENGINE_RENDERER_SHADER_CROSS_COMPILER_COMPILER

#include <GoddamnEngine/Include.hh>
#include <GoddamnEngine/Core/IO/Stream/Stream.hh>
#include <GoddamnEngine/Engine/Renderer/Shader/CrossCompiler/Parser/Parser.hh>

#if (!defined(GD_PLATFORM_DESKTOP))
#	error "This API can be used on desktop platfroms only."
#endif	// if (!defined(GD_PLATFORM_DESKTOP))

GD_NAMESPACE_BEGIN

	struct HLSLScope;

	/// Descripbes list of shader generation-compilation targets/
	enum HRIShaderCrossCompilerTarget : UInt8
	{
		GD_HRI_SHADERCC_COMPILER_TARGET_UNKNOWN = 0,
		GD_HRI_SHADERCC_COMPILER_TARGET_HLSL,		///< HLSL Shading language (Microsoft-specific plaftorms).
		GD_HRI_SHADERCC_COMPILER_TARGET_GLSL410,	///< GLSL Shading language, version 4.1 (OpenGL desktop).
		GD_HRI_SHADERCC_COMPILER_TARGET_GLSLES2,	///< GLSL(ES) 2.0 Shading language (OpenGL embedded, without constant buffers).
		GD_HRI_SHADERCC_COMPILER_TARGET_GLSLES3,	///< GLSL(ES) 3.0 Shading language (OpenGL embedded, with constant buffers).
		GD_HRI_SHADERCC_COMPILER_TARGET_METAL,		///< Metal Shading language (Apple plaforms).
	};	// enum HRIShaderCrossCompilerTarget

	/// Provides generation and compliation of shader source code.
	class HRIShaderCrossCompilerCompiler final : public IToolchainTool
	{
	public:
		GDINL  HRIShaderCrossCompilerCompiler() { }
		GDINL ~HRIShaderCrossCompilerCompiler() { }

		/// @param Output Stream to which write compiled shader data.
		/// @param Input  Data, generated by HLSL parser.
		/// @param Target Target generation language.
		/// @returns True if generation and compilation succeded.
		GDAPI bool GenerateAndCompileShader(OutputStream* const Output, HLSLScope const* const Input, HRIShaderCrossCompilerTarget const Target);
	};	// class HRIShaderCrossCompilerCompiler

GD_NAMESPACE_END

#endif
