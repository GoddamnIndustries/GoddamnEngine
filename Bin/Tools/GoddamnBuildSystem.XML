<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GoddamnBuildSystem</name>
    </assembly>
    <members>
        <member name="T:GoddamnEngine.BuildSystem.BuildSystemException">
            <summary>
            Represents an exception thrown by BuildSystem code.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.BuildSystemException.#ctor(System.String,System.Object[])">
            <summary>
            Constructs the build system exception with a string.
            </summary>
            <param name="format">The format string.</param>
            <param name="arguments">Formatting arguments.</param>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.BuildSystemModuleAttribute">
            <summary>
            Represents a attribute of a build system module.
            </summary>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.BuildSystemModule">
            <summary>
            Represents a module of a build system.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.BuildSystemModule.Execute(System.String[])">
            <summary>
            Entry point of a module.
            </summary>
            <param name="arguments">Command line arguments.</param>
            <returns></returns>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.BuildSystem">
            <summary>
            Main class of build system.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.BuildSystem.GetSdkLocation">
            <summary>
            Returns path to GoddamnSDK installation location.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.BuildSystem.Main(System.String[])">
            <summary>
            Application entry point.
            </summary>
            <param name="arguments">Command line arguments.</param>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Collectors.ICollector">
            <summary>
            Abstract data collector interface.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.ICollector.GetSource">
            <summary>
            Returns path to source file of this collector.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.ICollector.GetLocation">
            <summary>
            Returns path directory of this collector.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.ICollector.GetName">
            <summary>
            Returns name of this collector.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.ICollector.GetIsSupported">
            <summary>
            Returns false is this object should be skipped.
            </summary>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Collectors.Collector">
            <summary>
            Abstract data collector.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.Collector.GetSource">
            <summary>
            Returns path to source file of this collector.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.Collector.GetLocation">
            <summary>
            Returns path directory of this collector.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.Collector.GetName">
            <summary>
            Returns name of this collector.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.Collector.GetIsSupported">
            <summary>
            Returns false is this object should be skipped.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.Collector.MatchesPlatformConfiguration(System.String,GoddamnEngine.BuildSystem.Target.TargetPlatform,GoddamnEngine.BuildSystem.Target.TargetConfiguration)">
            <summary>
            Returns true if object on specified path has platform/configuration data and matches it.
            </summary>
            <param name="objectPath">Path to check.</param>
            <param name="platform">One of the target platforms.</param>
            <param name="configuration">One of the target configurations.</param>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Collectors.CollectorContainer`1">
            <summary>
            Represents a data structure, that contains pre-cached from collector for different platforms/configurations.
            </summary>
            <typeparam name="T">Type of data stored in the container.</typeparam>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.CollectorContainer`1.#ctor(System.Func{GoddamnEngine.BuildSystem.Target.TargetPlatform,GoddamnEngine.BuildSystem.Target.TargetConfiguration,`0})">
            <summary>
            Initializes the container with all values.
            </summary>
            <param name="accessor">Function that returns a value depending on platform/configuration.</param>
        </member>
        <member name="P:GoddamnEngine.BuildSystem.Collectors.CollectorContainer`1.Item(GoddamnEngine.BuildSystem.Target.TargetPlatform,GoddamnEngine.BuildSystem.Target.TargetConfiguration)">
            <summary>
            Accesses the platform/configuration specific value of the container.
            </summary>
            <param name="platform">One of the target platforms.</param>
            <param name="configuration">One of the target configurations.</param>
            <returns>Platform/configuration specific value of the container.</returns>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Collectors.CollectorCache">
            <summary>
            Contains cached data of some abstract collector.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.CollectorCache.#ctor(GoddamnEngine.BuildSystem.Collectors.Collector)">
            <summary>
            Initializes a new generic collector cache.
            </summary>
            <param name="collector">Collector which dynamic properties would be cached.</param>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Collectors.CollectorFactory`2">
            <summary>
            Collects data and generates cache.
            </summary>
            <typeparam name="TCollector">Type of collector.</typeparam>
            <typeparam name="TCollectorCache">Type of cache of collector.</typeparam>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.CollectorFactory`2.Create(System.String)">
            <summary>
            Constructs new collector instance and cached it data.
            </summary>
            <param name="collectorSourcePath">Path so source file of the collector.</param>
            <returns>Created instance of cached collector data.</returns>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Collectors.IDependency">
            <summary>
            Project dependency interface.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.IDependency.EnumerateHeaderDirectories">
            <summary>
            Collects list of directories that contain header files.
            </summary>
            <returns>Iterator for list of header files.</returns>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.IDependency.EnumerateCopyFiles(GoddamnEngine.BuildSystem.Target.TargetPlatform,GoddamnEngine.BuildSystem.Target.TargetConfiguration)">
            <summary>
            Collects list of files that should be copied to project build output directory.
            </summary>
            <param name="platform">One of the target platforms.</param>
            <param name="configuration">One of the target configurations.</param>
            <returns>Iterator for list of files that should be copied to project build output directory.</returns>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.IDependency.EnumerateLinkedLibraries(GoddamnEngine.BuildSystem.Target.TargetPlatform,GoddamnEngine.BuildSystem.Target.TargetConfiguration)">
            <summary>
            Collects list of libraries that should be linked with project build file.
            </summary>
            <param name="platform">One of the target platforms.</param>
            <param name="configuration">One of the target configurations.</param>
            <returns>Iterator for list of libraries that should be linked with project build file.</returns>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Collectors.Dependency">
            <summary>
            Project dependency.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.Dependency.EnumerateHeaderDirectories">
            <summary>
            Collects list of directories that contain header files.
            </summary>
            <returns>Iterator for list of header files.</returns>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.Dependency.EnumerateCopyFiles(GoddamnEngine.BuildSystem.Target.TargetPlatform,GoddamnEngine.BuildSystem.Target.TargetConfiguration)">
            <summary>
            Collects list of files that should be copied to project build output directory.
            </summary>
            <param name="platform">One of the target platforms.</param>
            <param name="configuration">One of the target configurations.</param>
            <returns>Iterator for list of files that should be copied to project build output directory.</returns>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.Dependency.EnumerateLinkedLibraries(GoddamnEngine.BuildSystem.Target.TargetPlatform,GoddamnEngine.BuildSystem.Target.TargetConfiguration)">
            <summary>
            Collects list of libraries that should be linked with project build file.
            </summary>
            <param name="platform">One of the target platforms.</param>
            <param name="configuration">One of the target configurations.</param>
            <returns>Iterator for list of libraries that should be linked with project build file.</returns>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Collectors.ProjectDependency">
            <summary>
            Adapter that converts projects to dependencies for other projects.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.ProjectDependency.GetProject">
            <summary>
            Returns project caches that is used in this dependency.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.ProjectDependency.EnumerateHeaderDirectories">
            <summary>
            Collects list of directories that contain header files.
            </summary>
            <returns>Iterator for list of header files.</returns>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.ProjectDependency.EnumerateCopyFiles(GoddamnEngine.BuildSystem.Target.TargetPlatform,GoddamnEngine.BuildSystem.Target.TargetConfiguration)">
            <summary>
            Collects list of files that should be copied to project build output directory.
            </summary>
            <param name="platform">One of the target platforms.</param>
            <param name="configuration">One of the target configurations.</param>
            <returns>Iterator for list of files that should be copied to project build output directory.</returns>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.ProjectDependency.EnumerateLinkedLibraries(GoddamnEngine.BuildSystem.Target.TargetPlatform,GoddamnEngine.BuildSystem.Target.TargetConfiguration)">
            <summary>
            Collects list of libraries that should be linked with project build file.
            </summary>
            <param name="platform">One of the target platforms.</param>
            <param name="configuration">One of the target configurations.</param>
            <returns>Iterator for list of libraries that should be linked with project build file.</returns>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Collectors.DependencyCache">
            <summary>
            Represents a collection of cached data that was by dependency object.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.DependencyCache.#ctor(GoddamnEngine.BuildSystem.Collectors.Dependency)">
            <summary>
            Generates cache for specified dependency.
            </summary>
            <param name="dependency">Dependency which dynamic properties would be cached.</param>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Collectors.DependencyFactory">
            <summary>
            Represents a factory of dependencies.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.DependencyFactory.Create(System.String)">
            <summary>
            Constructs new dependency instance and it's cached data.
            </summary>
            <param name="dependencySourcePath">Path so source file of the dependency.</param>
            <returns>Created instance of cached dependency data.</returns>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.DependencyFactory.GetGoddamnCoreDependency">
            <summary>
            Returns cached dependency for GoddamnCore project.
            </summary>
            <returns>Cached dependency for GoddamnCore project.</returns>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.DependencyFactory.GetGoddamnEngineDependency">
            <summary>
            Returns cached dependency for GoddamnEngine project.
            </summary>
            <returns>Cached dependency for GoddamnEngine project.</returns>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Collectors.ProjectPriority">
            <summary>
            Describes priority of the project.
            </summary>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Collectors.ProjectSourceFileType">
            <summary>
            Types of file in project (sub)directory.
            </summary>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Collectors.ProjectBuildType">
            <summary>
            Represents build type of project.
            </summary>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Collectors.ProjectLanguge">
            <summary>
            Represents a language in which project is written in.
            </summary>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Collectors.ProjectSourceFile">
            <summary>
            Represents a simple source file added to project.
            </summary>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Collectors.ProjectSourceFile.IsExcludedDelegate">
            <summary>
            Returns true if this file is excluded on some platform.
            </summary>
            <param name="platform">One of the target platforms.</param>
            <returns>True if this file is excluded on some platform.</returns>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.ProjectSourceFile.#ctor(System.String,GoddamnEngine.BuildSystem.Collectors.ProjectSourceFileType,GoddamnEngine.BuildSystem.Collectors.ProjectSourceFile.IsExcludedDelegate)">
            <summary>
            Initializes new source file.
            </summary>
            <param name="fileName">Path to source file.</param>
            <param name="fileType">Type of source file.</param>
            <param name="isExcluded">Platform-dependent delegate.</param>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.ProjectSourceFile.ShouldBeExcluded(GoddamnEngine.BuildSystem.Target.TargetPlatform,GoddamnEngine.BuildSystem.Target.TargetConfiguration)">
            <summary>
            Returns true if object on specified path has platform/configuration data and matches it.
            </summary>
            <param name="platform">One of the target platforms.</param>
            <param name="configuration">One of the target configurations.</param>
            <returns></returns>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Collectors.ProjectMacro">
            <summary>
            Represents a simple preprocessor definition.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.ProjectMacro.#ctor(System.String,System.String)">
            <summary>
            Initializes a new preprocessor definition.
            </summary>
            <param name="name">Name of the macro.</param>
            <param name="value">Value of the macro.</param>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.ProjectMacro.ToString">
            <summary>
            Returns string version of this definition in format "NAME=VALUE".
            </summary>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Collectors.Project">
            <summary>
            Representation of a normal C++ project.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.Project.GetProgrammingLanguage">
            <summary>
            Returns a programming language, in which project is written in.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.Project.GetFilter">
            <summary>
            Returns name of the filter of this project in generated solution.
            May return null if no filter is required.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.Project.GetPriority">
            <summary>
            Returns priority of this project. Higher priority - earlier project is compiled.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.Project.GetBuildType(GoddamnEngine.BuildSystem.Target.TargetPlatform,GoddamnEngine.BuildSystem.Target.TargetConfiguration)">
            <summary>
            Returns type of compiler/linker output.
            </summary>
            <param name="platform">One of the target platforms.</param>
            <param name="configuration">One of the target configurations.</param>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.Project.GetOutputPath(GoddamnEngine.BuildSystem.Target.TargetPlatform,GoddamnEngine.BuildSystem.Target.TargetConfiguration)">
            <summary>
            Returns path to the compilation result.
            </summary>
            <param name="platform">One of the target platforms.</param>
            <param name="configuration">One of the target configurations.</param>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.Project.GetImportLibraryOutputPath(GoddamnEngine.BuildSystem.Target.TargetPlatform,GoddamnEngine.BuildSystem.Target.TargetConfiguration)">
            <summary>
            Returns path to the import library (only actual for Windows DLLs), or null if no import library needs to be generated.
            </summary>
            <param name="platform">One of the target platforms.</param>
            <param name="configuration">One of the target configurations.</param>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.Project.GetSourceFiltersOrigin">
            <summary>
            Returns offset some path that should be treated as origin of source files (and filters of source files).
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.Project.EnumerateHeaderDirectories">
            <summary>
            Collects list of directories that contain header files.
            </summary>
            <returns>Iterator for list of directories that contain header files.</returns>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.Project.EnumerateSourceFiles">
            <summary>
            Collects list of files with source code, which would be added to generated project data.
            </summary>
            <returns>Iterator for list of files with source code, which would be added to generated project data.</returns>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.Project.EnumerateDependencies">
            <summary>
            Collects list of dependencies for this project.
            All unsupported projects should be filtered by this function.
            </summary>
            <returns>Iterator for list of list of dependencies for this project.</returns>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.Project.EnumerateMacros(GoddamnEngine.BuildSystem.Target.TargetPlatform,GoddamnEngine.BuildSystem.Target.TargetConfiguration)">
            <summary>
            Collects list of additional preprocessor definitions added to this project.
            </summary>
            <param name="platform">One of the target platforms.</param>
            <param name="configuration">One of the target configurations.</param>
            <returns>Iterator for list of additional preprocessor definitions added to this project.</returns>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Collectors.BuildToolProject">
            <summary>
            Representation of some build tool project.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.BuildToolProject.GetProgrammingLanguage">
            <summary>
            Returns a programming language, in which project is written in.
            C# typically.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.BuildToolProject.GetProjectFile">
            <summary>
            Returns path to project file of the build tool.
            By default, it set to ".csproj" file with same name, as project.
            </summary>
            <returns>Path to project file of the build tool.</returns>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.BuildToolProject.GetFilter">
            <summary>
            Returns name of the filter of this project in generated solution.
            By default, returns "Build tools".
            </summary>
            <returns>Name of the filter of this project in generated solution.</returns>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.BuildToolProject.GetPriority">
            <summary>
            Returns priority of this project. Higher priority - earlier project is compiled.
            Obviously, build tool priority is constantly set to BuildToolLevel.
            </summary>
            <returns>Returns priority of this project.</returns>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.BuildToolProject.GetBuildType(GoddamnEngine.BuildSystem.Target.TargetPlatform,GoddamnEngine.BuildSystem.Target.TargetConfiguration)">
            <summary>
            Method is not supported for a build tool.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.BuildToolProject.GetOutputPath(GoddamnEngine.BuildSystem.Target.TargetPlatform,GoddamnEngine.BuildSystem.Target.TargetConfiguration)">
            <summary>
            Method is not supported for a build tool.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.BuildToolProject.GetImportLibraryOutputPath(GoddamnEngine.BuildSystem.Target.TargetPlatform,GoddamnEngine.BuildSystem.Target.TargetConfiguration)">
            <summary>
            Method is not supported for a build tool.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.BuildToolProject.GetSourceFiltersOrigin">
            <summary>
            Method is not supported for a build tool.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.BuildToolProject.EnumerateSourceFiles">
            <summary>
            Method is not supported for a build tool.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.BuildToolProject.EnumerateHeaderDirectories">
            <summary>
            Method is not supported for a build tool.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.BuildToolProject.EnumerateDependencies">
            <summary>
            Method is not supported for a build tool.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.BuildToolProject.EnumerateMacros(GoddamnEngine.BuildSystem.Target.TargetPlatform,GoddamnEngine.BuildSystem.Target.TargetConfiguration)">
            <summary>
            Method is not supported for a build tool.
            </summary>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Collectors.ProjectCache">
            <inheritdoc />
            <summary>
            Represents a collection of cached data that was collected by project object.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.ProjectCache.#ctor(GoddamnEngine.BuildSystem.Collectors.Project)">
            <inheritdoc />
            <summary>
            Generates cache for specified project.
            </summary>
            <param name="project">Project which dynamic properties would be cached.</param>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.ProjectCache.GenerateIncludePaths(System.String)">
            <summary>
            Generates a strigified list of include paths.
            </summary>
            <param name="separator">Separator string between include paths. ';' By default.</param>
            <returns>A strigified include paths.</returns>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.ProjectCache.GenerateMacros(GoddamnEngine.BuildSystem.Target.TargetPlatform,GoddamnEngine.BuildSystem.Target.TargetConfiguration,System.String)">
            <summary>
            Generates a strigified list of macros.
            </summary>
            <param name="platform">One of the target platforms.</param>
            <param name="configuration">One of the target configurations.</param>
            <param name="separator">Separator string between macros. ';' By default.</param>
            <returns>A strigified list of macros.</returns>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.ProjectCache.GenerateLinkedLibrariesPaths(GoddamnEngine.BuildSystem.Target.TargetPlatform,GoddamnEngine.BuildSystem.Target.TargetConfiguration,System.String)">
            <summary>
            Generates a strigified list of linked libraries paths.
            </summary>
            <param name="platform">One of the target platforms.</param>
            <param name="configuration">One of the target configurations.</param>
            <param name="separator">Separator string between linked libraries paths. ';' By default.</param>
            <returns>A strigified list of linked libraries paths.</returns>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Collectors.ProjectFactory">
            <summary>
            Represents a factory of projects.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.ProjectFactory.Create(System.String)">
            <summary>
            Constructs new project instance and it's cached data.
            </summary>
            <param name="projectSourcePath">Path so source file of the project.</param>
            <returns>Created instance of cached project data.</returns>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Collectors.Solution">
            <summary>
            Represents a solution (set of projects).
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.Solution.EnumerateProjects">
            <summary>
            Collects list of projects in solution.
            All unsupported projects should be filtered by this function.
            </summary>
            <returns>Iterator for list of projects in solution.</returns>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Collectors.SolutionCache">
            <summary>
            Represents a collection of cached data that was by dependency object.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.SolutionCache.#ctor(GoddamnEngine.BuildSystem.Collectors.Solution)">
            <summary>
            Generates cache for specified dependency.
            </summary>
            <param name="solution">Solution which dynamic properties would be cached.</param>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Collectors.SolutionFactory">
            <summary>
            Represents a factory of dependencies.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Collectors.SolutionFactory.Create(System.String)">
            <summary>
            Constructs new solution instance and it's cached data.
            </summary>
            <param name="solutionSourcePath">Path to the source file of the solution.</param>
            <returns>Created instance of cached solution data.</returns>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.ProjectGenerator.CMakeProjectGenerator">
            <summary>
            Generator of the project/solution files for CMake.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:GoddamnEngine.BuildSystem.ProjectGenerator.CMakeProjectGenerator.IsPlatformNativelySupported(GoddamnEngine.BuildSystem.Target.TargetPlatform)">
            <summary>
            Checks if specified platform is natively supported by VS.
            </summary>
            <param name="platform">One of the target platforms.</param>
            <returns>True if platform is natively supported by VS, false otherwise.</returns>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.ProjectGenerator.CMakeProjectGenerator.GenerateProjectFiles(GoddamnEngine.BuildSystem.Collectors.ProjectCache)">
            <summary>
            Generates project files for Visual Studio: '.vcxproj' and '.vcxproj.filter'.
            </summary>
            <param name="project">Parsed project object.</param>
            <returns>Path to Visual Studio's '.vcxproj file'.</returns>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.ProjectGenerator.CMakeProjectGenerator.GenerateSolutionFiles(GoddamnEngine.BuildSystem.Collectors.SolutionCache)">
            <summary>
            Generates solution files for Visual Studio.
            </summary>
            <param name="solution">Parsed solution object.</param>
            <returns>Path to Visual Studio's .'sln' file.</returns>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.ProjectGenerator.ProjectGenerator">
            <summary>
            Represents a project generation algorithm interface.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.ProjectGenerator.ProjectGenerator.IsPlatformNativelySupported(GoddamnEngine.BuildSystem.Target.TargetPlatform)">
            <summary>
            Checks if specified platform is natively supported by IDE.
            </summary>
            <param name="platform">One of the target platforms.</param>
            <returns>True if specified platform is natively supported by IDE.</returns>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.ProjectGenerator.ProjectGenerator.GenerateProjectFiles(GoddamnEngine.BuildSystem.Collectors.ProjectCache)">
            <summary>
            Generates project files for specified project.
            </summary>
            <param name="project">Parsed project object.</param>
            <returns>Path to main project file.</returns>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.ProjectGenerator.ProjectGenerator.GenerateSolutionFiles(GoddamnEngine.BuildSystem.Collectors.SolutionCache)">
            <summary>
            Generates solution files for specified solution.
            </summary>
            <param name="solution">Parsed solution object.</param>
            <returns>Path to main solution file.</returns>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.ProjectGenerator.ProjectGeneratorFactory">
            <summary>
            Represents a factory of IDE project files generator.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.ProjectGenerator.ProjectGeneratorFactory.Create">
            <summary>
            Constructs new IDE project files generator instance.
            </summary>
            <returns>A new IDE project files generator instance</returns>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.ProjectGenerator.ProjectGeneratorException">
            <inheritdoc />
            <summary>
            Represents an exception, thrown by ProjectGenerator code.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.ProjectGenerator.ProjectGeneratorException.#ctor(System.String,System.Object[])">
            <inheritdoc />
            <summary>
            Constructs the build system exception with a string.
            </summary>
            <param name="format">Format string.</param>
            <param name="arguments">Formatting arguments.</param>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.ProjectGenerator.ProjectGeneratorModule">
            <inheritdoc />
            <summary>
            Project file generation module.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.ProjectGenerator.ProjectGeneratorModule.Execute(System.String[])">
            <inheritdoc />
            <summary>
            Generates project files.
            </summary>
            <param name="arguments">Command line arguments.</param>
            <returns></returns>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.ProjectGenerator.VisualStudioProjectGenerator">
            <summary>
            Generator of the project/solution files for Visual Studio 2017.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:GoddamnEngine.BuildSystem.ProjectGenerator.VisualStudioProjectGenerator.IsPlatformNativelySupported(GoddamnEngine.BuildSystem.Target.TargetPlatform)">
            <summary>
            Checks if specified platform is natively supported by VS.
            </summary>
            <param name="platform">One of the target platforms.</param>
            <returns>True if platform is natively supported by VS, false otherwise.</returns>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.ProjectGenerator.VisualStudioProjectGenerator.GenerateProjectFiles(GoddamnEngine.BuildSystem.Collectors.ProjectCache)">
            <summary>
            Generates project files for Visual Studio: '.vcxproj' and '.vcxproj.filter'.
            </summary>
            <param name="project">Parsed project object.</param>
            <returns>Path to Visual Studio's '.vcxproj file'.</returns>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.ProjectGenerator.VisualStudioProjectGenerator.GenerateSolutionFiles(GoddamnEngine.BuildSystem.Collectors.SolutionCache)">
            <summary>
            Generates solution files for Visual Studio.
            </summary>
            <param name="solution">Parsed solution object.</param>
            <returns>Path to Visual Studio's .'sln' file.</returns>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Support.CSharpCompiler">
            <summary>
            Inline dynamic C# compiler.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Support.CSharpCompiler.CompileSourceFile(System.String)">
            <summary>
            Compiles C# source file into Assembly object.
            </summary>
            <param name="pathToSource">Path to the source file.</param>
            <returns>Compiled assembly object.</returns>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Support.ArrayExtensions">
            <summary>
            Represents extensions to .NET standard library's "Array" class.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Support.ArrayExtensions.SubArray``1(``0[],System.Int32,System.Int32)">
            <summary>
            Similar to string's "Substring" function.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Support.ArrayExtensions.Concat``1(``0[],``0[])">
            <summary>
            Similar to string's "Concat" function.
            </summary>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Support.XmlTextWriterExtensions">
            <summary>
            Represents extensions to .NET standard library's "XmlTextWriter" class.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Support.XmlTextWriterExtensions.WriteAttributeStringFormat(System.Xml.XmlTextWriter,System.String,System.String,System.Object[])">
            <summary>
            Adds formatting support for "WriteAttributeString" function.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Support.XmlTextWriterExtensions.WriteElementStringFormat(System.Xml.XmlTextWriter,System.String,System.String,System.Object[])">
            <summary>
            Adds formatting support for "WriteElementString" function.
            </summary>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Target.TargetConfiguration">
            <summary>
            List of supported target configurations.
            </summary>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Target.TargetConfigurationInfo">
            <summary>
            List of properties for specific configuration.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Target.TargetConfigurationInfo.#ctor">
            <summary>
            Initializes the configuration information. Should setup properties.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Target.TargetConfigurationInfo.Get(GoddamnEngine.BuildSystem.Target.TargetConfiguration)">
            <summary>
            Returns the information for specific platform.
            </summary>
            <param name="theConfiguration">Desired configuration.</param>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Target.DebugConfigurationInfo">
            <summary>
            "Debug" configuration information.
            </summary>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Target.DevelopmentConfigurationInfo">
            <summary>
            "Development" configuration information.
            </summary>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Target.ReleaseConfigurationInfo">
            <summary>
            "Release" configuration information.
            </summary>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Target.TargetPlatform">
            <summary>
            List of supported target platforms.
            </summary>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Target.TargetPlatformInfo">
            <summary>
            List of properties for specific platform.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Target.TargetPlatformInfo.#ctor">
            <summary>
            Initializes a platform information. Should setup properties.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Target.TargetPlatformInfo.GenerateStandardIncludePaths(System.String)">
            <summary>
            Generates a strigified list of standard include paths.
            </summary>
            <param name="separator">Separator string between include paths. ';' By default.</param>
            <returns>A strigified include paths.</returns>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Target.TargetPlatformInfo.GenerateStandardMacrosList(System.String)">
            <summary>
            Generates a strigified list of standard macros.
            </summary>
            <param name="separator">Separator string between macros. ';' By default.</param>
            <returns>A strigified list of macros.</returns>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Target.TargetPlatformInfo.GenerateStandardLinkedLibrariesPaths(System.String)">
            <summary>
            Generates a strigified list of standard linked libraries paths.
            </summary>
            <param name="separator">Separator string between linked libraries paths. ';' By default.</param>
            <returns>A strigified list of linked libraries paths.</returns>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Target.TargetPlatformInfo.Get(GoddamnEngine.BuildSystem.Target.TargetPlatform)">
            <summary>
            Returns the information for specific platform.
            </summary>
            <param name="thePlatform">Desired platform.</param>
            <returns>The information for specific platform.</returns>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Target.WindowsPlatformInfo">
            <summary>
            "Windows" platform information.
            </summary>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Target.XboxOnePlatformInfo">
            <summary>
            "XBox One" platform information.
            </summary>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Target.PlayStation4PlatformInfo">
            <summary>
            "PlayStation 4" platform information.
            </summary>
        </member>
        <member name="T:GoddamnEngine.BuildSystem.Target.TargetInfo">
            <summary>
            Contains helper methods for targets.
            </summary>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Target.TargetInfo.EnumerateAllPlatforms">
            <summary>
            Enumerates all supported and implemented target platforms.
            </summary>
            <returns>All supported and implemented target platforms.</returns>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Target.TargetInfo.EnumerateAllConfigurations">
            <summary>
            Enumerates all supported and implemented target configurations.
            </summary>
            <returns>All supported and implemented target configurations.</returns>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Target.TargetInfo.IsDesktopPlatform(GoddamnEngine.BuildSystem.Target.TargetPlatform)">
            <summary>
            Returns true if target platform is desktop.
            </summary>
            <param name="platform">One of the target platforms.</param>
            <returns>True if target platform is desktop.</returns>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Target.TargetInfo.IsMobilePlatform(GoddamnEngine.BuildSystem.Target.TargetPlatform)">
            <summary>
            Returns true if target platform is mobile.
            </summary>
            <param name="platform">One of the target platforms.</param>
            <returns>True if target platform is mobile.</returns>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Target.TargetInfo.IsConsolePlatform(GoddamnEngine.BuildSystem.Target.TargetPlatform)">
            <summary>
            Returns true if target platform is console.
            </summary>
            <param name="platform">One of the target platforms.</param>
            <returns>True if target platform is console.</returns>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Target.TargetInfo.IsMicrosoftPlatform(GoddamnEngine.BuildSystem.Target.TargetPlatform)">
            <summary>
            Returns true if target platform`s native API is WinAPI.
            </summary>
            <param name="platform">One of the target platforms.</param>
            <returns>True if target platform`s native API is WinAPI.</returns>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Target.TargetInfo.IsApplePlatform(GoddamnEngine.BuildSystem.Target.TargetPlatform)">
            <summary>
            Returns true if target platform`s native API is Cocoa.
            </summary>
            <param name="platform">One of the target platforms.</param>
            <returns>True if target platform`s native API is Cocoa.</returns>
        </member>
        <member name="M:GoddamnEngine.BuildSystem.Target.TargetInfo.IsPosixPlatform(GoddamnEngine.BuildSystem.Target.TargetPlatform)">
            <summary>
            Returns true if target platform is POSIX compatible.
            </summary>
            <param name="platform">One of the target platforms.</param>
            <returns>True if target platform is POSIX compatible.</returns>
        </member>
    </members>
</doc>
