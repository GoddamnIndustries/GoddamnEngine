// ==========================================================================================
// Copyright (C) Goddamn Industries 2015. All Rights Reserved.
// 
// This software or any its part is distributed under terms of Goddamn Industries End User
// License Agreement. By downloading or using this software or any its part you agree with 
// terms of Goddamn Industries End User License Agreement.
// ==========================================================================================

/*!
 * @file GoddamnEngine/Engine/Interface/Graphics/GraphicsHLSLCrossCompiler/HLSLValidator.h
 * File HLSL validator interface for the shader cross compiler.
 */
#pragma once

#include <GoddamnEngine/Include.h>
#if GD_PLATFORM_DESKTOP

#include <GoddamnEngine/Core/Containers/String.h>

GD_NAMESPACE_BEGIN
	
	struct HLSLScope;
	struct HLSLBinding;
	struct HRIShaderInstanceDesc;

	// ------------------------------------------------------------------------------------------
	//! Provides validation of data, generated by HLSLParser, and generation of shader instance description using it.
	class HLSLValidator final
	{
	public:
		
		// ------------------------------------------------------------------------------------------
		//! Generates shader instance description using data generated by HLSLParser.
		//! @param Shader  Shader for which description would be generated.
		//! @param ParsedData Parsed data of specified shader.
		//! @param EntryName  Name of entry point function
		//! @returns Generated description from parsed shader data or nullptr if error occurs.
		GDAPI HRIShaderInstanceDesc* ValidateAndGenerateDescription(HLSLScope const* const ParsedData, String const& EntryName);

	private:
		GDINT void ValidateResourceParameters(HLSLScope const* const ParsedData, HRIShaderInstanceDesc* const ShaderInstanceDesc);
		GDINT void ValidateConstantBuffersParameters(HLSLScope const* const ParsedData, HRIShaderInstanceDesc* const ShaderInstanceDesc);
		GDINT void ValidateEntryPoint(HLSLScope const* const ParsedData, String const& EntryName/*, RefPtr<HRIShaderInstanceDesc>& ShaderInstanceDesc*/);
		GDINT void ValidateEntryPointArgumentBinding(HLSLBinding const* const Binding, UInt64& ShaderSemanticsList);
	};	// class HRIShaderInstanceDescGenerator

GD_NAMESPACE_END

#endif	// if GD_PLATFORM_DESKTOP
