/// ==========================================================================================
/// OGLRendererMethods.h - Generated header.
/// Copyright (C) $(GODDAMN_DEV) 2011 - Present. All Rights Reserved.
/// 
/// History:
/// 	* Generated by GoddamnOpenGLUtility.
/// ==========================================================================================

#if (!defined(GD_ENGINE_RENDERER_IMPL_OGL_RENDERER))
#	error 'This header should be included inside "OGLRenderer.h"'
#endif	// if (!defined(GD_ENGINE_RENDERER_IMPL_OGL_RENDERER))

#define GD_DEFINE_OGL_METHOD_GLUE_ARGS(...) \
	__VA_ARGS__

#define GD_DEFINE_OGL_METHOD_DEFINITION(ReturnType, MethodName, ArgumentsDeclarations, ArgumentsPassing) \
	private: \
		ReturnType (* _##MethodName)(ArgumentsDeclarations) = nullptr; \
	public: \
		GDINL ReturnType MethodName(ArgumentsDeclarations) const { \
			return self->_##MethodName(ArgumentsPassing); \
		}

#define GD_DEFINE_OGL_METHOD_LINKED(ReturnType, MethodName, ArgumentsDeclarations, ArgumentsPassing) \
	public: \
		GDINL static ReturnType MethodName(ArgumentsDeclarations) { \
			return GL.##MethodName(ArgumentsPassing); \
		}

#if (!defined(GD_DEFINE_OGL_METHOD))
#	if (!defined(GD_HRI_OGL_ES)) 
#		define GD_DEFINE_OGL_METHOD(ReturnType, MethodName, ArgumentsDeclarations, ArgumentsPassing) GD_DEFINE_OGL_METHOD_DEFINITION(ReturnType, MethodName, ArgumentsDeclarations, ArgumentsPassing)
#	else	// if (!defined(IE_HRI_OGL_ES))
#		define GD_DEFINE_OGL_METHOD(ReturnType, MethodName, ArgumentsDeclarations, ArgumentsPassing) GD_DEFINE_OGL_METHOD_LINKED(ReturnType, MethodName, ArgumentsDeclarations, ArgumentsPassing)
#	endif	// if (!defined(IE_HRI_OGL_ES))
#endif	// if (!defined(GD_HRI_OGL_METHOD_DECL))

#define GD_DEFINE_OGL_METHOD_0(ReturnType, MethodName) \
	GD_DEFINE_OGL_METHOD(ReturnType, MethodName, \
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(), \
		GD_DEFINE_OGL_METHOD_GLUE_ARGS() \
		)

#define GD_DEFINE_OGL_METHOD_1(ReturnType, MethodName, T0, A0) \
	GD_DEFINE_OGL_METHOD(ReturnType, MethodName, \
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(T0 A0), \
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(A0) \
		)

#define GD_DEFINE_OGL_METHOD_2(ReturnType, MethodName, T0, A0, T1, A1) \
	GD_DEFINE_OGL_METHOD(ReturnType, MethodName, \
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(T0 A0, T1 A1), \
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(A0, A1) \
		)

#define GD_DEFINE_OGL_METHOD_3(ReturnType, MethodName, T0, A0, T1, A1, T2, A2) \
	GD_DEFINE_OGL_METHOD(ReturnType, MethodName, \
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(T0 A0, T1 A1, T2 A2), \
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(A0, A1, A2) \
		)

#define GD_DEFINE_OGL_METHOD_4(ReturnType, MethodName, T0, A0, T1, A1, T2, A2, T3, A3) \
	GD_DEFINE_OGL_METHOD(ReturnType, MethodName, \
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(T0 A0, T1 A1, T2 A2, T3 A3), \
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(A0, A1, A2, A3) \
		)

#define GD_DEFINE_OGL_METHOD_5(ReturnType, MethodName, T0, A0, T1, A1, T2, A2, T3, A3, T4, A4) \
	GD_DEFINE_OGL_METHOD(ReturnType, MethodName, \
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(T0 A0, T1 A1, T2 A2, T3 A3, T4 A4), \
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(A0, A1, A2, A3, A4) \
		)

#define GD_DEFINE_OGL_METHOD_6(ReturnType, MethodName, T0, A0, T1, A1, T2, A2, T3, A3, T4, A4, T5, A5) \
	GD_DEFINE_OGL_METHOD(ReturnType, MethodName, \
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(T0 A0, T1 A1, T2 A2, T3 A3, T4 A4, T5 A5), \
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(A0, A1, A2, A3, A4, A5) \
		)

#define GD_DEFINE_OGL_METHOD_7(ReturnType, MethodName, T0, A0, T1, A1, T2, A2, T3, A3, T4, A4, T5, A5, T6, A6) \
	GD_DEFINE_OGL_METHOD(ReturnType, MethodName, \
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(T0 A0, T1 A1, T2 A2, T3 A3, T4 A4, T5 A5, T6 A6), \
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(A0, A1, A2, A3, A4, A5, A6) \
		)

#define GD_DEFINE_OGL_METHOD_8(ReturnType, MethodName, T0, A0, T1, A1, T2, A2, T3, A3, T4, A4, T5, A5, T6, A6, T7, A7) \
	GD_DEFINE_OGL_METHOD(ReturnType, MethodName, \
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(T0 A0, T1 A1, T2 A2, T3 A3, T4 A4, T5 A5, T6 A6, T7 A7), \
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(A0, A1, A2, A3, A4, A5, A6, A7) \
		)

#define GD_DEFINE_OGL_METHOD_9(ReturnType, MethodName, T0, A0, T1, A1, T2, A2, T3, A3, T4, A4, T5, A5, T6, A6, T7, A7, T8, A8) \
	GD_DEFINE_OGL_METHOD(ReturnType, MethodName, \
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(T0 A0, T1 A1, T2 A2, T3 A3, T4 A4, T5 A5, T6 A6, T7 A7, T8 A8), \
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(A0, A1, A2, A3, A4, A5, A6, A7, A8) \
		)

#define GD_DEFINE_OGL_METHOD_10(ReturnType, MethodName, T0, A0, T1, A1, T2, A2, T3, A3, T4, A4, T5, A5, T6, A6, T7, A7, T8, A8, T9, A9) \
	GD_DEFINE_OGL_METHOD(ReturnType, MethodName, \
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(T0 A0, T1 A1, T2 A2, T3 A3, T4 A4, T5 A5, T6 A6, T7 A7, T8 A8, T9 A9), \
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) \
		)
		
#define GD_DEFINE_OGL_METHOD_11(ReturnType, MethodName, T0, A0, T1, A1, T2, A2, T3, A3, T4, A4, T5, A5, T6, A6, T7, A7, T8, A8, T9, A9, T10, A10) \
	GD_DEFINE_OGL_METHOD(ReturnType, MethodName, \
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(T0 A0, T1 A1, T2 A2, T3 A3, T4 A4, T5 A5, T6 A6, T7 A7, T8 A8, T9 A9, T10 A10), \
		GD_DEFINE_OGL_METHOD_GLUE_ARGS(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) \
		)

// WinAPI has macros for everything..
#if (defined(GD_PLATFORM_WINAPI))
#	pragma push_macro("MemoryBarrier")
#	undef MemoryBarrier
#	pragma push_macro("near")
#	undef near
#	pragma push_macro("far")
#	undef far
#endif	// if (defined(GD_PLATFORM_WINAPI))

/// ==========================================================================================
/// OpenGL <-> Functionality
/// ==========================================================================================
#if (defined(GD_HRI_OGL_ES))

// void glActiveTexture(GLenum texture);
GD_DEFINE_OGL_METHOD_1(
	void, ActiveTexture
	, GLenum const, texture
	)

// void glAttachShader(GLuint program, GLuint shader);
GD_DEFINE_OGL_METHOD_2(
	void, AttachShader
	, GLuint const, program
	, GLuint const, shader
	)

// void glBindAttribLocation(GLuint program, GLuint index, const GLchar *name);
GD_DEFINE_OGL_METHOD_3(
	void, BindAttribLocation
	, GLuint const, program
	, GLuint const, index
	, const GLchar* const, name
	)

// void glBindBuffer(GLenum target, GLuint buffer);
GD_DEFINE_OGL_METHOD_2(
	void, BindBuffer
	, GLenum const, target
	, GLuint const, buffer
	)

// void glBindFramebuffer(GLenum target, GLuint framebuffer);
GD_DEFINE_OGL_METHOD_2(
	void, BindFramebuffer
	, GLenum const, target
	, GLuint const, framebuffer
	)

// void glBindRenderbuffer(GLenum target, GLuint renderbuffer);
GD_DEFINE_OGL_METHOD_2(
	void, BindRenderbuffer
	, GLenum const, target
	, GLuint const, renderbuffer
	)

// void glBindTexture(GLenum target, GLuint texture);
GD_DEFINE_OGL_METHOD_2(
	void, BindTexture
	, GLenum const, target
	, GLuint const, texture
	)

// void glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
GD_DEFINE_OGL_METHOD_4(
	void, BlendColor
	, GLfloat const, red
	, GLfloat const, green
	, GLfloat const, blue
	, GLfloat const, alpha
	)

// void glBlendEquation(GLenum mode);
GD_DEFINE_OGL_METHOD_1(
	void, BlendEquation
	, GLenum const, mode
	)

// void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);
GD_DEFINE_OGL_METHOD_2(
	void, BlendEquationSeparate
	, GLenum const, modeRGB
	, GLenum const, modeAlpha
	)

// void glBlendFunc(GLenum sfactor, GLenum dfactor);
GD_DEFINE_OGL_METHOD_2(
	void, BlendFunc
	, GLenum const, sfactor
	, GLenum const, dfactor
	)

// void glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
GD_DEFINE_OGL_METHOD_4(
	void, BlendFuncSeparate
	, GLenum const, sfactorRGB
	, GLenum const, dfactorRGB
	, GLenum const, sfactorAlpha
	, GLenum const, dfactorAlpha
	)

// void glBufferData(GLenum target, GLsizeiptr size, const void *data, GLenum usage);
GD_DEFINE_OGL_METHOD_4(
	void, BufferData
	, GLenum const, target
	, GLsizeiptr const, size
	, const void* const, data
	, GLenum const, usage
	)

// void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
GD_DEFINE_OGL_METHOD_4(
	void, BufferSubData
	, GLenum const, target
	, GLintptr const, offset
	, GLsizeiptr const, size
	, const void* const, data
	)

// GLenum glCheckFramebufferStatus(GLenum target);
GD_DEFINE_OGL_METHOD_1(
	GLenum, CheckFramebufferStatus
	, GLenum const, target
	)

// void glClear(GLbitfield mask);
GD_DEFINE_OGL_METHOD_1(
	void, Clear
	, GLbitfield const, mask
	)

// void glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
GD_DEFINE_OGL_METHOD_4(
	void, ClearColor
	, GLfloat const, red
	, GLfloat const, green
	, GLfloat const, blue
	, GLfloat const, alpha
	)

// void glClearDepthf(GLfloat d);
GD_DEFINE_OGL_METHOD_1(
	void, ClearDepthf
	, GLfloat const, d
	)

// void glClearStencil(GLint s);
GD_DEFINE_OGL_METHOD_1(
	void, ClearStencil
	, GLint const, s
	)

// void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
GD_DEFINE_OGL_METHOD_4(
	void, ColorMask
	, GLboolean const, red
	, GLboolean const, green
	, GLboolean const, blue
	, GLboolean const, alpha
	)

// void glCompileShader(GLuint shader);
GD_DEFINE_OGL_METHOD_1(
	void, CompileShader
	, GLuint const, shader
	)

// void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
GD_DEFINE_OGL_METHOD_8(
	void, CompressedTexImage2D
	, GLenum const, target
	, GLint const, level
	, GLenum const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	, GLint const, border
	, GLsizei const, imageSize
	, const void* const, data
	)

// void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
GD_DEFINE_OGL_METHOD_9(
	void, CompressedTexSubImage2D
	, GLenum const, target
	, GLint const, level
	, GLint const, xoffset
	, GLint const, yoffset
	, GLsizei const, width
	, GLsizei const, height
	, GLenum const, format
	, GLsizei const, imageSize
	, const void* const, data
	)

// void glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
GD_DEFINE_OGL_METHOD_8(
	void, CopyTexImage2D
	, GLenum const, target
	, GLint const, level
	, GLenum const, internalformat
	, GLint const, x
	, GLint const, y
	, GLsizei const, width
	, GLsizei const, height
	, GLint const, border
	)

// void glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GD_DEFINE_OGL_METHOD_8(
	void, CopyTexSubImage2D
	, GLenum const, target
	, GLint const, level
	, GLint const, xoffset
	, GLint const, yoffset
	, GLint const, x
	, GLint const, y
	, GLsizei const, width
	, GLsizei const, height
	)

// GLuint glCreateProgram(void);
GD_DEFINE_OGL_METHOD_0(
	GLuint, CreateProgram
	/**** NO ARGUMENTS ****/
	)

// GLuint glCreateShader(GLenum type);
GD_DEFINE_OGL_METHOD_1(
	GLuint, CreateShader
	, GLenum const, type
	)

// void glCullFace(GLenum mode);
GD_DEFINE_OGL_METHOD_1(
	void, CullFace
	, GLenum const, mode
	)

// void glDeleteBuffers(GLsizei n, const GLuint *buffers);
GD_DEFINE_OGL_METHOD_2(
	void, DeleteBuffers
	, GLsizei const, n
	, const GLuint* const, buffers
	)

// void glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers);
GD_DEFINE_OGL_METHOD_2(
	void, DeleteFramebuffers
	, GLsizei const, n
	, const GLuint* const, framebuffers
	)

// void glDeleteProgram(GLuint program);
GD_DEFINE_OGL_METHOD_1(
	void, DeleteProgram
	, GLuint const, program
	)

// void glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers);
GD_DEFINE_OGL_METHOD_2(
	void, DeleteRenderbuffers
	, GLsizei const, n
	, const GLuint* const, renderbuffers
	)

// void glDeleteShader(GLuint shader);
GD_DEFINE_OGL_METHOD_1(
	void, DeleteShader
	, GLuint const, shader
	)

// void glDeleteTextures(GLsizei n, const GLuint *textures);
GD_DEFINE_OGL_METHOD_2(
	void, DeleteTextures
	, GLsizei const, n
	, const GLuint* const, textures
	)

// void glDepthFunc(GLenum func);
GD_DEFINE_OGL_METHOD_1(
	void, DepthFunc
	, GLenum const, func
	)

// void glDepthMask(GLboolean flag);
GD_DEFINE_OGL_METHOD_1(
	void, DepthMask
	, GLboolean const, flag
	)

// void glDepthRangef(GLfloat n, GLfloat f);
GD_DEFINE_OGL_METHOD_2(
	void, DepthRangef
	, GLfloat const, n
	, GLfloat const, f
	)

// void glDetachShader(GLuint program, GLuint shader);
GD_DEFINE_OGL_METHOD_2(
	void, DetachShader
	, GLuint const, program
	, GLuint const, shader
	)

// void glDisable(GLenum cap);
GD_DEFINE_OGL_METHOD_1(
	void, Disable
	, GLenum const, cap
	)

// void glDisableVertexAttribArray(GLuint index);
GD_DEFINE_OGL_METHOD_1(
	void, DisableVertexAttribArray
	, GLuint const, index
	)

// void glDrawArrays(GLenum mode, GLint first, GLsizei count);
GD_DEFINE_OGL_METHOD_3(
	void, DrawArrays
	, GLenum const, mode
	, GLint const, first
	, GLsizei const, count
	)

// void glDrawElements(GLenum mode, GLsizei count, GLenum type, const void *indices);
GD_DEFINE_OGL_METHOD_4(
	void, DrawElements
	, GLenum const, mode
	, GLsizei const, count
	, GLenum const, type
	, const void* const, indices
	)

// void glEnable(GLenum cap);
GD_DEFINE_OGL_METHOD_1(
	void, Enable
	, GLenum const, cap
	)

// void glEnableVertexAttribArray(GLuint index);
GD_DEFINE_OGL_METHOD_1(
	void, EnableVertexAttribArray
	, GLuint const, index
	)

// void glFinish(void);
GD_DEFINE_OGL_METHOD_0(
	void, Finish
	/**** NO ARGUMENTS ****/
	)

// void glFlush(void);
GD_DEFINE_OGL_METHOD_0(
	void, Flush
	/**** NO ARGUMENTS ****/
	)

// void glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
GD_DEFINE_OGL_METHOD_4(
	void, FramebufferRenderbuffer
	, GLenum const, target
	, GLenum const, attachment
	, GLenum const, renderbuffertarget
	, GLuint const, renderbuffer
	)

// void glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
GD_DEFINE_OGL_METHOD_5(
	void, FramebufferTexture2D
	, GLenum const, target
	, GLenum const, attachment
	, GLenum const, textarget
	, GLuint const, texture
	, GLint const, level
	)

// void glFrontFace(GLenum mode);
GD_DEFINE_OGL_METHOD_1(
	void, FrontFace
	, GLenum const, mode
	)

// void glGenBuffers(GLsizei n, GLuint *buffers);
GD_DEFINE_OGL_METHOD_2(
	void, GenBuffers
	, GLsizei const, n
	, GLuint* const, buffers
	)

// void glGenerateMipmap(GLenum target);
GD_DEFINE_OGL_METHOD_1(
	void, GenerateMipmap
	, GLenum const, target
	)

// void glGenFramebuffers(GLsizei n, GLuint *framebuffers);
GD_DEFINE_OGL_METHOD_2(
	void, GenFramebuffers
	, GLsizei const, n
	, GLuint* const, framebuffers
	)

// void glGenRenderbuffers(GLsizei n, GLuint *renderbuffers);
GD_DEFINE_OGL_METHOD_2(
	void, GenRenderbuffers
	, GLsizei const, n
	, GLuint* const, renderbuffers
	)

// void glGenTextures(GLsizei n, GLuint *textures);
GD_DEFINE_OGL_METHOD_2(
	void, GenTextures
	, GLsizei const, n
	, GLuint* const, textures
	)

// void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
GD_DEFINE_OGL_METHOD_7(
	void, GetActiveAttrib
	, GLuint const, program
	, GLuint const, index
	, GLsizei const, bufSize
	, GLsizei* const, length
	, GLint* const, size
	, GLenum* const, type
	, GLchar* const, name
	)

// void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
GD_DEFINE_OGL_METHOD_7(
	void, GetActiveUniform
	, GLuint const, program
	, GLuint const, index
	, GLsizei const, bufSize
	, GLsizei* const, length
	, GLint* const, size
	, GLenum* const, type
	, GLchar* const, name
	)

// void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
GD_DEFINE_OGL_METHOD_4(
	void, GetAttachedShaders
	, GLuint const, program
	, GLsizei const, maxCount
	, GLsizei* const, count
	, GLuint* const, shaders
	)

// GLint glGetAttribLocation(GLuint program, const GLchar *name);
GD_DEFINE_OGL_METHOD_2(
	GLint, GetAttribLocation
	, GLuint const, program
	, const GLchar* const, name
	)

// void glGetBooleanv(GLenum pname, GLboolean *data);
GD_DEFINE_OGL_METHOD_2(
	void, GetBooleanv
	, GLenum const, pname
	, GLboolean* const, data
	)

// void glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetBufferParameteriv
	, GLenum const, target
	, GLenum const, pname
	, GLint* const, params
	)

// GLenum glGetError(void);
GD_DEFINE_OGL_METHOD_0(
	GLenum, GetError
	/**** NO ARGUMENTS ****/
	)

// void glGetFloatv(GLenum pname, GLfloat *data);
GD_DEFINE_OGL_METHOD_2(
	void, GetFloatv
	, GLenum const, pname
	, GLfloat* const, data
	)

// void glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_4(
	void, GetFramebufferAttachmentParameteriv
	, GLenum const, target
	, GLenum const, attachment
	, GLenum const, pname
	, GLint* const, params
	)

// void glGetIntegerv(GLenum pname, GLint *data);
GD_DEFINE_OGL_METHOD_2(
	void, GetIntegerv
	, GLenum const, pname
	, GLint* const, data
	)

// void glGetProgramiv(GLuint program, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetProgramiv
	, GLuint const, program
	, GLenum const, pname
	, GLint* const, params
	)

// void glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
GD_DEFINE_OGL_METHOD_4(
	void, GetProgramInfoLog
	, GLuint const, program
	, GLsizei const, bufSize
	, GLsizei* const, length
	, GLchar* const, infoLog
	)

// void glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetRenderbufferParameteriv
	, GLenum const, target
	, GLenum const, pname
	, GLint* const, params
	)

// void glGetShaderiv(GLuint shader, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetShaderiv
	, GLuint const, shader
	, GLenum const, pname
	, GLint* const, params
	)

// void glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
GD_DEFINE_OGL_METHOD_4(
	void, GetShaderInfoLog
	, GLuint const, shader
	, GLsizei const, bufSize
	, GLsizei* const, length
	, GLchar* const, infoLog
	)

// void glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
GD_DEFINE_OGL_METHOD_4(
	void, GetShaderPrecisionFormat
	, GLenum const, shadertype
	, GLenum const, precisiontype
	, GLint* const, range
	, GLint* const, precision
	)

// void glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
GD_DEFINE_OGL_METHOD_4(
	void, GetShaderSource
	, GLuint const, shader
	, GLsizei const, bufSize
	, GLsizei* const, length
	, GLchar* const, source
	)

// GLubyte const* glGetString(GLenum name);
GD_DEFINE_OGL_METHOD_1(
	GLubyte const*, GetString
	, GLenum const, name
	)

// void glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetTexParameterfv
	, GLenum const, target
	, GLenum const, pname
	, GLfloat* const, params
	)

// void glGetTexParameteriv(GLenum target, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetTexParameteriv
	, GLenum const, target
	, GLenum const, pname
	, GLint* const, params
	)

// void glGetUniformfv(GLuint program, GLint location, GLfloat *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetUniformfv
	, GLuint const, program
	, GLint const, location
	, GLfloat* const, params
	)

// void glGetUniformiv(GLuint program, GLint location, GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetUniformiv
	, GLuint const, program
	, GLint const, location
	, GLint* const, params
	)

// GLint glGetUniformLocation(GLuint program, const GLchar *name);
GD_DEFINE_OGL_METHOD_2(
	GLint, GetUniformLocation
	, GLuint const, program
	, const GLchar* const, name
	)

// void glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetVertexAttribfv
	, GLuint const, index
	, GLenum const, pname
	, GLfloat* const, params
	)

// void glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetVertexAttribiv
	, GLuint const, index
	, GLenum const, pname
	, GLint* const, params
	)

// void glGetVertexAttribPointerv(GLuint index, GLenum pname, void **pointer);
GD_DEFINE_OGL_METHOD_3(
	void, GetVertexAttribPointerv
	, GLuint const, index
	, GLenum const, pname
	, void** const, pointer
	)

// void glHint(GLenum target, GLenum mode);
GD_DEFINE_OGL_METHOD_2(
	void, Hint
	, GLenum const, target
	, GLenum const, mode
	)

// GLboolean glIsBuffer(GLuint buffer);
GD_DEFINE_OGL_METHOD_1(
	GLboolean, IsBuffer
	, GLuint const, buffer
	)

// GLboolean glIsEnabled(GLenum cap);
GD_DEFINE_OGL_METHOD_1(
	GLboolean, IsEnabled
	, GLenum const, cap
	)

// GLboolean glIsFramebuffer(GLuint framebuffer);
GD_DEFINE_OGL_METHOD_1(
	GLboolean, IsFramebuffer
	, GLuint const, framebuffer
	)

// GLboolean glIsProgram(GLuint program);
GD_DEFINE_OGL_METHOD_1(
	GLboolean, IsProgram
	, GLuint const, program
	)

// GLboolean glIsRenderbuffer(GLuint renderbuffer);
GD_DEFINE_OGL_METHOD_1(
	GLboolean, IsRenderbuffer
	, GLuint const, renderbuffer
	)

// GLboolean glIsShader(GLuint shader);
GD_DEFINE_OGL_METHOD_1(
	GLboolean, IsShader
	, GLuint const, shader
	)

// GLboolean glIsTexture(GLuint texture);
GD_DEFINE_OGL_METHOD_1(
	GLboolean, IsTexture
	, GLuint const, texture
	)

// void glLineWidth(GLfloat width);
GD_DEFINE_OGL_METHOD_1(
	void, LineWidth
	, GLfloat const, width
	)

// void glLinkProgram(GLuint program);
GD_DEFINE_OGL_METHOD_1(
	void, LinkProgram
	, GLuint const, program
	)

// void glPixelStorei(GLenum pname, GLint param);
GD_DEFINE_OGL_METHOD_2(
	void, PixelStorei
	, GLenum const, pname
	, GLint const, param
	)

// void glPolygonOffset(GLfloat factor, GLfloat units);
GD_DEFINE_OGL_METHOD_2(
	void, PolygonOffset
	, GLfloat const, factor
	, GLfloat const, units
	)

// void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);
GD_DEFINE_OGL_METHOD_7(
	void, ReadPixels
	, GLint const, x
	, GLint const, y
	, GLsizei const, width
	, GLsizei const, height
	, GLenum const, format
	, GLenum const, type
	, void* const, pixels
	)

// void glReleaseShaderCompiler(void);
GD_DEFINE_OGL_METHOD_0(
	void, ReleaseShaderCompiler
	/**** NO ARGUMENTS ****/
	)

// void glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
GD_DEFINE_OGL_METHOD_4(
	void, RenderbufferStorage
	, GLenum const, target
	, GLenum const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	)

// void glSampleCoverage(GLfloat value, GLboolean invert);
GD_DEFINE_OGL_METHOD_2(
	void, SampleCoverage
	, GLfloat const, value
	, GLboolean const, invert
	)

// void glScissor(GLint x, GLint y, GLsizei width, GLsizei height);
GD_DEFINE_OGL_METHOD_4(
	void, Scissor
	, GLint const, x
	, GLint const, y
	, GLsizei const, width
	, GLsizei const, height
	)

// void glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length);
GD_DEFINE_OGL_METHOD_5(
	void, ShaderBinary
	, GLsizei const, count
	, const GLuint* const, shaders
	, GLenum const, binaryformat
	, const void* const, binary
	, GLsizei const, length
	)

// void glShaderSource(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);
GD_DEFINE_OGL_METHOD_4(
	void, ShaderSource
	, GLuint const, shader
	, GLsizei const, count
	, const GLchar*const* const, string
	, const GLint* const, length
	)

// void glStencilFunc(GLenum func, GLint ref, GLuint mask);
GD_DEFINE_OGL_METHOD_3(
	void, StencilFunc
	, GLenum const, func
	, GLint const, ref
	, GLuint const, mask
	)

// void glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask);
GD_DEFINE_OGL_METHOD_4(
	void, StencilFuncSeparate
	, GLenum const, face
	, GLenum const, func
	, GLint const, ref
	, GLuint const, mask
	)

// void glStencilMask(GLuint mask);
GD_DEFINE_OGL_METHOD_1(
	void, StencilMask
	, GLuint const, mask
	)

// void glStencilMaskSeparate(GLenum face, GLuint mask);
GD_DEFINE_OGL_METHOD_2(
	void, StencilMaskSeparate
	, GLenum const, face
	, GLuint const, mask
	)

// void glStencilOp(GLenum fail, GLenum zfail, GLenum zpass);
GD_DEFINE_OGL_METHOD_3(
	void, StencilOp
	, GLenum const, fail
	, GLenum const, zfail
	, GLenum const, zpass
	)

// void glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
GD_DEFINE_OGL_METHOD_4(
	void, StencilOpSeparate
	, GLenum const, face
	, GLenum const, sfail
	, GLenum const, dpfail
	, GLenum const, dppass
	)

// void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
GD_DEFINE_OGL_METHOD_9(
	void, TexImage2D
	, GLenum const, target
	, GLint const, level
	, GLint const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	, GLint const, border
	, GLenum const, format
	, GLenum const, type
	, const void* const, pixels
	)

// void glTexParameterf(GLenum target, GLenum pname, GLfloat param);
GD_DEFINE_OGL_METHOD_3(
	void, TexParameterf
	, GLenum const, target
	, GLenum const, pname
	, GLfloat const, param
	)

// void glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params);
GD_DEFINE_OGL_METHOD_3(
	void, TexParameterfv
	, GLenum const, target
	, GLenum const, pname
	, const GLfloat* const, params
	)

// void glTexParameteri(GLenum target, GLenum pname, GLint param);
GD_DEFINE_OGL_METHOD_3(
	void, TexParameteri
	, GLenum const, target
	, GLenum const, pname
	, GLint const, param
	)

// void glTexParameteriv(GLenum target, GLenum pname, const GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, TexParameteriv
	, GLenum const, target
	, GLenum const, pname
	, const GLint* const, params
	)

// void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
GD_DEFINE_OGL_METHOD_9(
	void, TexSubImage2D
	, GLenum const, target
	, GLint const, level
	, GLint const, xoffset
	, GLint const, yoffset
	, GLsizei const, width
	, GLsizei const, height
	, GLenum const, format
	, GLenum const, type
	, const void* const, pixels
	)

// void glUniform1f(GLint location, GLfloat v0);
GD_DEFINE_OGL_METHOD_2(
	void, Uniform1f
	, GLint const, location
	, GLfloat const, v0
	)

// void glUniform1fv(GLint location, GLsizei count, const GLfloat *value);
GD_DEFINE_OGL_METHOD_3(
	void, Uniform1fv
	, GLint const, location
	, GLsizei const, count
	, const GLfloat* const, value
	)

// void glUniform1i(GLint location, GLint v0);
GD_DEFINE_OGL_METHOD_2(
	void, Uniform1i
	, GLint const, location
	, GLint const, v0
	)

// void glUniform1iv(GLint location, GLsizei count, const GLint *value);
GD_DEFINE_OGL_METHOD_3(
	void, Uniform1iv
	, GLint const, location
	, GLsizei const, count
	, const GLint* const, value
	)

// void glUniform2f(GLint location, GLfloat v0, GLfloat v1);
GD_DEFINE_OGL_METHOD_3(
	void, Uniform2f
	, GLint const, location
	, GLfloat const, v0
	, GLfloat const, v1
	)

// void glUniform2fv(GLint location, GLsizei count, const GLfloat *value);
GD_DEFINE_OGL_METHOD_3(
	void, Uniform2fv
	, GLint const, location
	, GLsizei const, count
	, const GLfloat* const, value
	)

// void glUniform2i(GLint location, GLint v0, GLint v1);
GD_DEFINE_OGL_METHOD_3(
	void, Uniform2i
	, GLint const, location
	, GLint const, v0
	, GLint const, v1
	)

// void glUniform2iv(GLint location, GLsizei count, const GLint *value);
GD_DEFINE_OGL_METHOD_3(
	void, Uniform2iv
	, GLint const, location
	, GLsizei const, count
	, const GLint* const, value
	)

// void glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
GD_DEFINE_OGL_METHOD_4(
	void, Uniform3f
	, GLint const, location
	, GLfloat const, v0
	, GLfloat const, v1
	, GLfloat const, v2
	)

// void glUniform3fv(GLint location, GLsizei count, const GLfloat *value);
GD_DEFINE_OGL_METHOD_3(
	void, Uniform3fv
	, GLint const, location
	, GLsizei const, count
	, const GLfloat* const, value
	)

// void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2);
GD_DEFINE_OGL_METHOD_4(
	void, Uniform3i
	, GLint const, location
	, GLint const, v0
	, GLint const, v1
	, GLint const, v2
	)

// void glUniform3iv(GLint location, GLsizei count, const GLint *value);
GD_DEFINE_OGL_METHOD_3(
	void, Uniform3iv
	, GLint const, location
	, GLsizei const, count
	, const GLint* const, value
	)

// void glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
GD_DEFINE_OGL_METHOD_5(
	void, Uniform4f
	, GLint const, location
	, GLfloat const, v0
	, GLfloat const, v1
	, GLfloat const, v2
	, GLfloat const, v3
	)

// void glUniform4fv(GLint location, GLsizei count, const GLfloat *value);
GD_DEFINE_OGL_METHOD_3(
	void, Uniform4fv
	, GLint const, location
	, GLsizei const, count
	, const GLfloat* const, value
	)

// void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
GD_DEFINE_OGL_METHOD_5(
	void, Uniform4i
	, GLint const, location
	, GLint const, v0
	, GLint const, v1
	, GLint const, v2
	, GLint const, v3
	)

// void glUniform4iv(GLint location, GLsizei count, const GLint *value);
GD_DEFINE_OGL_METHOD_3(
	void, Uniform4iv
	, GLint const, location
	, GLsizei const, count
	, const GLint* const, value
	)

// void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_4(
	void, UniformMatrix2fv
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_4(
	void, UniformMatrix3fv
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_4(
	void, UniformMatrix4fv
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glUseProgram(GLuint program);
GD_DEFINE_OGL_METHOD_1(
	void, UseProgram
	, GLuint const, program
	)

// void glValidateProgram(GLuint program);
GD_DEFINE_OGL_METHOD_1(
	void, ValidateProgram
	, GLuint const, program
	)

// void glVertexAttrib1f(GLuint index, GLfloat x);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttrib1f
	, GLuint const, index
	, GLfloat const, x
	)

// void glVertexAttrib1fv(GLuint index, const GLfloat *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttrib1fv
	, GLuint const, index
	, const GLfloat* const, v
	)

// void glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y);
GD_DEFINE_OGL_METHOD_3(
	void, VertexAttrib2f
	, GLuint const, index
	, GLfloat const, x
	, GLfloat const, y
	)

// void glVertexAttrib2fv(GLuint index, const GLfloat *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttrib2fv
	, GLuint const, index
	, const GLfloat* const, v
	)

// void glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);
GD_DEFINE_OGL_METHOD_4(
	void, VertexAttrib3f
	, GLuint const, index
	, GLfloat const, x
	, GLfloat const, y
	, GLfloat const, z
	)

// void glVertexAttrib3fv(GLuint index, const GLfloat *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttrib3fv
	, GLuint const, index
	, const GLfloat* const, v
	)

// void glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
GD_DEFINE_OGL_METHOD_5(
	void, VertexAttrib4f
	, GLuint const, index
	, GLfloat const, x
	, GLfloat const, y
	, GLfloat const, z
	, GLfloat const, w
	)

// void glVertexAttrib4fv(GLuint index, const GLfloat *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttrib4fv
	, GLuint const, index
	, const GLfloat* const, v
	)

// void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
GD_DEFINE_OGL_METHOD_6(
	void, VertexAttribPointer
	, GLuint const, index
	, GLint const, size
	, GLenum const, type
	, GLboolean const, normalized
	, GLsizei const, stride
	, const void* const, pointer
	)

// void glViewport(GLint x, GLint y, GLsizei width, GLsizei height);
GD_DEFINE_OGL_METHOD_4(
	void, Viewport
	, GLint const, x
	, GLint const, y
	, GLsizei const, width
	, GLsizei const, height
	)

// void glReadBuffer(GLenum src);
GD_DEFINE_OGL_METHOD_1(
	void, ReadBuffer
	, GLenum const, src
	)

// void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
GD_DEFINE_OGL_METHOD_6(
	void, DrawRangeElements
	, GLenum const, mode
	, GLuint const, start
	, GLuint const, end
	, GLsizei const, count
	, GLenum const, type
	, const void* const, indices
	)

// void glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
GD_DEFINE_OGL_METHOD_10(
	void, TexImage3D
	, GLenum const, target
	, GLint const, level
	, GLint const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	, GLsizei const, depth
	, GLint const, border
	, GLenum const, format
	, GLenum const, type
	, const void* const, pixels
	)

// void glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
// ***** SKIPPED DUE ARGUMENTS COUNT LIMITATION *****

// void glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GD_DEFINE_OGL_METHOD_9(
	void, CopyTexSubImage3D
	, GLenum const, target
	, GLint const, level
	, GLint const, xoffset
	, GLint const, yoffset
	, GLint const, zoffset
	, GLint const, x
	, GLint const, y
	, GLsizei const, width
	, GLsizei const, height
	)

// void glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
GD_DEFINE_OGL_METHOD_9(
	void, CompressedTexImage3D
	, GLenum const, target
	, GLint const, level
	, GLenum const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	, GLsizei const, depth
	, GLint const, border
	, GLsizei const, imageSize
	, const void* const, data
	)

// void glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
// ***** SKIPPED DUE ARGUMENTS COUNT LIMITATION *****

// void glGenQueries(GLsizei n, GLuint *ids);
GD_DEFINE_OGL_METHOD_2(
	void, GenQueries
	, GLsizei const, n
	, GLuint* const, ids
	)

// void glDeleteQueries(GLsizei n, const GLuint *ids);
GD_DEFINE_OGL_METHOD_2(
	void, DeleteQueries
	, GLsizei const, n
	, const GLuint* const, ids
	)

// GLboolean glIsQuery(GLuint id);
GD_DEFINE_OGL_METHOD_1(
	GLboolean, IsQuery
	, GLuint const, id
	)

// void glBeginQuery(GLenum target, GLuint id);
GD_DEFINE_OGL_METHOD_2(
	void, BeginQuery
	, GLenum const, target
	, GLuint const, id
	)

// void glEndQuery(GLenum target);
GD_DEFINE_OGL_METHOD_1(
	void, EndQuery
	, GLenum const, target
	)

// void glGetQueryiv(GLenum target, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetQueryiv
	, GLenum const, target
	, GLenum const, pname
	, GLint* const, params
	)

// void glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetQueryObjectuiv
	, GLuint const, id
	, GLenum const, pname
	, GLuint* const, params
	)

// GLboolean glUnmapBuffer(GLenum target);
GD_DEFINE_OGL_METHOD_1(
	GLboolean, UnmapBuffer
	, GLenum const, target
	)

// void glGetBufferPointerv(GLenum target, GLenum pname, void **params);
GD_DEFINE_OGL_METHOD_3(
	void, GetBufferPointerv
	, GLenum const, target
	, GLenum const, pname
	, void** const, params
	)

// void glDrawBuffers(GLsizei n, const GLenum *bufs);
GD_DEFINE_OGL_METHOD_2(
	void, DrawBuffers
	, GLsizei const, n
	, const GLenum* const, bufs
	)

// void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_4(
	void, UniformMatrix2x3fv
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_4(
	void, UniformMatrix3x2fv
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_4(
	void, UniformMatrix2x4fv
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_4(
	void, UniformMatrix4x2fv
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_4(
	void, UniformMatrix3x4fv
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_4(
	void, UniformMatrix4x3fv
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
GD_DEFINE_OGL_METHOD_10(
	void, BlitFramebuffer
	, GLint const, srcX0
	, GLint const, srcY0
	, GLint const, srcX1
	, GLint const, srcY1
	, GLint const, dstX0
	, GLint const, dstY0
	, GLint const, dstX1
	, GLint const, dstY1
	, GLbitfield const, mask
	, GLenum const, filter
	)

// void glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
GD_DEFINE_OGL_METHOD_5(
	void, RenderbufferStorageMultisample
	, GLenum const, target
	, GLsizei const, samples
	, GLenum const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	)

// void glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
GD_DEFINE_OGL_METHOD_5(
	void, FramebufferTextureLayer
	, GLenum const, target
	, GLenum const, attachment
	, GLuint const, texture
	, GLint const, level
	, GLint const, layer
	)

// void glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
GD_DEFINE_OGL_METHOD_4(
	void, MapBufferRange
	, GLenum const, target
	, GLintptr const, offset
	, GLsizeiptr const, length
	, GLbitfield const, access
	)

// void glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length);
GD_DEFINE_OGL_METHOD_3(
	void, FlushMappedBufferRange
	, GLenum const, target
	, GLintptr const, offset
	, GLsizeiptr const, length
	)

// void glBindVertexArray(GLuint array);
GD_DEFINE_OGL_METHOD_1(
	void, BindVertexArray
	, GLuint const, array
	)

// void glDeleteVertexArrays(GLsizei n, const GLuint *arrays);
GD_DEFINE_OGL_METHOD_2(
	void, DeleteVertexArrays
	, GLsizei const, n
	, const GLuint* const, arrays
	)

// void glGenVertexArrays(GLsizei n, GLuint *arrays);
GD_DEFINE_OGL_METHOD_2(
	void, GenVertexArrays
	, GLsizei const, n
	, GLuint* const, arrays
	)

// GLboolean glIsVertexArray(GLuint array);
GD_DEFINE_OGL_METHOD_1(
	GLboolean, IsVertexArray
	, GLuint const, array
	)

// void glGetIntegeri_v(GLenum target, GLuint index, GLint *data);
GD_DEFINE_OGL_METHOD_3(
	void, GetIntegeri_v
	, GLenum const, target
	, GLuint const, index
	, GLint* const, data
	)

// void glBeginTransformFeedback(GLenum primitiveMode);
GD_DEFINE_OGL_METHOD_1(
	void, BeginTransformFeedback
	, GLenum const, primitiveMode
	)

// void glEndTransformFeedback(void);
GD_DEFINE_OGL_METHOD_0(
	void, EndTransformFeedback
	/**** NO ARGUMENTS ****/
	)

// void glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
GD_DEFINE_OGL_METHOD_5(
	void, BindBufferRange
	, GLenum const, target
	, GLuint const, index
	, GLuint const, buffer
	, GLintptr const, offset
	, GLsizeiptr const, size
	)

// void glBindBufferBase(GLenum target, GLuint index, GLuint buffer);
GD_DEFINE_OGL_METHOD_3(
	void, BindBufferBase
	, GLenum const, target
	, GLuint const, index
	, GLuint const, buffer
	)

// void glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
GD_DEFINE_OGL_METHOD_4(
	void, TransformFeedbackVaryings
	, GLuint const, program
	, GLsizei const, count
	, const GLchar*const* const, varyings
	, GLenum const, bufferMode
	)

// void glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
GD_DEFINE_OGL_METHOD_7(
	void, GetTransformFeedbackVarying
	, GLuint const, program
	, GLuint const, index
	, GLsizei const, bufSize
	, GLsizei* const, length
	, GLsizei* const, size
	, GLenum* const, type
	, GLchar* const, name
	)

// void glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
GD_DEFINE_OGL_METHOD_5(
	void, VertexAttribIPointer
	, GLuint const, index
	, GLint const, size
	, GLenum const, type
	, GLsizei const, stride
	, const void* const, pointer
	)

// void glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetVertexAttribIiv
	, GLuint const, index
	, GLenum const, pname
	, GLint* const, params
	)

// void glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetVertexAttribIuiv
	, GLuint const, index
	, GLenum const, pname
	, GLuint* const, params
	)

// void glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w);
GD_DEFINE_OGL_METHOD_5(
	void, VertexAttribI4i
	, GLuint const, index
	, GLint const, x
	, GLint const, y
	, GLint const, z
	, GLint const, w
	)

// void glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
GD_DEFINE_OGL_METHOD_5(
	void, VertexAttribI4ui
	, GLuint const, index
	, GLuint const, x
	, GLuint const, y
	, GLuint const, z
	, GLuint const, w
	)

// void glVertexAttribI4iv(GLuint index, const GLint *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttribI4iv
	, GLuint const, index
	, const GLint* const, v
	)

// void glVertexAttribI4uiv(GLuint index, const GLuint *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttribI4uiv
	, GLuint const, index
	, const GLuint* const, v
	)

// void glGetUniformuiv(GLuint program, GLint location, GLuint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetUniformuiv
	, GLuint const, program
	, GLint const, location
	, GLuint* const, params
	)

// GLint glGetFragDataLocation(GLuint program, const GLchar *name);
GD_DEFINE_OGL_METHOD_2(
	GLint, GetFragDataLocation
	, GLuint const, program
	, const GLchar* const, name
	)

// void glUniform1ui(GLint location, GLuint v0);
GD_DEFINE_OGL_METHOD_2(
	void, Uniform1ui
	, GLint const, location
	, GLuint const, v0
	)

// void glUniform2ui(GLint location, GLuint v0, GLuint v1);
GD_DEFINE_OGL_METHOD_3(
	void, Uniform2ui
	, GLint const, location
	, GLuint const, v0
	, GLuint const, v1
	)

// void glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2);
GD_DEFINE_OGL_METHOD_4(
	void, Uniform3ui
	, GLint const, location
	, GLuint const, v0
	, GLuint const, v1
	, GLuint const, v2
	)

// void glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
GD_DEFINE_OGL_METHOD_5(
	void, Uniform4ui
	, GLint const, location
	, GLuint const, v0
	, GLuint const, v1
	, GLuint const, v2
	, GLuint const, v3
	)

// void glUniform1uiv(GLint location, GLsizei count, const GLuint *value);
GD_DEFINE_OGL_METHOD_3(
	void, Uniform1uiv
	, GLint const, location
	, GLsizei const, count
	, const GLuint* const, value
	)

// void glUniform2uiv(GLint location, GLsizei count, const GLuint *value);
GD_DEFINE_OGL_METHOD_3(
	void, Uniform2uiv
	, GLint const, location
	, GLsizei const, count
	, const GLuint* const, value
	)

// void glUniform3uiv(GLint location, GLsizei count, const GLuint *value);
GD_DEFINE_OGL_METHOD_3(
	void, Uniform3uiv
	, GLint const, location
	, GLsizei const, count
	, const GLuint* const, value
	)

// void glUniform4uiv(GLint location, GLsizei count, const GLuint *value);
GD_DEFINE_OGL_METHOD_3(
	void, Uniform4uiv
	, GLint const, location
	, GLsizei const, count
	, const GLuint* const, value
	)

// void glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value);
GD_DEFINE_OGL_METHOD_3(
	void, ClearBufferiv
	, GLenum const, buffer
	, GLint const, drawbuffer
	, const GLint* const, value
	)

// void glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value);
GD_DEFINE_OGL_METHOD_3(
	void, ClearBufferuiv
	, GLenum const, buffer
	, GLint const, drawbuffer
	, const GLuint* const, value
	)

// void glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value);
GD_DEFINE_OGL_METHOD_3(
	void, ClearBufferfv
	, GLenum const, buffer
	, GLint const, drawbuffer
	, const GLfloat* const, value
	)

// void glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
GD_DEFINE_OGL_METHOD_4(
	void, ClearBufferfi
	, GLenum const, buffer
	, GLint const, drawbuffer
	, GLfloat const, depth
	, GLint const, stencil
	)

// GLubyte const* glGetStringi(GLenum name, GLuint index);
GD_DEFINE_OGL_METHOD_2(
	GLubyte const*, GetStringi
	, GLenum const, name
	, GLuint const, index
	)

// void glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
GD_DEFINE_OGL_METHOD_5(
	void, CopyBufferSubData
	, GLenum const, readTarget
	, GLenum const, writeTarget
	, GLintptr const, readOffset
	, GLintptr const, writeOffset
	, GLsizeiptr const, size
	)

// void glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);
GD_DEFINE_OGL_METHOD_4(
	void, GetUniformIndices
	, GLuint const, program
	, GLsizei const, uniformCount
	, const GLchar*const* const, uniformNames
	, GLuint* const, uniformIndices
	)

// void glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_5(
	void, GetActiveUniformsiv
	, GLuint const, program
	, GLsizei const, uniformCount
	, const GLuint* const, uniformIndices
	, GLenum const, pname
	, GLint* const, params
	)

// GLuint glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName);
GD_DEFINE_OGL_METHOD_2(
	GLuint, GetUniformBlockIndex
	, GLuint const, program
	, const GLchar* const, uniformBlockName
	)

// void glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_4(
	void, GetActiveUniformBlockiv
	, GLuint const, program
	, GLuint const, uniformBlockIndex
	, GLenum const, pname
	, GLint* const, params
	)

// void glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
GD_DEFINE_OGL_METHOD_5(
	void, GetActiveUniformBlockName
	, GLuint const, program
	, GLuint const, uniformBlockIndex
	, GLsizei const, bufSize
	, GLsizei* const, length
	, GLchar* const, uniformBlockName
	)

// void glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
GD_DEFINE_OGL_METHOD_3(
	void, UniformBlockBinding
	, GLuint const, program
	, GLuint const, uniformBlockIndex
	, GLuint const, uniformBlockBinding
	)

// void glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
GD_DEFINE_OGL_METHOD_4(
	void, DrawArraysInstanced
	, GLenum const, mode
	, GLint const, first
	, GLsizei const, count
	, GLsizei const, instancecount
	)

// void glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);
GD_DEFINE_OGL_METHOD_5(
	void, DrawElementsInstanced
	, GLenum const, mode
	, GLsizei const, count
	, GLenum const, type
	, const void* const, indices
	, GLsizei const, instancecount
	)

// GLsync glFenceSync(GLenum condition, GLbitfield flags);
GD_DEFINE_OGL_METHOD_2(
	GLsync, FenceSync
	, GLenum const, condition
	, GLbitfield const, flags
	)

// GLboolean glIsSync(GLsync sync);
GD_DEFINE_OGL_METHOD_1(
	GLboolean, IsSync
	, GLsync const, sync
	)

// void glDeleteSync(GLsync sync);
GD_DEFINE_OGL_METHOD_1(
	void, DeleteSync
	, GLsync const, sync
	)

// GLenum glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
GD_DEFINE_OGL_METHOD_3(
	GLenum, ClientWaitSync
	, GLsync const, sync
	, GLbitfield const, flags
	, GLuint64 const, timeout
	)

// void glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
GD_DEFINE_OGL_METHOD_3(
	void, WaitSync
	, GLsync const, sync
	, GLbitfield const, flags
	, GLuint64 const, timeout
	)

// void glGetInteger64v(GLenum pname, GLint64 *data);
GD_DEFINE_OGL_METHOD_2(
	void, GetInteger64v
	, GLenum const, pname
	, GLint64* const, data
	)

// void glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
GD_DEFINE_OGL_METHOD_5(
	void, GetSynciv
	, GLsync const, sync
	, GLenum const, pname
	, GLsizei const, bufSize
	, GLsizei* const, length
	, GLint* const, values
	)

// void glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data);
GD_DEFINE_OGL_METHOD_3(
	void, GetInteger64i_v
	, GLenum const, target
	, GLuint const, index
	, GLint64* const, data
	)

// void glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetBufferParameteri64v
	, GLenum const, target
	, GLenum const, pname
	, GLint64* const, params
	)

// void glGenSamplers(GLsizei count, GLuint *samplers);
GD_DEFINE_OGL_METHOD_2(
	void, GenSamplers
	, GLsizei const, count
	, GLuint* const, samplers
	)

// void glDeleteSamplers(GLsizei count, const GLuint *samplers);
GD_DEFINE_OGL_METHOD_2(
	void, DeleteSamplers
	, GLsizei const, count
	, const GLuint* const, samplers
	)

// GLboolean glIsSampler(GLuint sampler);
GD_DEFINE_OGL_METHOD_1(
	GLboolean, IsSampler
	, GLuint const, sampler
	)

// void glBindSampler(GLuint unit, GLuint sampler);
GD_DEFINE_OGL_METHOD_2(
	void, BindSampler
	, GLuint const, unit
	, GLuint const, sampler
	)

// void glSamplerParameteri(GLuint sampler, GLenum pname, GLint param);
GD_DEFINE_OGL_METHOD_3(
	void, SamplerParameteri
	, GLuint const, sampler
	, GLenum const, pname
	, GLint const, param
	)

// void glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *param);
GD_DEFINE_OGL_METHOD_3(
	void, SamplerParameteriv
	, GLuint const, sampler
	, GLenum const, pname
	, const GLint* const, param
	)

// void glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param);
GD_DEFINE_OGL_METHOD_3(
	void, SamplerParameterf
	, GLuint const, sampler
	, GLenum const, pname
	, GLfloat const, param
	)

// void glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *param);
GD_DEFINE_OGL_METHOD_3(
	void, SamplerParameterfv
	, GLuint const, sampler
	, GLenum const, pname
	, const GLfloat* const, param
	)

// void glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetSamplerParameteriv
	, GLuint const, sampler
	, GLenum const, pname
	, GLint* const, params
	)

// void glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetSamplerParameterfv
	, GLuint const, sampler
	, GLenum const, pname
	, GLfloat* const, params
	)

// void glVertexAttribDivisor(GLuint index, GLuint divisor);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttribDivisor
	, GLuint const, index
	, GLuint const, divisor
	)

// void glBindTransformFeedback(GLenum target, GLuint id);
GD_DEFINE_OGL_METHOD_2(
	void, BindTransformFeedback
	, GLenum const, target
	, GLuint const, id
	)

// void glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids);
GD_DEFINE_OGL_METHOD_2(
	void, DeleteTransformFeedbacks
	, GLsizei const, n
	, const GLuint* const, ids
	)

// void glGenTransformFeedbacks(GLsizei n, GLuint *ids);
GD_DEFINE_OGL_METHOD_2(
	void, GenTransformFeedbacks
	, GLsizei const, n
	, GLuint* const, ids
	)

// GLboolean glIsTransformFeedback(GLuint id);
GD_DEFINE_OGL_METHOD_1(
	GLboolean, IsTransformFeedback
	, GLuint const, id
	)

// void glPauseTransformFeedback(void);
GD_DEFINE_OGL_METHOD_0(
	void, PauseTransformFeedback
	/**** NO ARGUMENTS ****/
	)

// void glResumeTransformFeedback(void);
GD_DEFINE_OGL_METHOD_0(
	void, ResumeTransformFeedback
	/**** NO ARGUMENTS ****/
	)

// void glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
GD_DEFINE_OGL_METHOD_5(
	void, GetProgramBinary
	, GLuint const, program
	, GLsizei const, bufSize
	, GLsizei* const, length
	, GLenum* const, binaryFormat
	, void* const, binary
	)

// void glProgramBinary(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramBinary
	, GLuint const, program
	, GLenum const, binaryFormat
	, const void* const, binary
	, GLsizei const, length
	)

// void glProgramParameteri(GLuint program, GLenum pname, GLint value);
GD_DEFINE_OGL_METHOD_3(
	void, ProgramParameteri
	, GLuint const, program
	, GLenum const, pname
	, GLint const, value
	)

// void glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments);
GD_DEFINE_OGL_METHOD_3(
	void, InvalidateFramebuffer
	, GLenum const, target
	, GLsizei const, numAttachments
	, const GLenum* const, attachments
	)

// void glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
GD_DEFINE_OGL_METHOD_7(
	void, InvalidateSubFramebuffer
	, GLenum const, target
	, GLsizei const, numAttachments
	, const GLenum* const, attachments
	, GLint const, x
	, GLint const, y
	, GLsizei const, width
	, GLsizei const, height
	)

// void glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
GD_DEFINE_OGL_METHOD_5(
	void, TexStorage2D
	, GLenum const, target
	, GLsizei const, levels
	, GLenum const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	)

// void glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
GD_DEFINE_OGL_METHOD_6(
	void, TexStorage3D
	, GLenum const, target
	, GLsizei const, levels
	, GLenum const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	, GLsizei const, depth
	)

// void glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);
GD_DEFINE_OGL_METHOD_5(
	void, GetInternalformativ
	, GLenum const, target
	, GLenum const, internalformat
	, GLenum const, pname
	, GLsizei const, bufSize
	, GLint* const, params
	)

// void glBlendBarrierKHR(void);
GD_DEFINE_OGL_METHOD_0(
	void, BlendBarrierKHR
	/**** NO ARGUMENTS ****/
	)

// void glDebugMessageControlKHR(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
GD_DEFINE_OGL_METHOD_6(
	void, DebugMessageControlKHR
	, GLenum const, source
	, GLenum const, type
	, GLenum const, severity
	, GLsizei const, count
	, const GLuint* const, ids
	, GLboolean const, enabled
	)

// void glDebugMessageInsertKHR(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
GD_DEFINE_OGL_METHOD_6(
	void, DebugMessageInsertKHR
	, GLenum const, source
	, GLenum const, type
	, GLuint const, id
	, GLenum const, severity
	, GLsizei const, length
	, const GLchar* const, buf
	)

// void glDebugMessageCallbackKHR(GLDEBUGPROCKHR callback, const void *userParam);
GD_DEFINE_OGL_METHOD_2(
	void, DebugMessageCallbackKHR
	, GLDEBUGPROCKHR const, callback
	, const void* const, userParam
	)

// GLuint glGetDebugMessageLogKHR(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
GD_DEFINE_OGL_METHOD_8(
	GLuint, GetDebugMessageLogKHR
	, GLuint const, count
	, GLsizei const, bufSize
	, GLenum* const, sources
	, GLenum* const, types
	, GLuint* const, ids
	, GLenum* const, severities
	, GLsizei* const, lengths
	, GLchar* const, messageLog
	)

// void glPushDebugGroupKHR(GLenum source, GLuint id, GLsizei length, const GLchar *message);
GD_DEFINE_OGL_METHOD_4(
	void, PushDebugGroupKHR
	, GLenum const, source
	, GLuint const, id
	, GLsizei const, length
	, const GLchar* const, message
	)

// void glPopDebugGroupKHR(void);
GD_DEFINE_OGL_METHOD_0(
	void, PopDebugGroupKHR
	/**** NO ARGUMENTS ****/
	)

// void glObjectLabelKHR(GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
GD_DEFINE_OGL_METHOD_4(
	void, ObjectLabelKHR
	, GLenum const, identifier
	, GLuint const, name
	, GLsizei const, length
	, const GLchar* const, label
	)

// void glGetObjectLabelKHR(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
GD_DEFINE_OGL_METHOD_5(
	void, GetObjectLabelKHR
	, GLenum const, identifier
	, GLuint const, name
	, GLsizei const, bufSize
	, GLsizei* const, length
	, GLchar* const, label
	)

// void glObjectPtrLabelKHR(const void *ptr, GLsizei length, const GLchar *label);
GD_DEFINE_OGL_METHOD_3(
	void, ObjectPtrLabelKHR
	, const void* const, ptr
	, GLsizei const, length
	, const GLchar* const, label
	)

// void glGetObjectPtrLabelKHR(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
GD_DEFINE_OGL_METHOD_4(
	void, GetObjectPtrLabelKHR
	, const void* const, ptr
	, GLsizei const, bufSize
	, GLsizei* const, length
	, GLchar* const, label
	)

// void glGetPointervKHR(GLenum pname, void **params);
GD_DEFINE_OGL_METHOD_2(
	void, GetPointervKHR
	, GLenum const, pname
	, void** const, params
	)

// void glEGLImageTargetTexture2DOES(GLenum target, GLeglImageOES image);
GD_DEFINE_OGL_METHOD_2(
	void, EGLImageTargetTexture2DOES
	, GLenum const, target
	, GLeglImageOES const, image
	)

// void glEGLImageTargetRenderbufferStorageOES(GLenum target, GLeglImageOES image);
GD_DEFINE_OGL_METHOD_2(
	void, EGLImageTargetRenderbufferStorageOES
	, GLenum const, target
	, GLeglImageOES const, image
	)

// void glGetProgramBinaryOES(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
GD_DEFINE_OGL_METHOD_5(
	void, GetProgramBinaryOES
	, GLuint const, program
	, GLsizei const, bufSize
	, GLsizei* const, length
	, GLenum* const, binaryFormat
	, void* const, binary
	)

// void glProgramBinaryOES(GLuint program, GLenum binaryFormat, const void *binary, GLint length);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramBinaryOES
	, GLuint const, program
	, GLenum const, binaryFormat
	, const void* const, binary
	, GLint const, length
	)

// void glMapBufferOES(GLenum target, GLenum access);
GD_DEFINE_OGL_METHOD_2(
	void, MapBufferOES
	, GLenum const, target
	, GLenum const, access
	)

// GLboolean glUnmapBufferOES(GLenum target);
GD_DEFINE_OGL_METHOD_1(
	GLboolean, UnmapBufferOES
	, GLenum const, target
	)

// void glGetBufferPointervOES(GLenum target, GLenum pname, void **params);
GD_DEFINE_OGL_METHOD_3(
	void, GetBufferPointervOES
	, GLenum const, target
	, GLenum const, pname
	, void** const, params
	)

// void glMinSampleShadingOES(GLfloat value);
GD_DEFINE_OGL_METHOD_1(
	void, MinSampleShadingOES
	, GLfloat const, value
	)

// void glTexImage3DOES(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
GD_DEFINE_OGL_METHOD_10(
	void, TexImage3DOES
	, GLenum const, target
	, GLint const, level
	, GLenum const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	, GLsizei const, depth
	, GLint const, border
	, GLenum const, format
	, GLenum const, type
	, const void* const, pixels
	)

// void glTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
// ***** SKIPPED DUE ARGUMENTS COUNT LIMITATION *****

// void glCopyTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GD_DEFINE_OGL_METHOD_9(
	void, CopyTexSubImage3DOES
	, GLenum const, target
	, GLint const, level
	, GLint const, xoffset
	, GLint const, yoffset
	, GLint const, zoffset
	, GLint const, x
	, GLint const, y
	, GLsizei const, width
	, GLsizei const, height
	)

// void glCompressedTexImage3DOES(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
GD_DEFINE_OGL_METHOD_9(
	void, CompressedTexImage3DOES
	, GLenum const, target
	, GLint const, level
	, GLenum const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	, GLsizei const, depth
	, GLint const, border
	, GLsizei const, imageSize
	, const void* const, data
	)

// void glCompressedTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
// ***** SKIPPED DUE ARGUMENTS COUNT LIMITATION *****

// void glFramebufferTexture3DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
GD_DEFINE_OGL_METHOD_6(
	void, FramebufferTexture3DOES
	, GLenum const, target
	, GLenum const, attachment
	, GLenum const, textarget
	, GLuint const, texture
	, GLint const, level
	, GLint const, zoffset
	)

// void glTexStorage3DMultisampleOES(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
GD_DEFINE_OGL_METHOD_7(
	void, TexStorage3DMultisampleOES
	, GLenum const, target
	, GLsizei const, samples
	, GLenum const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	, GLsizei const, depth
	, GLboolean const, fixedsamplelocations
	)

// void glBindVertexArrayOES(GLuint array);
GD_DEFINE_OGL_METHOD_1(
	void, BindVertexArrayOES
	, GLuint const, array
	)

// void glDeleteVertexArraysOES(GLsizei n, const GLuint *arrays);
GD_DEFINE_OGL_METHOD_2(
	void, DeleteVertexArraysOES
	, GLsizei const, n
	, const GLuint* const, arrays
	)

// void glGenVertexArraysOES(GLsizei n, GLuint *arrays);
GD_DEFINE_OGL_METHOD_2(
	void, GenVertexArraysOES
	, GLsizei const, n
	, GLuint* const, arrays
	)

// GLboolean glIsVertexArrayOES(GLuint array);
GD_DEFINE_OGL_METHOD_1(
	GLboolean, IsVertexArrayOES
	, GLuint const, array
	)

// void glGetPerfMonitorGroupsAMD(GLint *numGroups, GLsizei groupsSize, GLuint *groups);
GD_DEFINE_OGL_METHOD_3(
	void, GetPerfMonitorGroupsAMD
	, GLint* const, numGroups
	, GLsizei const, groupsSize
	, GLuint* const, groups
	)

// void glGetPerfMonitorCountersAMD(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters);
GD_DEFINE_OGL_METHOD_5(
	void, GetPerfMonitorCountersAMD
	, GLuint const, group
	, GLint* const, numCounters
	, GLint* const, maxActiveCounters
	, GLsizei const, counterSize
	, GLuint* const, counters
	)

// void glGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString);
GD_DEFINE_OGL_METHOD_4(
	void, GetPerfMonitorGroupStringAMD
	, GLuint const, group
	, GLsizei const, bufSize
	, GLsizei* const, length
	, GLchar* const, groupString
	)

// void glGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString);
GD_DEFINE_OGL_METHOD_5(
	void, GetPerfMonitorCounterStringAMD
	, GLuint const, group
	, GLuint const, counter
	, GLsizei const, bufSize
	, GLsizei* const, length
	, GLchar* const, counterString
	)

// void glGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, void *data);
GD_DEFINE_OGL_METHOD_4(
	void, GetPerfMonitorCounterInfoAMD
	, GLuint const, group
	, GLuint const, counter
	, GLenum const, pname
	, void* const, data
	)

// void glGenPerfMonitorsAMD(GLsizei n, GLuint *monitors);
GD_DEFINE_OGL_METHOD_2(
	void, GenPerfMonitorsAMD
	, GLsizei const, n
	, GLuint* const, monitors
	)

// void glDeletePerfMonitorsAMD(GLsizei n, GLuint *monitors);
GD_DEFINE_OGL_METHOD_2(
	void, DeletePerfMonitorsAMD
	, GLsizei const, n
	, GLuint* const, monitors
	)

// void glSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList);
GD_DEFINE_OGL_METHOD_5(
	void, SelectPerfMonitorCountersAMD
	, GLuint const, monitor
	, GLboolean const, enable
	, GLuint const, group
	, GLint const, numCounters
	, GLuint* const, counterList
	)

// void glBeginPerfMonitorAMD(GLuint monitor);
GD_DEFINE_OGL_METHOD_1(
	void, BeginPerfMonitorAMD
	, GLuint const, monitor
	)

// void glEndPerfMonitorAMD(GLuint monitor);
GD_DEFINE_OGL_METHOD_1(
	void, EndPerfMonitorAMD
	, GLuint const, monitor
	)

// void glGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten);
GD_DEFINE_OGL_METHOD_5(
	void, GetPerfMonitorCounterDataAMD
	, GLuint const, monitor
	, GLenum const, pname
	, GLsizei const, dataSize
	, GLuint* const, data
	, GLint* const, bytesWritten
	)

// void glBlitFramebufferANGLE(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
GD_DEFINE_OGL_METHOD_10(
	void, BlitFramebufferANGLE
	, GLint const, srcX0
	, GLint const, srcY0
	, GLint const, srcX1
	, GLint const, srcY1
	, GLint const, dstX0
	, GLint const, dstY0
	, GLint const, dstX1
	, GLint const, dstY1
	, GLbitfield const, mask
	, GLenum const, filter
	)

// void glRenderbufferStorageMultisampleANGLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
GD_DEFINE_OGL_METHOD_5(
	void, RenderbufferStorageMultisampleANGLE
	, GLenum const, target
	, GLsizei const, samples
	, GLenum const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	)

// void glDrawArraysInstancedANGLE(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
GD_DEFINE_OGL_METHOD_4(
	void, DrawArraysInstancedANGLE
	, GLenum const, mode
	, GLint const, first
	, GLsizei const, count
	, GLsizei const, primcount
	)

// void glDrawElementsInstancedANGLE(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);
GD_DEFINE_OGL_METHOD_5(
	void, DrawElementsInstancedANGLE
	, GLenum const, mode
	, GLsizei const, count
	, GLenum const, type
	, const void* const, indices
	, GLsizei const, primcount
	)

// void glVertexAttribDivisorANGLE(GLuint index, GLuint divisor);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttribDivisorANGLE
	, GLuint const, index
	, GLuint const, divisor
	)

// void glGetTranslatedShaderSourceANGLE(GLuint shader, GLsizei bufsize, GLsizei *length, GLchar *source);
GD_DEFINE_OGL_METHOD_4(
	void, GetTranslatedShaderSourceANGLE
	, GLuint const, shader
	, GLsizei const, bufsize
	, GLsizei* const, length
	, GLchar* const, source
	)

// void glCopyTextureLevelsAPPLE(GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount);
GD_DEFINE_OGL_METHOD_4(
	void, CopyTextureLevelsAPPLE
	, GLuint const, destinationTexture
	, GLuint const, sourceTexture
	, GLint const, sourceBaseLevel
	, GLsizei const, sourceLevelCount
	)

// void glRenderbufferStorageMultisampleAPPLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
GD_DEFINE_OGL_METHOD_5(
	void, RenderbufferStorageMultisampleAPPLE
	, GLenum const, target
	, GLsizei const, samples
	, GLenum const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	)

// void glResolveMultisampleFramebufferAPPLE(void);
GD_DEFINE_OGL_METHOD_0(
	void, ResolveMultisampleFramebufferAPPLE
	/**** NO ARGUMENTS ****/
	)

// GLsync glFenceSyncAPPLE(GLenum condition, GLbitfield flags);
GD_DEFINE_OGL_METHOD_2(
	GLsync, FenceSyncAPPLE
	, GLenum const, condition
	, GLbitfield const, flags
	)

// GLboolean glIsSyncAPPLE(GLsync sync);
GD_DEFINE_OGL_METHOD_1(
	GLboolean, IsSyncAPPLE
	, GLsync const, sync
	)

// void glDeleteSyncAPPLE(GLsync sync);
GD_DEFINE_OGL_METHOD_1(
	void, DeleteSyncAPPLE
	, GLsync const, sync
	)

// GLenum glClientWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout);
GD_DEFINE_OGL_METHOD_3(
	GLenum, ClientWaitSyncAPPLE
	, GLsync const, sync
	, GLbitfield const, flags
	, GLuint64 const, timeout
	)

// void glWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout);
GD_DEFINE_OGL_METHOD_3(
	void, WaitSyncAPPLE
	, GLsync const, sync
	, GLbitfield const, flags
	, GLuint64 const, timeout
	)

// void glGetInteger64vAPPLE(GLenum pname, GLint64 *params);
GD_DEFINE_OGL_METHOD_2(
	void, GetInteger64vAPPLE
	, GLenum const, pname
	, GLint64* const, params
	)

// void glGetSyncivAPPLE(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
GD_DEFINE_OGL_METHOD_5(
	void, GetSyncivAPPLE
	, GLsync const, sync
	, GLenum const, pname
	, GLsizei const, bufSize
	, GLsizei* const, length
	, GLint* const, values
	)

// void glCopyImageSubDataEXT(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
// ***** SKIPPED DUE ARGUMENTS COUNT LIMITATION *****

// void glLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar *label);
GD_DEFINE_OGL_METHOD_4(
	void, LabelObjectEXT
	, GLenum const, type
	, GLuint const, object
	, GLsizei const, length
	, const GLchar* const, label
	)

// void glGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label);
GD_DEFINE_OGL_METHOD_5(
	void, GetObjectLabelEXT
	, GLenum const, type
	, GLuint const, object
	, GLsizei const, bufSize
	, GLsizei* const, length
	, GLchar* const, label
	)

// void glInsertEventMarkerEXT(GLsizei length, const GLchar *marker);
GD_DEFINE_OGL_METHOD_2(
	void, InsertEventMarkerEXT
	, GLsizei const, length
	, const GLchar* const, marker
	)

// void glPushGroupMarkerEXT(GLsizei length, const GLchar *marker);
GD_DEFINE_OGL_METHOD_2(
	void, PushGroupMarkerEXT
	, GLsizei const, length
	, const GLchar* const, marker
	)

// void glPopGroupMarkerEXT(void);
GD_DEFINE_OGL_METHOD_0(
	void, PopGroupMarkerEXT
	/**** NO ARGUMENTS ****/
	)

// void glDiscardFramebufferEXT(GLenum target, GLsizei numAttachments, const GLenum *attachments);
GD_DEFINE_OGL_METHOD_3(
	void, DiscardFramebufferEXT
	, GLenum const, target
	, GLsizei const, numAttachments
	, const GLenum* const, attachments
	)

// void glGenQueriesEXT(GLsizei n, GLuint *ids);
GD_DEFINE_OGL_METHOD_2(
	void, GenQueriesEXT
	, GLsizei const, n
	, GLuint* const, ids
	)

// void glDeleteQueriesEXT(GLsizei n, const GLuint *ids);
GD_DEFINE_OGL_METHOD_2(
	void, DeleteQueriesEXT
	, GLsizei const, n
	, const GLuint* const, ids
	)

// GLboolean glIsQueryEXT(GLuint id);
GD_DEFINE_OGL_METHOD_1(
	GLboolean, IsQueryEXT
	, GLuint const, id
	)

// void glBeginQueryEXT(GLenum target, GLuint id);
GD_DEFINE_OGL_METHOD_2(
	void, BeginQueryEXT
	, GLenum const, target
	, GLuint const, id
	)

// void glEndQueryEXT(GLenum target);
GD_DEFINE_OGL_METHOD_1(
	void, EndQueryEXT
	, GLenum const, target
	)

// void glQueryCounterEXT(GLuint id, GLenum target);
GD_DEFINE_OGL_METHOD_2(
	void, QueryCounterEXT
	, GLuint const, id
	, GLenum const, target
	)

// void glGetQueryivEXT(GLenum target, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetQueryivEXT
	, GLenum const, target
	, GLenum const, pname
	, GLint* const, params
	)

// void glGetQueryObjectivEXT(GLuint id, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetQueryObjectivEXT
	, GLuint const, id
	, GLenum const, pname
	, GLint* const, params
	)

// void glGetQueryObjectuivEXT(GLuint id, GLenum pname, GLuint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetQueryObjectuivEXT
	, GLuint const, id
	, GLenum const, pname
	, GLuint* const, params
	)

// void glGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64 *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetQueryObjecti64vEXT
	, GLuint const, id
	, GLenum const, pname
	, GLint64* const, params
	)

// void glGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64 *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetQueryObjectui64vEXT
	, GLuint const, id
	, GLenum const, pname
	, GLuint64* const, params
	)

// void glDrawBuffersEXT(GLsizei n, const GLenum *bufs);
GD_DEFINE_OGL_METHOD_2(
	void, DrawBuffersEXT
	, GLsizei const, n
	, const GLenum* const, bufs
	)

// void glEnableiEXT(GLenum target, GLuint index);
GD_DEFINE_OGL_METHOD_2(
	void, EnableiEXT
	, GLenum const, target
	, GLuint const, index
	)

// void glDisableiEXT(GLenum target, GLuint index);
GD_DEFINE_OGL_METHOD_2(
	void, DisableiEXT
	, GLenum const, target
	, GLuint const, index
	)

// void glBlendEquationiEXT(GLuint buf, GLenum mode);
GD_DEFINE_OGL_METHOD_2(
	void, BlendEquationiEXT
	, GLuint const, buf
	, GLenum const, mode
	)

// void glBlendEquationSeparateiEXT(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
GD_DEFINE_OGL_METHOD_3(
	void, BlendEquationSeparateiEXT
	, GLuint const, buf
	, GLenum const, modeRGB
	, GLenum const, modeAlpha
	)

// void glBlendFunciEXT(GLuint buf, GLenum src, GLenum dst);
GD_DEFINE_OGL_METHOD_3(
	void, BlendFunciEXT
	, GLuint const, buf
	, GLenum const, src
	, GLenum const, dst
	)

// void glBlendFuncSeparateiEXT(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
GD_DEFINE_OGL_METHOD_5(
	void, BlendFuncSeparateiEXT
	, GLuint const, buf
	, GLenum const, srcRGB
	, GLenum const, dstRGB
	, GLenum const, srcAlpha
	, GLenum const, dstAlpha
	)

// void glColorMaskiEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
GD_DEFINE_OGL_METHOD_5(
	void, ColorMaskiEXT
	, GLuint const, index
	, GLboolean const, r
	, GLboolean const, g
	, GLboolean const, b
	, GLboolean const, a
	)

// GLboolean glIsEnablediEXT(GLenum target, GLuint index);
GD_DEFINE_OGL_METHOD_2(
	GLboolean, IsEnablediEXT
	, GLenum const, target
	, GLuint const, index
	)

// void glDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount);
GD_DEFINE_OGL_METHOD_4(
	void, DrawArraysInstancedEXT
	, GLenum const, mode
	, GLint const, start
	, GLsizei const, count
	, GLsizei const, primcount
	)

// void glDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);
GD_DEFINE_OGL_METHOD_5(
	void, DrawElementsInstancedEXT
	, GLenum const, mode
	, GLsizei const, count
	, GLenum const, type
	, const void* const, indices
	, GLsizei const, primcount
	)

// void glFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level);
GD_DEFINE_OGL_METHOD_4(
	void, FramebufferTextureEXT
	, GLenum const, target
	, GLenum const, attachment
	, GLuint const, texture
	, GLint const, level
	)

// void glVertexAttribDivisorEXT(GLuint index, GLuint divisor);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttribDivisorEXT
	, GLuint const, index
	, GLuint const, divisor
	)

// void glMapBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
GD_DEFINE_OGL_METHOD_4(
	void, MapBufferRangeEXT
	, GLenum const, target
	, GLintptr const, offset
	, GLsizeiptr const, length
	, GLbitfield const, access
	)

// void glFlushMappedBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length);
GD_DEFINE_OGL_METHOD_3(
	void, FlushMappedBufferRangeEXT
	, GLenum const, target
	, GLintptr const, offset
	, GLsizeiptr const, length
	)

// void glMultiDrawArraysEXT(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
GD_DEFINE_OGL_METHOD_4(
	void, MultiDrawArraysEXT
	, GLenum const, mode
	, const GLint* const, first
	, const GLsizei* const, count
	, GLsizei const, primcount
	)

// void glMultiDrawElementsEXT(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount);
GD_DEFINE_OGL_METHOD_5(
	void, MultiDrawElementsEXT
	, GLenum const, mode
	, const GLsizei* const, count
	, GLenum const, type
	, const void*const* const, indices
	, GLsizei const, primcount
	)

// void glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
GD_DEFINE_OGL_METHOD_5(
	void, RenderbufferStorageMultisampleEXT
	, GLenum const, target
	, GLsizei const, samples
	, GLenum const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	)

// void glFramebufferTexture2DMultisampleEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples);
GD_DEFINE_OGL_METHOD_6(
	void, FramebufferTexture2DMultisampleEXT
	, GLenum const, target
	, GLenum const, attachment
	, GLenum const, textarget
	, GLuint const, texture
	, GLint const, level
	, GLsizei const, samples
	)

// void glReadBufferIndexedEXT(GLenum src, GLint index);
GD_DEFINE_OGL_METHOD_2(
	void, ReadBufferIndexedEXT
	, GLenum const, src
	, GLint const, index
	)

// void glDrawBuffersIndexedEXT(GLint n, const GLenum *location, const GLint *indices);
GD_DEFINE_OGL_METHOD_3(
	void, DrawBuffersIndexedEXT
	, GLint const, n
	, const GLenum* const, location
	, const GLint* const, indices
	)

// void glGetIntegeri_vEXT(GLenum target, GLuint index, GLint *data);
GD_DEFINE_OGL_METHOD_3(
	void, GetIntegeri_vEXT
	, GLenum const, target
	, GLuint const, index
	, GLint* const, data
	)

// void glPrimitiveBoundingBoxEXT(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
GD_DEFINE_OGL_METHOD_8(
	void, PrimitiveBoundingBoxEXT
	, GLfloat const, minX
	, GLfloat const, minY
	, GLfloat const, minZ
	, GLfloat const, minW
	, GLfloat const, maxX
	, GLfloat const, maxY
	, GLfloat const, maxZ
	, GLfloat const, maxW
	)

// GLenum glGetGraphicsResetStatusEXT(void);
GD_DEFINE_OGL_METHOD_0(
	GLenum, GetGraphicsResetStatusEXT
	/**** NO ARGUMENTS ****/
	)

// void glReadnPixelsEXT(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
GD_DEFINE_OGL_METHOD_8(
	void, ReadnPixelsEXT
	, GLint const, x
	, GLint const, y
	, GLsizei const, width
	, GLsizei const, height
	, GLenum const, format
	, GLenum const, type
	, GLsizei const, bufSize
	, void* const, data
	)

// void glGetnUniformfvEXT(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
GD_DEFINE_OGL_METHOD_4(
	void, GetnUniformfvEXT
	, GLuint const, program
	, GLint const, location
	, GLsizei const, bufSize
	, GLfloat* const, params
	)

// void glGetnUniformivEXT(GLuint program, GLint location, GLsizei bufSize, GLint *params);
GD_DEFINE_OGL_METHOD_4(
	void, GetnUniformivEXT
	, GLuint const, program
	, GLint const, location
	, GLsizei const, bufSize
	, GLint* const, params
	)

// void glActiveShaderProgramEXT(GLuint pipeline, GLuint program);
GD_DEFINE_OGL_METHOD_2(
	void, ActiveShaderProgramEXT
	, GLuint const, pipeline
	, GLuint const, program
	)

// void glBindProgramPipelineEXT(GLuint pipeline);
GD_DEFINE_OGL_METHOD_1(
	void, BindProgramPipelineEXT
	, GLuint const, pipeline
	)

// GLuint glCreateShaderProgramvEXT(GLenum type, GLsizei count, const GLchar **strings);
GD_DEFINE_OGL_METHOD_3(
	GLuint, CreateShaderProgramvEXT
	, GLenum const, type
	, GLsizei const, count
	, const GLchar** const, strings
	)

// void glDeleteProgramPipelinesEXT(GLsizei n, const GLuint *pipelines);
GD_DEFINE_OGL_METHOD_2(
	void, DeleteProgramPipelinesEXT
	, GLsizei const, n
	, const GLuint* const, pipelines
	)

// void glGenProgramPipelinesEXT(GLsizei n, GLuint *pipelines);
GD_DEFINE_OGL_METHOD_2(
	void, GenProgramPipelinesEXT
	, GLsizei const, n
	, GLuint* const, pipelines
	)

// void glGetProgramPipelineInfoLogEXT(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
GD_DEFINE_OGL_METHOD_4(
	void, GetProgramPipelineInfoLogEXT
	, GLuint const, pipeline
	, GLsizei const, bufSize
	, GLsizei* const, length
	, GLchar* const, infoLog
	)

// void glGetProgramPipelineivEXT(GLuint pipeline, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetProgramPipelineivEXT
	, GLuint const, pipeline
	, GLenum const, pname
	, GLint* const, params
	)

// GLboolean glIsProgramPipelineEXT(GLuint pipeline);
GD_DEFINE_OGL_METHOD_1(
	GLboolean, IsProgramPipelineEXT
	, GLuint const, pipeline
	)

// void glProgramParameteriEXT(GLuint program, GLenum pname, GLint value);
GD_DEFINE_OGL_METHOD_3(
	void, ProgramParameteriEXT
	, GLuint const, program
	, GLenum const, pname
	, GLint const, value
	)

// void glProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0);
GD_DEFINE_OGL_METHOD_3(
	void, ProgramUniform1fEXT
	, GLuint const, program
	, GLint const, location
	, GLfloat const, v0
	)

// void glProgramUniform1fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramUniform1fvEXT
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, const GLfloat* const, value
	)

// void glProgramUniform1iEXT(GLuint program, GLint location, GLint v0);
GD_DEFINE_OGL_METHOD_3(
	void, ProgramUniform1iEXT
	, GLuint const, program
	, GLint const, location
	, GLint const, v0
	)

// void glProgramUniform1ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramUniform1ivEXT
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, const GLint* const, value
	)

// void glProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramUniform2fEXT
	, GLuint const, program
	, GLint const, location
	, GLfloat const, v0
	, GLfloat const, v1
	)

// void glProgramUniform2fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramUniform2fvEXT
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, const GLfloat* const, value
	)

// void glProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramUniform2iEXT
	, GLuint const, program
	, GLint const, location
	, GLint const, v0
	, GLint const, v1
	)

// void glProgramUniform2ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramUniform2ivEXT
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, const GLint* const, value
	)

// void glProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
GD_DEFINE_OGL_METHOD_5(
	void, ProgramUniform3fEXT
	, GLuint const, program
	, GLint const, location
	, GLfloat const, v0
	, GLfloat const, v1
	, GLfloat const, v2
	)

// void glProgramUniform3fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramUniform3fvEXT
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, const GLfloat* const, value
	)

// void glProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
GD_DEFINE_OGL_METHOD_5(
	void, ProgramUniform3iEXT
	, GLuint const, program
	, GLint const, location
	, GLint const, v0
	, GLint const, v1
	, GLint const, v2
	)

// void glProgramUniform3ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramUniform3ivEXT
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, const GLint* const, value
	)

// void glProgramUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
GD_DEFINE_OGL_METHOD_6(
	void, ProgramUniform4fEXT
	, GLuint const, program
	, GLint const, location
	, GLfloat const, v0
	, GLfloat const, v1
	, GLfloat const, v2
	, GLfloat const, v3
	)

// void glProgramUniform4fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramUniform4fvEXT
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, const GLfloat* const, value
	)

// void glProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
GD_DEFINE_OGL_METHOD_6(
	void, ProgramUniform4iEXT
	, GLuint const, program
	, GLint const, location
	, GLint const, v0
	, GLint const, v1
	, GLint const, v2
	, GLint const, v3
	)

// void glProgramUniform4ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramUniform4ivEXT
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, const GLint* const, value
	)

// void glProgramUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_5(
	void, ProgramUniformMatrix2fvEXT
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glProgramUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_5(
	void, ProgramUniformMatrix3fvEXT
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glProgramUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_5(
	void, ProgramUniformMatrix4fvEXT
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glUseProgramStagesEXT(GLuint pipeline, GLbitfield stages, GLuint program);
GD_DEFINE_OGL_METHOD_3(
	void, UseProgramStagesEXT
	, GLuint const, pipeline
	, GLbitfield const, stages
	, GLuint const, program
	)

// void glValidateProgramPipelineEXT(GLuint pipeline);
GD_DEFINE_OGL_METHOD_1(
	void, ValidateProgramPipelineEXT
	, GLuint const, pipeline
	)

// void glProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0);
GD_DEFINE_OGL_METHOD_3(
	void, ProgramUniform1uiEXT
	, GLuint const, program
	, GLint const, location
	, GLuint const, v0
	)

// void glProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramUniform2uiEXT
	, GLuint const, program
	, GLint const, location
	, GLuint const, v0
	, GLuint const, v1
	)

// void glProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
GD_DEFINE_OGL_METHOD_5(
	void, ProgramUniform3uiEXT
	, GLuint const, program
	, GLint const, location
	, GLuint const, v0
	, GLuint const, v1
	, GLuint const, v2
	)

// void glProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
GD_DEFINE_OGL_METHOD_6(
	void, ProgramUniform4uiEXT
	, GLuint const, program
	, GLint const, location
	, GLuint const, v0
	, GLuint const, v1
	, GLuint const, v2
	, GLuint const, v3
	)

// void glProgramUniform1uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramUniform1uivEXT
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, const GLuint* const, value
	)

// void glProgramUniform2uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramUniform2uivEXT
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, const GLuint* const, value
	)

// void glProgramUniform3uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramUniform3uivEXT
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, const GLuint* const, value
	)

// void glProgramUniform4uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramUniform4uivEXT
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, const GLuint* const, value
	)

// void glProgramUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_5(
	void, ProgramUniformMatrix2x3fvEXT
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glProgramUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_5(
	void, ProgramUniformMatrix3x2fvEXT
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glProgramUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_5(
	void, ProgramUniformMatrix2x4fvEXT
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glProgramUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_5(
	void, ProgramUniformMatrix4x2fvEXT
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glProgramUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_5(
	void, ProgramUniformMatrix3x4fvEXT
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glProgramUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_5(
	void, ProgramUniformMatrix4x3fvEXT
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glPatchParameteriEXT(GLenum pname, GLint value);
GD_DEFINE_OGL_METHOD_2(
	void, PatchParameteriEXT
	, GLenum const, pname
	, GLint const, value
	)

// void glTexParameterIivEXT(GLenum target, GLenum pname, const GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, TexParameterIivEXT
	, GLenum const, target
	, GLenum const, pname
	, const GLint* const, params
	)

// void glTexParameterIuivEXT(GLenum target, GLenum pname, const GLuint *params);
GD_DEFINE_OGL_METHOD_3(
	void, TexParameterIuivEXT
	, GLenum const, target
	, GLenum const, pname
	, const GLuint* const, params
	)

// void glGetTexParameterIivEXT(GLenum target, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetTexParameterIivEXT
	, GLenum const, target
	, GLenum const, pname
	, GLint* const, params
	)

// void glGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetTexParameterIuivEXT
	, GLenum const, target
	, GLenum const, pname
	, GLuint* const, params
	)

// void glSamplerParameterIivEXT(GLuint sampler, GLenum pname, const GLint *param);
GD_DEFINE_OGL_METHOD_3(
	void, SamplerParameterIivEXT
	, GLuint const, sampler
	, GLenum const, pname
	, const GLint* const, param
	)

// void glSamplerParameterIuivEXT(GLuint sampler, GLenum pname, const GLuint *param);
GD_DEFINE_OGL_METHOD_3(
	void, SamplerParameterIuivEXT
	, GLuint const, sampler
	, GLenum const, pname
	, const GLuint* const, param
	)

// void glGetSamplerParameterIivEXT(GLuint sampler, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetSamplerParameterIivEXT
	, GLuint const, sampler
	, GLenum const, pname
	, GLint* const, params
	)

// void glGetSamplerParameterIuivEXT(GLuint sampler, GLenum pname, GLuint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetSamplerParameterIuivEXT
	, GLuint const, sampler
	, GLenum const, pname
	, GLuint* const, params
	)

// void glTexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer);
GD_DEFINE_OGL_METHOD_3(
	void, TexBufferEXT
	, GLenum const, target
	, GLenum const, internalformat
	, GLuint const, buffer
	)

// void glTexBufferRangeEXT(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
GD_DEFINE_OGL_METHOD_5(
	void, TexBufferRangeEXT
	, GLenum const, target
	, GLenum const, internalformat
	, GLuint const, buffer
	, GLintptr const, offset
	, GLsizeiptr const, size
	)

// void glTexStorage1DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
GD_DEFINE_OGL_METHOD_4(
	void, TexStorage1DEXT
	, GLenum const, target
	, GLsizei const, levels
	, GLenum const, internalformat
	, GLsizei const, width
	)

// void glTexStorage2DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
GD_DEFINE_OGL_METHOD_5(
	void, TexStorage2DEXT
	, GLenum const, target
	, GLsizei const, levels
	, GLenum const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	)

// void glTexStorage3DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
GD_DEFINE_OGL_METHOD_6(
	void, TexStorage3DEXT
	, GLenum const, target
	, GLsizei const, levels
	, GLenum const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	, GLsizei const, depth
	)

// void glTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
GD_DEFINE_OGL_METHOD_5(
	void, TextureStorage1DEXT
	, GLuint const, texture
	, GLenum const, target
	, GLsizei const, levels
	, GLenum const, internalformat
	, GLsizei const, width
	)

// void glTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
GD_DEFINE_OGL_METHOD_6(
	void, TextureStorage2DEXT
	, GLuint const, texture
	, GLenum const, target
	, GLsizei const, levels
	, GLenum const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	)

// void glTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
GD_DEFINE_OGL_METHOD_7(
	void, TextureStorage3DEXT
	, GLuint const, texture
	, GLenum const, target
	, GLsizei const, levels
	, GLenum const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	, GLsizei const, depth
	)

// void glTextureViewEXT(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
GD_DEFINE_OGL_METHOD_8(
	void, TextureViewEXT
	, GLuint const, texture
	, GLenum const, target
	, GLuint const, origtexture
	, GLenum const, internalformat
	, GLuint const, minlevel
	, GLuint const, numlevels
	, GLuint const, minlayer
	, GLuint const, numlayers
	)

// void glRenderbufferStorageMultisampleIMG(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
GD_DEFINE_OGL_METHOD_5(
	void, RenderbufferStorageMultisampleIMG
	, GLenum const, target
	, GLsizei const, samples
	, GLenum const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	)

// void glFramebufferTexture2DMultisampleIMG(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples);
GD_DEFINE_OGL_METHOD_6(
	void, FramebufferTexture2DMultisampleIMG
	, GLenum const, target
	, GLenum const, attachment
	, GLenum const, textarget
	, GLuint const, texture
	, GLint const, level
	, GLsizei const, samples
	)

// void glBeginPerfQueryINTEL(GLuint queryHandle);
GD_DEFINE_OGL_METHOD_1(
	void, BeginPerfQueryINTEL
	, GLuint const, queryHandle
	)

// void glCreatePerfQueryINTEL(GLuint queryId, GLuint *queryHandle);
GD_DEFINE_OGL_METHOD_2(
	void, CreatePerfQueryINTEL
	, GLuint const, queryId
	, GLuint* const, queryHandle
	)

// void glDeletePerfQueryINTEL(GLuint queryHandle);
GD_DEFINE_OGL_METHOD_1(
	void, DeletePerfQueryINTEL
	, GLuint const, queryHandle
	)

// void glEndPerfQueryINTEL(GLuint queryHandle);
GD_DEFINE_OGL_METHOD_1(
	void, EndPerfQueryINTEL
	, GLuint const, queryHandle
	)

// void glGetFirstPerfQueryIdINTEL(GLuint *queryId);
GD_DEFINE_OGL_METHOD_1(
	void, GetFirstPerfQueryIdINTEL
	, GLuint* const, queryId
	)

// void glGetNextPerfQueryIdINTEL(GLuint queryId, GLuint *nextQueryId);
GD_DEFINE_OGL_METHOD_2(
	void, GetNextPerfQueryIdINTEL
	, GLuint const, queryId
	, GLuint* const, nextQueryId
	)

// void glGetPerfCounterInfoINTEL(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue);
// ***** SKIPPED DUE ARGUMENTS COUNT LIMITATION *****

// void glGetPerfQueryDataINTEL(GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid *data, GLuint *bytesWritten);
GD_DEFINE_OGL_METHOD_5(
	void, GetPerfQueryDataINTEL
	, GLuint const, queryHandle
	, GLuint const, flags
	, GLsizei const, dataSize
	, GLvoid* const, data
	, GLuint* const, bytesWritten
	)

// void glGetPerfQueryIdByNameINTEL(GLchar *queryName, GLuint *queryId);
GD_DEFINE_OGL_METHOD_2(
	void, GetPerfQueryIdByNameINTEL
	, GLchar* const, queryName
	, GLuint* const, queryId
	)

// void glGetPerfQueryInfoINTEL(GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask);
GD_DEFINE_OGL_METHOD_7(
	void, GetPerfQueryInfoINTEL
	, GLuint const, queryId
	, GLuint const, queryNameLength
	, GLchar* const, queryName
	, GLuint* const, dataSize
	, GLuint* const, noCounters
	, GLuint* const, noInstances
	, GLuint* const, capsMask
	)

// void glBlendParameteriNV(GLenum pname, GLint value);
GD_DEFINE_OGL_METHOD_2(
	void, BlendParameteriNV
	, GLenum const, pname
	, GLint const, value
	)

// void glBlendBarrierNV(void);
GD_DEFINE_OGL_METHOD_0(
	void, BlendBarrierNV
	/**** NO ARGUMENTS ****/
	)

// void glCopyBufferSubDataNV(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
GD_DEFINE_OGL_METHOD_5(
	void, CopyBufferSubDataNV
	, GLenum const, readTarget
	, GLenum const, writeTarget
	, GLintptr const, readOffset
	, GLintptr const, writeOffset
	, GLsizeiptr const, size
	)

// void glCoverageMaskNV(GLboolean mask);
GD_DEFINE_OGL_METHOD_1(
	void, CoverageMaskNV
	, GLboolean const, mask
	)

// void glCoverageOperationNV(GLenum operation);
GD_DEFINE_OGL_METHOD_1(
	void, CoverageOperationNV
	, GLenum const, operation
	)

// void glDrawBuffersNV(GLsizei n, const GLenum *bufs);
GD_DEFINE_OGL_METHOD_2(
	void, DrawBuffersNV
	, GLsizei const, n
	, const GLenum* const, bufs
	)

// void glDrawArraysInstancedNV(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
GD_DEFINE_OGL_METHOD_4(
	void, DrawArraysInstancedNV
	, GLenum const, mode
	, GLint const, first
	, GLsizei const, count
	, GLsizei const, primcount
	)

// void glDrawElementsInstancedNV(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);
GD_DEFINE_OGL_METHOD_5(
	void, DrawElementsInstancedNV
	, GLenum const, mode
	, GLsizei const, count
	, GLenum const, type
	, const void* const, indices
	, GLsizei const, primcount
	)

// void glDeleteFencesNV(GLsizei n, const GLuint *fences);
GD_DEFINE_OGL_METHOD_2(
	void, DeleteFencesNV
	, GLsizei const, n
	, const GLuint* const, fences
	)

// void glGenFencesNV(GLsizei n, GLuint *fences);
GD_DEFINE_OGL_METHOD_2(
	void, GenFencesNV
	, GLsizei const, n
	, GLuint* const, fences
	)

// GLboolean glIsFenceNV(GLuint fence);
GD_DEFINE_OGL_METHOD_1(
	GLboolean, IsFenceNV
	, GLuint const, fence
	)

// GLboolean glTestFenceNV(GLuint fence);
GD_DEFINE_OGL_METHOD_1(
	GLboolean, TestFenceNV
	, GLuint const, fence
	)

// void glGetFenceivNV(GLuint fence, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetFenceivNV
	, GLuint const, fence
	, GLenum const, pname
	, GLint* const, params
	)

// void glFinishFenceNV(GLuint fence);
GD_DEFINE_OGL_METHOD_1(
	void, FinishFenceNV
	, GLuint const, fence
	)

// void glSetFenceNV(GLuint fence, GLenum condition);
GD_DEFINE_OGL_METHOD_2(
	void, SetFenceNV
	, GLuint const, fence
	, GLenum const, condition
	)

// void glBlitFramebufferNV(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
GD_DEFINE_OGL_METHOD_10(
	void, BlitFramebufferNV
	, GLint const, srcX0
	, GLint const, srcY0
	, GLint const, srcX1
	, GLint const, srcY1
	, GLint const, dstX0
	, GLint const, dstY0
	, GLint const, dstX1
	, GLint const, dstY1
	, GLbitfield const, mask
	, GLenum const, filter
	)

// void glRenderbufferStorageMultisampleNV(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
GD_DEFINE_OGL_METHOD_5(
	void, RenderbufferStorageMultisampleNV
	, GLenum const, target
	, GLsizei const, samples
	, GLenum const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	)

// void glVertexAttribDivisorNV(GLuint index, GLuint divisor);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttribDivisorNV
	, GLuint const, index
	, GLuint const, divisor
	)

// void glUniformMatrix2x3fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_4(
	void, UniformMatrix2x3fvNV
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glUniformMatrix3x2fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_4(
	void, UniformMatrix3x2fvNV
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glUniformMatrix2x4fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_4(
	void, UniformMatrix2x4fvNV
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glUniformMatrix4x2fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_4(
	void, UniformMatrix4x2fvNV
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glUniformMatrix3x4fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_4(
	void, UniformMatrix3x4fvNV
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glUniformMatrix4x3fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_4(
	void, UniformMatrix4x3fvNV
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glReadBufferNV(GLenum mode);
GD_DEFINE_OGL_METHOD_1(
	void, ReadBufferNV
	, GLenum const, mode
	)

// void glAlphaFuncQCOM(GLenum func, GLclampf ref);
GD_DEFINE_OGL_METHOD_2(
	void, AlphaFuncQCOM
	, GLenum const, func
	, GLclampf const, ref
	)

// void glGetDriverControlsQCOM(GLint *num, GLsizei size, GLuint *driverControls);
GD_DEFINE_OGL_METHOD_3(
	void, GetDriverControlsQCOM
	, GLint* const, num
	, GLsizei const, size
	, GLuint* const, driverControls
	)

// void glGetDriverControlStringQCOM(GLuint driverControl, GLsizei bufSize, GLsizei *length, GLchar *driverControlString);
GD_DEFINE_OGL_METHOD_4(
	void, GetDriverControlStringQCOM
	, GLuint const, driverControl
	, GLsizei const, bufSize
	, GLsizei* const, length
	, GLchar* const, driverControlString
	)

// void glEnableDriverControlQCOM(GLuint driverControl);
GD_DEFINE_OGL_METHOD_1(
	void, EnableDriverControlQCOM
	, GLuint const, driverControl
	)

// void glDisableDriverControlQCOM(GLuint driverControl);
GD_DEFINE_OGL_METHOD_1(
	void, DisableDriverControlQCOM
	, GLuint const, driverControl
	)

// void glExtGetTexturesQCOM(GLuint *textures, GLint maxTextures, GLint *numTextures);
GD_DEFINE_OGL_METHOD_3(
	void, ExtGetTexturesQCOM
	, GLuint* const, textures
	, GLint const, maxTextures
	, GLint* const, numTextures
	)

// void glExtGetBuffersQCOM(GLuint *buffers, GLint maxBuffers, GLint *numBuffers);
GD_DEFINE_OGL_METHOD_3(
	void, ExtGetBuffersQCOM
	, GLuint* const, buffers
	, GLint const, maxBuffers
	, GLint* const, numBuffers
	)

// void glExtGetRenderbuffersQCOM(GLuint *renderbuffers, GLint maxRenderbuffers, GLint *numRenderbuffers);
GD_DEFINE_OGL_METHOD_3(
	void, ExtGetRenderbuffersQCOM
	, GLuint* const, renderbuffers
	, GLint const, maxRenderbuffers
	, GLint* const, numRenderbuffers
	)

// void glExtGetFramebuffersQCOM(GLuint *framebuffers, GLint maxFramebuffers, GLint *numFramebuffers);
GD_DEFINE_OGL_METHOD_3(
	void, ExtGetFramebuffersQCOM
	, GLuint* const, framebuffers
	, GLint const, maxFramebuffers
	, GLint* const, numFramebuffers
	)

// void glExtGetTexLevelParameterivQCOM(GLuint texture, GLenum face, GLint level, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_5(
	void, ExtGetTexLevelParameterivQCOM
	, GLuint const, texture
	, GLenum const, face
	, GLint const, level
	, GLenum const, pname
	, GLint* const, params
	)

// void glExtTexObjectStateOverrideiQCOM(GLenum target, GLenum pname, GLint param);
GD_DEFINE_OGL_METHOD_3(
	void, ExtTexObjectStateOverrideiQCOM
	, GLenum const, target
	, GLenum const, pname
	, GLint const, param
	)

// void glExtGetTexSubImageQCOM(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void *texels);
// ***** SKIPPED DUE ARGUMENTS COUNT LIMITATION *****

// void glExtGetBufferPointervQCOM(GLenum target, void **params);
GD_DEFINE_OGL_METHOD_2(
	void, ExtGetBufferPointervQCOM
	, GLenum const, target
	, void** const, params
	)

// void glExtGetShadersQCOM(GLuint *shaders, GLint maxShaders, GLint *numShaders);
GD_DEFINE_OGL_METHOD_3(
	void, ExtGetShadersQCOM
	, GLuint* const, shaders
	, GLint const, maxShaders
	, GLint* const, numShaders
	)

// void glExtGetProgramsQCOM(GLuint *programs, GLint maxPrograms, GLint *numPrograms);
GD_DEFINE_OGL_METHOD_3(
	void, ExtGetProgramsQCOM
	, GLuint* const, programs
	, GLint const, maxPrograms
	, GLint* const, numPrograms
	)

// GLboolean glExtIsProgramBinaryQCOM(GLuint program);
GD_DEFINE_OGL_METHOD_1(
	GLboolean, ExtIsProgramBinaryQCOM
	, GLuint const, program
	)

// void glExtGetProgramBinarySourceQCOM(GLuint program, GLenum shadertype, GLchar *source, GLint *length);
GD_DEFINE_OGL_METHOD_4(
	void, ExtGetProgramBinarySourceQCOM
	, GLuint const, program
	, GLenum const, shadertype
	, GLchar* const, source
	, GLint* const, length
	)

// void glStartTilingQCOM(GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask);
GD_DEFINE_OGL_METHOD_5(
	void, StartTilingQCOM
	, GLuint const, x
	, GLuint const, y
	, GLuint const, width
	, GLuint const, height
	, GLbitfield const, preserveMask
	)

// void glEndTilingQCOM(GLbitfield preserveMask);
GD_DEFINE_OGL_METHOD_1(
	void, EndTilingQCOM
	, GLbitfield const, preserveMask
	)
#else	// if (defined(GD_HRI_OGL_ES))

// void glCullFace(GLenum mode);
GD_DEFINE_OGL_METHOD_1(
	void, CullFace
	, GLenum const, mode
	)

// void glFrontFace(GLenum mode);
GD_DEFINE_OGL_METHOD_1(
	void, FrontFace
	, GLenum const, mode
	)

// void glHint(GLenum target, GLenum mode);
GD_DEFINE_OGL_METHOD_2(
	void, Hint
	, GLenum const, target
	, GLenum const, mode
	)

// void glLineWidth(GLfloat width);
GD_DEFINE_OGL_METHOD_1(
	void, LineWidth
	, GLfloat const, width
	)

// void glPointSize(GLfloat size);
GD_DEFINE_OGL_METHOD_1(
	void, PointSize
	, GLfloat const, size
	)

// void glPolygonMode(GLenum face, GLenum mode);
GD_DEFINE_OGL_METHOD_2(
	void, PolygonMode
	, GLenum const, face
	, GLenum const, mode
	)

// void glScissor(GLint x, GLint y, GLsizei width, GLsizei height);
GD_DEFINE_OGL_METHOD_4(
	void, Scissor
	, GLint const, x
	, GLint const, y
	, GLsizei const, width
	, GLsizei const, height
	)

// void glTexParameterf(GLenum target, GLenum pname, GLfloat param);
GD_DEFINE_OGL_METHOD_3(
	void, TexParameterf
	, GLenum const, target
	, GLenum const, pname
	, GLfloat const, param
	)

// void glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params);
GD_DEFINE_OGL_METHOD_3(
	void, TexParameterfv
	, GLenum const, target
	, GLenum const, pname
	, const GLfloat* const, params
	)

// void glTexParameteri(GLenum target, GLenum pname, GLint param);
GD_DEFINE_OGL_METHOD_3(
	void, TexParameteri
	, GLenum const, target
	, GLenum const, pname
	, GLint const, param
	)

// void glTexParameteriv(GLenum target, GLenum pname, const GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, TexParameteriv
	, GLenum const, target
	, GLenum const, pname
	, const GLint* const, params
	)

// void glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
GD_DEFINE_OGL_METHOD_8(
	void, TexImage1D
	, GLenum const, target
	, GLint const, level
	, GLint const, internalformat
	, GLsizei const, width
	, GLint const, border
	, GLenum const, format
	, GLenum const, type
	, const GLvoid* const, pixels
	)

// void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
GD_DEFINE_OGL_METHOD_9(
	void, TexImage2D
	, GLenum const, target
	, GLint const, level
	, GLint const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	, GLint const, border
	, GLenum const, format
	, GLenum const, type
	, const GLvoid* const, pixels
	)

// void glDrawBuffer(GLenum mode);
GD_DEFINE_OGL_METHOD_1(
	void, DrawBuffer
	, GLenum const, mode
	)

// void glClear(GLbitfield mask);
GD_DEFINE_OGL_METHOD_1(
	void, Clear
	, GLbitfield const, mask
	)

// void glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
GD_DEFINE_OGL_METHOD_4(
	void, ClearColor
	, GLfloat const, red
	, GLfloat const, green
	, GLfloat const, blue
	, GLfloat const, alpha
	)

// void glClearStencil(GLint s);
GD_DEFINE_OGL_METHOD_1(
	void, ClearStencil
	, GLint const, s
	)

// void glClearDepth(GLdouble depth);
GD_DEFINE_OGL_METHOD_1(
	void, ClearDepth
	, GLdouble const, depth
	)

// void glStencilMask(GLuint mask);
GD_DEFINE_OGL_METHOD_1(
	void, StencilMask
	, GLuint const, mask
	)

// void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
GD_DEFINE_OGL_METHOD_4(
	void, ColorMask
	, GLboolean const, red
	, GLboolean const, green
	, GLboolean const, blue
	, GLboolean const, alpha
	)

// void glDepthMask(GLboolean flag);
GD_DEFINE_OGL_METHOD_1(
	void, DepthMask
	, GLboolean const, flag
	)

// void glDisable(GLenum cap);
GD_DEFINE_OGL_METHOD_1(
	void, Disable
	, GLenum const, cap
	)

// void glEnable(GLenum cap);
GD_DEFINE_OGL_METHOD_1(
	void, Enable
	, GLenum const, cap
	)

// void glFinish(void);
GD_DEFINE_OGL_METHOD_0(
	void, Finish
	/**** NO ARGUMENTS ****/
	)

// void glFlush(void);
GD_DEFINE_OGL_METHOD_0(
	void, Flush
	/**** NO ARGUMENTS ****/
	)

// void glBlendFunc(GLenum sfactor, GLenum dfactor);
GD_DEFINE_OGL_METHOD_2(
	void, BlendFunc
	, GLenum const, sfactor
	, GLenum const, dfactor
	)

// void glLogicOp(GLenum opcode);
GD_DEFINE_OGL_METHOD_1(
	void, LogicOp
	, GLenum const, opcode
	)

// void glStencilFunc(GLenum func, GLint ref, GLuint mask);
GD_DEFINE_OGL_METHOD_3(
	void, StencilFunc
	, GLenum const, func
	, GLint const, ref
	, GLuint const, mask
	)

// void glStencilOp(GLenum fail, GLenum zfail, GLenum zpass);
GD_DEFINE_OGL_METHOD_3(
	void, StencilOp
	, GLenum const, fail
	, GLenum const, zfail
	, GLenum const, zpass
	)

// void glDepthFunc(GLenum func);
GD_DEFINE_OGL_METHOD_1(
	void, DepthFunc
	, GLenum const, func
	)

// void glPixelStoref(GLenum pname, GLfloat param);
GD_DEFINE_OGL_METHOD_2(
	void, PixelStoref
	, GLenum const, pname
	, GLfloat const, param
	)

// void glPixelStorei(GLenum pname, GLint param);
GD_DEFINE_OGL_METHOD_2(
	void, PixelStorei
	, GLenum const, pname
	, GLint const, param
	)

// void glReadBuffer(GLenum mode);
GD_DEFINE_OGL_METHOD_1(
	void, ReadBuffer
	, GLenum const, mode
	)

// void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);
GD_DEFINE_OGL_METHOD_7(
	void, ReadPixels
	, GLint const, x
	, GLint const, y
	, GLsizei const, width
	, GLsizei const, height
	, GLenum const, format
	, GLenum const, type
	, GLvoid* const, pixels
	)

// void glGetBooleanv(GLenum pname, GLboolean *params);
GD_DEFINE_OGL_METHOD_2(
	void, GetBooleanv
	, GLenum const, pname
	, GLboolean* const, params
	)

// void glGetDoublev(GLenum pname, GLdouble *params);
GD_DEFINE_OGL_METHOD_2(
	void, GetDoublev
	, GLenum const, pname
	, GLdouble* const, params
	)

// GLenum glGetError(void);
GD_DEFINE_OGL_METHOD_0(
	GLenum, GetError
	/**** NO ARGUMENTS ****/
	)

// void glGetFloatv(GLenum pname, GLfloat *params);
GD_DEFINE_OGL_METHOD_2(
	void, GetFloatv
	, GLenum const, pname
	, GLfloat* const, params
	)

// void glGetIntegerv(GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_2(
	void, GetIntegerv
	, GLenum const, pname
	, GLint* const, params
	)

// GLubyte const* glGetString(GLenum name);
GD_DEFINE_OGL_METHOD_1(
	GLubyte const*, GetString
	, GLenum const, name
	)

// void glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
GD_DEFINE_OGL_METHOD_5(
	void, GetTexImage
	, GLenum const, target
	, GLint const, level
	, GLenum const, format
	, GLenum const, type
	, GLvoid* const, pixels
	)

// void glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetTexParameterfv
	, GLenum const, target
	, GLenum const, pname
	, GLfloat* const, params
	)

// void glGetTexParameteriv(GLenum target, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetTexParameteriv
	, GLenum const, target
	, GLenum const, pname
	, GLint* const, params
	)

// void glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params);
GD_DEFINE_OGL_METHOD_4(
	void, GetTexLevelParameterfv
	, GLenum const, target
	, GLint const, level
	, GLenum const, pname
	, GLfloat* const, params
	)

// void glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_4(
	void, GetTexLevelParameteriv
	, GLenum const, target
	, GLint const, level
	, GLenum const, pname
	, GLint* const, params
	)

// GLboolean glIsEnabled(GLenum cap);
GD_DEFINE_OGL_METHOD_1(
	GLboolean, IsEnabled
	, GLenum const, cap
	)

// void glDepthRange(GLdouble near, GLdouble far);
GD_DEFINE_OGL_METHOD_2(
	void, DepthRange
	, GLdouble const, near
	, GLdouble const, far
	)

// void glViewport(GLint x, GLint y, GLsizei width, GLsizei height);
GD_DEFINE_OGL_METHOD_4(
	void, Viewport
	, GLint const, x
	, GLint const, y
	, GLsizei const, width
	, GLsizei const, height
	)

// void glDrawArrays(GLenum mode, GLint first, GLsizei count);
GD_DEFINE_OGL_METHOD_3(
	void, DrawArrays
	, GLenum const, mode
	, GLint const, first
	, GLsizei const, count
	)

// void glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
GD_DEFINE_OGL_METHOD_4(
	void, DrawElements
	, GLenum const, mode
	, GLsizei const, count
	, GLenum const, type
	, const GLvoid* const, indices
	)

// void glGetPointerv(GLenum pname, GLvoid* *params);
GD_DEFINE_OGL_METHOD_2(
	void, GetPointerv
	, GLenum const, pname
	, GLvoid** const, params
	)

// void glPolygonOffset(GLfloat factor, GLfloat units);
GD_DEFINE_OGL_METHOD_2(
	void, PolygonOffset
	, GLfloat const, factor
	, GLfloat const, units
	)

// void glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
GD_DEFINE_OGL_METHOD_7(
	void, CopyTexImage1D
	, GLenum const, target
	, GLint const, level
	, GLenum const, internalformat
	, GLint const, x
	, GLint const, y
	, GLsizei const, width
	, GLint const, border
	)

// void glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
GD_DEFINE_OGL_METHOD_8(
	void, CopyTexImage2D
	, GLenum const, target
	, GLint const, level
	, GLenum const, internalformat
	, GLint const, x
	, GLint const, y
	, GLsizei const, width
	, GLsizei const, height
	, GLint const, border
	)

// void glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
GD_DEFINE_OGL_METHOD_6(
	void, CopyTexSubImage1D
	, GLenum const, target
	, GLint const, level
	, GLint const, xoffset
	, GLint const, x
	, GLint const, y
	, GLsizei const, width
	)

// void glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GD_DEFINE_OGL_METHOD_8(
	void, CopyTexSubImage2D
	, GLenum const, target
	, GLint const, level
	, GLint const, xoffset
	, GLint const, yoffset
	, GLint const, x
	, GLint const, y
	, GLsizei const, width
	, GLsizei const, height
	)

// void glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
GD_DEFINE_OGL_METHOD_7(
	void, TexSubImage1D
	, GLenum const, target
	, GLint const, level
	, GLint const, xoffset
	, GLsizei const, width
	, GLenum const, format
	, GLenum const, type
	, const GLvoid* const, pixels
	)

// void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
GD_DEFINE_OGL_METHOD_9(
	void, TexSubImage2D
	, GLenum const, target
	, GLint const, level
	, GLint const, xoffset
	, GLint const, yoffset
	, GLsizei const, width
	, GLsizei const, height
	, GLenum const, format
	, GLenum const, type
	, const GLvoid* const, pixels
	)

// void glBindTexture(GLenum target, GLuint texture);
GD_DEFINE_OGL_METHOD_2(
	void, BindTexture
	, GLenum const, target
	, GLuint const, texture
	)

// void glDeleteTextures(GLsizei n, const GLuint *textures);
GD_DEFINE_OGL_METHOD_2(
	void, DeleteTextures
	, GLsizei const, n
	, const GLuint* const, textures
	)

// void glGenTextures(GLsizei n, GLuint *textures);
GD_DEFINE_OGL_METHOD_2(
	void, GenTextures
	, GLsizei const, n
	, GLuint* const, textures
	)

// GLboolean glIsTexture(GLuint texture);
GD_DEFINE_OGL_METHOD_1(
	GLboolean, IsTexture
	, GLuint const, texture
	)

// void glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
GD_DEFINE_OGL_METHOD_4(
	void, BlendColor
	, GLfloat const, red
	, GLfloat const, green
	, GLfloat const, blue
	, GLfloat const, alpha
	)

// void glBlendEquation(GLenum mode);
GD_DEFINE_OGL_METHOD_1(
	void, BlendEquation
	, GLenum const, mode
	)

// void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
GD_DEFINE_OGL_METHOD_6(
	void, DrawRangeElements
	, GLenum const, mode
	, GLuint const, start
	, GLuint const, end
	, GLsizei const, count
	, GLenum const, type
	, const GLvoid* const, indices
	)

// void glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
GD_DEFINE_OGL_METHOD_10(
	void, TexImage3D
	, GLenum const, target
	, GLint const, level
	, GLint const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	, GLsizei const, depth
	, GLint const, border
	, GLenum const, format
	, GLenum const, type
	, const GLvoid* const, pixels
	)

// void glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
// ***** SKIPPED DUE ARGUMENTS COUNT LIMITATION *****

// void glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GD_DEFINE_OGL_METHOD_9(
	void, CopyTexSubImage3D
	, GLenum const, target
	, GLint const, level
	, GLint const, xoffset
	, GLint const, yoffset
	, GLint const, zoffset
	, GLint const, x
	, GLint const, y
	, GLsizei const, width
	, GLsizei const, height
	)

// void glActiveTexture(GLenum texture);
GD_DEFINE_OGL_METHOD_1(
	void, ActiveTexture
	, GLenum const, texture
	)

// void glSampleCoverage(GLfloat value, GLboolean invert);
GD_DEFINE_OGL_METHOD_2(
	void, SampleCoverage
	, GLfloat const, value
	, GLboolean const, invert
	)

// void glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
GD_DEFINE_OGL_METHOD_9(
	void, CompressedTexImage3D
	, GLenum const, target
	, GLint const, level
	, GLenum const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	, GLsizei const, depth
	, GLint const, border
	, GLsizei const, imageSize
	, const GLvoid* const, data
	)

// void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
GD_DEFINE_OGL_METHOD_8(
	void, CompressedTexImage2D
	, GLenum const, target
	, GLint const, level
	, GLenum const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	, GLint const, border
	, GLsizei const, imageSize
	, const GLvoid* const, data
	)

// void glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
GD_DEFINE_OGL_METHOD_7(
	void, CompressedTexImage1D
	, GLenum const, target
	, GLint const, level
	, GLenum const, internalformat
	, GLsizei const, width
	, GLint const, border
	, GLsizei const, imageSize
	, const GLvoid* const, data
	)

// void glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
// ***** SKIPPED DUE ARGUMENTS COUNT LIMITATION *****

// void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
GD_DEFINE_OGL_METHOD_9(
	void, CompressedTexSubImage2D
	, GLenum const, target
	, GLint const, level
	, GLint const, xoffset
	, GLint const, yoffset
	, GLsizei const, width
	, GLsizei const, height
	, GLenum const, format
	, GLsizei const, imageSize
	, const GLvoid* const, data
	)

// void glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
GD_DEFINE_OGL_METHOD_7(
	void, CompressedTexSubImage1D
	, GLenum const, target
	, GLint const, level
	, GLint const, xoffset
	, GLsizei const, width
	, GLenum const, format
	, GLsizei const, imageSize
	, const GLvoid* const, data
	)

// void glGetCompressedTexImage(GLenum target, GLint level, GLvoid *img);
GD_DEFINE_OGL_METHOD_3(
	void, GetCompressedTexImage
	, GLenum const, target
	, GLint const, level
	, GLvoid* const, img
	)

// void glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
GD_DEFINE_OGL_METHOD_4(
	void, BlendFuncSeparate
	, GLenum const, sfactorRGB
	, GLenum const, dfactorRGB
	, GLenum const, sfactorAlpha
	, GLenum const, dfactorAlpha
	)

// void glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
GD_DEFINE_OGL_METHOD_4(
	void, MultiDrawArrays
	, GLenum const, mode
	, const GLint* const, first
	, const GLsizei* const, count
	, GLsizei const, drawcount
	)

// void glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const GLvoid* const *indices, GLsizei drawcount);
GD_DEFINE_OGL_METHOD_5(
	void, MultiDrawElements
	, GLenum const, mode
	, const GLsizei* const, count
	, GLenum const, type
	, const GLvoid* const* const, indices
	, GLsizei const, drawcount
	)

// void glPointParameterf(GLenum pname, GLfloat param);
GD_DEFINE_OGL_METHOD_2(
	void, PointParameterf
	, GLenum const, pname
	, GLfloat const, param
	)

// void glPointParameterfv(GLenum pname, const GLfloat *params);
GD_DEFINE_OGL_METHOD_2(
	void, PointParameterfv
	, GLenum const, pname
	, const GLfloat* const, params
	)

// void glPointParameteri(GLenum pname, GLint param);
GD_DEFINE_OGL_METHOD_2(
	void, PointParameteri
	, GLenum const, pname
	, GLint const, param
	)

// void glPointParameteriv(GLenum pname, const GLint *params);
GD_DEFINE_OGL_METHOD_2(
	void, PointParameteriv
	, GLenum const, pname
	, const GLint* const, params
	)

// void glGenQueries(GLsizei n, GLuint *ids);
GD_DEFINE_OGL_METHOD_2(
	void, GenQueries
	, GLsizei const, n
	, GLuint* const, ids
	)

// void glDeleteQueries(GLsizei n, const GLuint *ids);
GD_DEFINE_OGL_METHOD_2(
	void, DeleteQueries
	, GLsizei const, n
	, const GLuint* const, ids
	)

// GLboolean glIsQuery(GLuint id);
GD_DEFINE_OGL_METHOD_1(
	GLboolean, IsQuery
	, GLuint const, id
	)

// void glBeginQuery(GLenum target, GLuint id);
GD_DEFINE_OGL_METHOD_2(
	void, BeginQuery
	, GLenum const, target
	, GLuint const, id
	)

// void glEndQuery(GLenum target);
GD_DEFINE_OGL_METHOD_1(
	void, EndQuery
	, GLenum const, target
	)

// void glGetQueryiv(GLenum target, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetQueryiv
	, GLenum const, target
	, GLenum const, pname
	, GLint* const, params
	)

// void glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetQueryObjectiv
	, GLuint const, id
	, GLenum const, pname
	, GLint* const, params
	)

// void glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetQueryObjectuiv
	, GLuint const, id
	, GLenum const, pname
	, GLuint* const, params
	)

// void glBindBuffer(GLenum target, GLuint buffer);
GD_DEFINE_OGL_METHOD_2(
	void, BindBuffer
	, GLenum const, target
	, GLuint const, buffer
	)

// void glDeleteBuffers(GLsizei n, const GLuint *buffers);
GD_DEFINE_OGL_METHOD_2(
	void, DeleteBuffers
	, GLsizei const, n
	, const GLuint* const, buffers
	)

// void glGenBuffers(GLsizei n, GLuint *buffers);
GD_DEFINE_OGL_METHOD_2(
	void, GenBuffers
	, GLsizei const, n
	, GLuint* const, buffers
	)

// GLboolean glIsBuffer(GLuint buffer);
GD_DEFINE_OGL_METHOD_1(
	GLboolean, IsBuffer
	, GLuint const, buffer
	)

// void glBufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage);
GD_DEFINE_OGL_METHOD_4(
	void, BufferData
	, GLenum const, target
	, GLsizeiptr const, size
	, const GLvoid* const, data
	, GLenum const, usage
	)

// void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data);
GD_DEFINE_OGL_METHOD_4(
	void, BufferSubData
	, GLenum const, target
	, GLintptr const, offset
	, GLsizeiptr const, size
	, const GLvoid* const, data
	)

// void glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data);
GD_DEFINE_OGL_METHOD_4(
	void, GetBufferSubData
	, GLenum const, target
	, GLintptr const, offset
	, GLsizeiptr const, size
	, GLvoid* const, data
	)

// GLvoid* glMapBuffer(GLenum target, GLenum access);
GD_DEFINE_OGL_METHOD_2(
	GLvoid*, MapBuffer
	, GLenum const, target
	, GLenum const, access
	)

// GLboolean glUnmapBuffer(GLenum target);
GD_DEFINE_OGL_METHOD_1(
	GLboolean, UnmapBuffer
	, GLenum const, target
	)

// void glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetBufferParameteriv
	, GLenum const, target
	, GLenum const, pname
	, GLint* const, params
	)

// void glGetBufferPointerv(GLenum target, GLenum pname, GLvoid* *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetBufferPointerv
	, GLenum const, target
	, GLenum const, pname
	, GLvoid** const, params
	)

// void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);
GD_DEFINE_OGL_METHOD_2(
	void, BlendEquationSeparate
	, GLenum const, modeRGB
	, GLenum const, modeAlpha
	)

// void glDrawBuffers(GLsizei n, const GLenum *bufs);
GD_DEFINE_OGL_METHOD_2(
	void, DrawBuffers
	, GLsizei const, n
	, const GLenum* const, bufs
	)

// void glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
GD_DEFINE_OGL_METHOD_4(
	void, StencilOpSeparate
	, GLenum const, face
	, GLenum const, sfail
	, GLenum const, dpfail
	, GLenum const, dppass
	)

// void glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask);
GD_DEFINE_OGL_METHOD_4(
	void, StencilFuncSeparate
	, GLenum const, face
	, GLenum const, func
	, GLint const, ref
	, GLuint const, mask
	)

// void glStencilMaskSeparate(GLenum face, GLuint mask);
GD_DEFINE_OGL_METHOD_2(
	void, StencilMaskSeparate
	, GLenum const, face
	, GLuint const, mask
	)

// void glAttachShader(GLuint program, GLuint shader);
GD_DEFINE_OGL_METHOD_2(
	void, AttachShader
	, GLuint const, program
	, GLuint const, shader
	)

// void glBindAttribLocation(GLuint program, GLuint index, const GLchar *name);
GD_DEFINE_OGL_METHOD_3(
	void, BindAttribLocation
	, GLuint const, program
	, GLuint const, index
	, const GLchar* const, name
	)

// void glCompileShader(GLuint shader);
GD_DEFINE_OGL_METHOD_1(
	void, CompileShader
	, GLuint const, shader
	)

// GLuint glCreateProgram(void);
GD_DEFINE_OGL_METHOD_0(
	GLuint, CreateProgram
	/**** NO ARGUMENTS ****/
	)

// GLuint glCreateShader(GLenum type);
GD_DEFINE_OGL_METHOD_1(
	GLuint, CreateShader
	, GLenum const, type
	)

// void glDeleteProgram(GLuint program);
GD_DEFINE_OGL_METHOD_1(
	void, DeleteProgram
	, GLuint const, program
	)

// void glDeleteShader(GLuint shader);
GD_DEFINE_OGL_METHOD_1(
	void, DeleteShader
	, GLuint const, shader
	)

// void glDetachShader(GLuint program, GLuint shader);
GD_DEFINE_OGL_METHOD_2(
	void, DetachShader
	, GLuint const, program
	, GLuint const, shader
	)

// void glDisableVertexAttribArray(GLuint index);
GD_DEFINE_OGL_METHOD_1(
	void, DisableVertexAttribArray
	, GLuint const, index
	)

// void glEnableVertexAttribArray(GLuint index);
GD_DEFINE_OGL_METHOD_1(
	void, EnableVertexAttribArray
	, GLuint const, index
	)

// void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
GD_DEFINE_OGL_METHOD_7(
	void, GetActiveAttrib
	, GLuint const, program
	, GLuint const, index
	, GLsizei const, bufSize
	, GLsizei* const, length
	, GLint* const, size
	, GLenum* const, type
	, GLchar* const, name
	)

// void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
GD_DEFINE_OGL_METHOD_7(
	void, GetActiveUniform
	, GLuint const, program
	, GLuint const, index
	, GLsizei const, bufSize
	, GLsizei* const, length
	, GLint* const, size
	, GLenum* const, type
	, GLchar* const, name
	)

// void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj);
GD_DEFINE_OGL_METHOD_4(
	void, GetAttachedShaders
	, GLuint const, program
	, GLsizei const, maxCount
	, GLsizei* const, count
	, GLuint* const, obj
	)

// GLint glGetAttribLocation(GLuint program, const GLchar *name);
GD_DEFINE_OGL_METHOD_2(
	GLint, GetAttribLocation
	, GLuint const, program
	, const GLchar* const, name
	)

// void glGetProgramiv(GLuint program, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetProgramiv
	, GLuint const, program
	, GLenum const, pname
	, GLint* const, params
	)

// void glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
GD_DEFINE_OGL_METHOD_4(
	void, GetProgramInfoLog
	, GLuint const, program
	, GLsizei const, bufSize
	, GLsizei* const, length
	, GLchar* const, infoLog
	)

// void glGetShaderiv(GLuint shader, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetShaderiv
	, GLuint const, shader
	, GLenum const, pname
	, GLint* const, params
	)

// void glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
GD_DEFINE_OGL_METHOD_4(
	void, GetShaderInfoLog
	, GLuint const, shader
	, GLsizei const, bufSize
	, GLsizei* const, length
	, GLchar* const, infoLog
	)

// void glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
GD_DEFINE_OGL_METHOD_4(
	void, GetShaderSource
	, GLuint const, shader
	, GLsizei const, bufSize
	, GLsizei* const, length
	, GLchar* const, source
	)

// GLint glGetUniformLocation(GLuint program, const GLchar *name);
GD_DEFINE_OGL_METHOD_2(
	GLint, GetUniformLocation
	, GLuint const, program
	, const GLchar* const, name
	)

// void glGetUniformfv(GLuint program, GLint location, GLfloat *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetUniformfv
	, GLuint const, program
	, GLint const, location
	, GLfloat* const, params
	)

// void glGetUniformiv(GLuint program, GLint location, GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetUniformiv
	, GLuint const, program
	, GLint const, location
	, GLint* const, params
	)

// void glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetVertexAttribdv
	, GLuint const, index
	, GLenum const, pname
	, GLdouble* const, params
	)

// void glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetVertexAttribfv
	, GLuint const, index
	, GLenum const, pname
	, GLfloat* const, params
	)

// void glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetVertexAttribiv
	, GLuint const, index
	, GLenum const, pname
	, GLint* const, params
	)

// void glGetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid* *pointer);
GD_DEFINE_OGL_METHOD_3(
	void, GetVertexAttribPointerv
	, GLuint const, index
	, GLenum const, pname
	, GLvoid** const, pointer
	)

// GLboolean glIsProgram(GLuint program);
GD_DEFINE_OGL_METHOD_1(
	GLboolean, IsProgram
	, GLuint const, program
	)

// GLboolean glIsShader(GLuint shader);
GD_DEFINE_OGL_METHOD_1(
	GLboolean, IsShader
	, GLuint const, shader
	)

// void glLinkProgram(GLuint program);
GD_DEFINE_OGL_METHOD_1(
	void, LinkProgram
	, GLuint const, program
	)

// void glShaderSource(GLuint shader, GLsizei count, const GLchar* const *string, const GLint *length);
GD_DEFINE_OGL_METHOD_4(
	void, ShaderSource
	, GLuint const, shader
	, GLsizei const, count
	, const GLchar* const* const, string
	, const GLint* const, length
	)

// void glUseProgram(GLuint program);
GD_DEFINE_OGL_METHOD_1(
	void, UseProgram
	, GLuint const, program
	)

// void glUniform1f(GLint location, GLfloat v0);
GD_DEFINE_OGL_METHOD_2(
	void, Uniform1f
	, GLint const, location
	, GLfloat const, v0
	)

// void glUniform2f(GLint location, GLfloat v0, GLfloat v1);
GD_DEFINE_OGL_METHOD_3(
	void, Uniform2f
	, GLint const, location
	, GLfloat const, v0
	, GLfloat const, v1
	)

// void glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
GD_DEFINE_OGL_METHOD_4(
	void, Uniform3f
	, GLint const, location
	, GLfloat const, v0
	, GLfloat const, v1
	, GLfloat const, v2
	)

// void glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
GD_DEFINE_OGL_METHOD_5(
	void, Uniform4f
	, GLint const, location
	, GLfloat const, v0
	, GLfloat const, v1
	, GLfloat const, v2
	, GLfloat const, v3
	)

// void glUniform1i(GLint location, GLint v0);
GD_DEFINE_OGL_METHOD_2(
	void, Uniform1i
	, GLint const, location
	, GLint const, v0
	)

// void glUniform2i(GLint location, GLint v0, GLint v1);
GD_DEFINE_OGL_METHOD_3(
	void, Uniform2i
	, GLint const, location
	, GLint const, v0
	, GLint const, v1
	)

// void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2);
GD_DEFINE_OGL_METHOD_4(
	void, Uniform3i
	, GLint const, location
	, GLint const, v0
	, GLint const, v1
	, GLint const, v2
	)

// void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
GD_DEFINE_OGL_METHOD_5(
	void, Uniform4i
	, GLint const, location
	, GLint const, v0
	, GLint const, v1
	, GLint const, v2
	, GLint const, v3
	)

// void glUniform1fv(GLint location, GLsizei count, const GLfloat *value);
GD_DEFINE_OGL_METHOD_3(
	void, Uniform1fv
	, GLint const, location
	, GLsizei const, count
	, const GLfloat* const, value
	)

// void glUniform2fv(GLint location, GLsizei count, const GLfloat *value);
GD_DEFINE_OGL_METHOD_3(
	void, Uniform2fv
	, GLint const, location
	, GLsizei const, count
	, const GLfloat* const, value
	)

// void glUniform3fv(GLint location, GLsizei count, const GLfloat *value);
GD_DEFINE_OGL_METHOD_3(
	void, Uniform3fv
	, GLint const, location
	, GLsizei const, count
	, const GLfloat* const, value
	)

// void glUniform4fv(GLint location, GLsizei count, const GLfloat *value);
GD_DEFINE_OGL_METHOD_3(
	void, Uniform4fv
	, GLint const, location
	, GLsizei const, count
	, const GLfloat* const, value
	)

// void glUniform1iv(GLint location, GLsizei count, const GLint *value);
GD_DEFINE_OGL_METHOD_3(
	void, Uniform1iv
	, GLint const, location
	, GLsizei const, count
	, const GLint* const, value
	)

// void glUniform2iv(GLint location, GLsizei count, const GLint *value);
GD_DEFINE_OGL_METHOD_3(
	void, Uniform2iv
	, GLint const, location
	, GLsizei const, count
	, const GLint* const, value
	)

// void glUniform3iv(GLint location, GLsizei count, const GLint *value);
GD_DEFINE_OGL_METHOD_3(
	void, Uniform3iv
	, GLint const, location
	, GLsizei const, count
	, const GLint* const, value
	)

// void glUniform4iv(GLint location, GLsizei count, const GLint *value);
GD_DEFINE_OGL_METHOD_3(
	void, Uniform4iv
	, GLint const, location
	, GLsizei const, count
	, const GLint* const, value
	)

// void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_4(
	void, UniformMatrix2fv
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_4(
	void, UniformMatrix3fv
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_4(
	void, UniformMatrix4fv
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glValidateProgram(GLuint program);
GD_DEFINE_OGL_METHOD_1(
	void, ValidateProgram
	, GLuint const, program
	)

// void glVertexAttrib1d(GLuint index, GLdouble x);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttrib1d
	, GLuint const, index
	, GLdouble const, x
	)

// void glVertexAttrib1dv(GLuint index, const GLdouble *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttrib1dv
	, GLuint const, index
	, const GLdouble* const, v
	)

// void glVertexAttrib1f(GLuint index, GLfloat x);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttrib1f
	, GLuint const, index
	, GLfloat const, x
	)

// void glVertexAttrib1fv(GLuint index, const GLfloat *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttrib1fv
	, GLuint const, index
	, const GLfloat* const, v
	)

// void glVertexAttrib1s(GLuint index, GLshort x);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttrib1s
	, GLuint const, index
	, GLshort const, x
	)

// void glVertexAttrib1sv(GLuint index, const GLshort *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttrib1sv
	, GLuint const, index
	, const GLshort* const, v
	)

// void glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y);
GD_DEFINE_OGL_METHOD_3(
	void, VertexAttrib2d
	, GLuint const, index
	, GLdouble const, x
	, GLdouble const, y
	)

// void glVertexAttrib2dv(GLuint index, const GLdouble *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttrib2dv
	, GLuint const, index
	, const GLdouble* const, v
	)

// void glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y);
GD_DEFINE_OGL_METHOD_3(
	void, VertexAttrib2f
	, GLuint const, index
	, GLfloat const, x
	, GLfloat const, y
	)

// void glVertexAttrib2fv(GLuint index, const GLfloat *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttrib2fv
	, GLuint const, index
	, const GLfloat* const, v
	)

// void glVertexAttrib2s(GLuint index, GLshort x, GLshort y);
GD_DEFINE_OGL_METHOD_3(
	void, VertexAttrib2s
	, GLuint const, index
	, GLshort const, x
	, GLshort const, y
	)

// void glVertexAttrib2sv(GLuint index, const GLshort *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttrib2sv
	, GLuint const, index
	, const GLshort* const, v
	)

// void glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
GD_DEFINE_OGL_METHOD_4(
	void, VertexAttrib3d
	, GLuint const, index
	, GLdouble const, x
	, GLdouble const, y
	, GLdouble const, z
	)

// void glVertexAttrib3dv(GLuint index, const GLdouble *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttrib3dv
	, GLuint const, index
	, const GLdouble* const, v
	)

// void glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);
GD_DEFINE_OGL_METHOD_4(
	void, VertexAttrib3f
	, GLuint const, index
	, GLfloat const, x
	, GLfloat const, y
	, GLfloat const, z
	)

// void glVertexAttrib3fv(GLuint index, const GLfloat *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttrib3fv
	, GLuint const, index
	, const GLfloat* const, v
	)

// void glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z);
GD_DEFINE_OGL_METHOD_4(
	void, VertexAttrib3s
	, GLuint const, index
	, GLshort const, x
	, GLshort const, y
	, GLshort const, z
	)

// void glVertexAttrib3sv(GLuint index, const GLshort *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttrib3sv
	, GLuint const, index
	, const GLshort* const, v
	)

// void glVertexAttrib4Nbv(GLuint index, const GLbyte *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttrib4Nbv
	, GLuint const, index
	, const GLbyte* const, v
	)

// void glVertexAttrib4Niv(GLuint index, const GLint *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttrib4Niv
	, GLuint const, index
	, const GLint* const, v
	)

// void glVertexAttrib4Nsv(GLuint index, const GLshort *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttrib4Nsv
	, GLuint const, index
	, const GLshort* const, v
	)

// void glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
GD_DEFINE_OGL_METHOD_5(
	void, VertexAttrib4Nub
	, GLuint const, index
	, GLubyte const, x
	, GLubyte const, y
	, GLubyte const, z
	, GLubyte const, w
	)

// void glVertexAttrib4Nubv(GLuint index, const GLubyte *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttrib4Nubv
	, GLuint const, index
	, const GLubyte* const, v
	)

// void glVertexAttrib4Nuiv(GLuint index, const GLuint *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttrib4Nuiv
	, GLuint const, index
	, const GLuint* const, v
	)

// void glVertexAttrib4Nusv(GLuint index, const GLushort *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttrib4Nusv
	, GLuint const, index
	, const GLushort* const, v
	)

// void glVertexAttrib4bv(GLuint index, const GLbyte *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttrib4bv
	, GLuint const, index
	, const GLbyte* const, v
	)

// void glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GD_DEFINE_OGL_METHOD_5(
	void, VertexAttrib4d
	, GLuint const, index
	, GLdouble const, x
	, GLdouble const, y
	, GLdouble const, z
	, GLdouble const, w
	)

// void glVertexAttrib4dv(GLuint index, const GLdouble *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttrib4dv
	, GLuint const, index
	, const GLdouble* const, v
	)

// void glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
GD_DEFINE_OGL_METHOD_5(
	void, VertexAttrib4f
	, GLuint const, index
	, GLfloat const, x
	, GLfloat const, y
	, GLfloat const, z
	, GLfloat const, w
	)

// void glVertexAttrib4fv(GLuint index, const GLfloat *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttrib4fv
	, GLuint const, index
	, const GLfloat* const, v
	)

// void glVertexAttrib4iv(GLuint index, const GLint *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttrib4iv
	, GLuint const, index
	, const GLint* const, v
	)

// void glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
GD_DEFINE_OGL_METHOD_5(
	void, VertexAttrib4s
	, GLuint const, index
	, GLshort const, x
	, GLshort const, y
	, GLshort const, z
	, GLshort const, w
	)

// void glVertexAttrib4sv(GLuint index, const GLshort *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttrib4sv
	, GLuint const, index
	, const GLshort* const, v
	)

// void glVertexAttrib4ubv(GLuint index, const GLubyte *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttrib4ubv
	, GLuint const, index
	, const GLubyte* const, v
	)

// void glVertexAttrib4uiv(GLuint index, const GLuint *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttrib4uiv
	, GLuint const, index
	, const GLuint* const, v
	)

// void glVertexAttrib4usv(GLuint index, const GLushort *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttrib4usv
	, GLuint const, index
	, const GLushort* const, v
	)

// void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);
GD_DEFINE_OGL_METHOD_6(
	void, VertexAttribPointer
	, GLuint const, index
	, GLint const, size
	, GLenum const, type
	, GLboolean const, normalized
	, GLsizei const, stride
	, const GLvoid* const, pointer
	)

// void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_4(
	void, UniformMatrix2x3fv
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_4(
	void, UniformMatrix3x2fv
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_4(
	void, UniformMatrix2x4fv
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_4(
	void, UniformMatrix4x2fv
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_4(
	void, UniformMatrix3x4fv
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_4(
	void, UniformMatrix4x3fv
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
GD_DEFINE_OGL_METHOD_5(
	void, ColorMaski
	, GLuint const, index
	, GLboolean const, r
	, GLboolean const, g
	, GLboolean const, b
	, GLboolean const, a
	)

// void glGetBooleani_v(GLenum target, GLuint index, GLboolean *data);
GD_DEFINE_OGL_METHOD_3(
	void, GetBooleani_v
	, GLenum const, target
	, GLuint const, index
	, GLboolean* const, data
	)

// void glGetIntegeri_v(GLenum target, GLuint index, GLint *data);
GD_DEFINE_OGL_METHOD_3(
	void, GetIntegeri_v
	, GLenum const, target
	, GLuint const, index
	, GLint* const, data
	)

// void glEnablei(GLenum target, GLuint index);
GD_DEFINE_OGL_METHOD_2(
	void, Enablei
	, GLenum const, target
	, GLuint const, index
	)

// void glDisablei(GLenum target, GLuint index);
GD_DEFINE_OGL_METHOD_2(
	void, Disablei
	, GLenum const, target
	, GLuint const, index
	)

// GLboolean glIsEnabledi(GLenum target, GLuint index);
GD_DEFINE_OGL_METHOD_2(
	GLboolean, IsEnabledi
	, GLenum const, target
	, GLuint const, index
	)

// void glBeginTransformFeedback(GLenum primitiveMode);
GD_DEFINE_OGL_METHOD_1(
	void, BeginTransformFeedback
	, GLenum const, primitiveMode
	)

// void glEndTransformFeedback(void);
GD_DEFINE_OGL_METHOD_0(
	void, EndTransformFeedback
	/**** NO ARGUMENTS ****/
	)

// void glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
GD_DEFINE_OGL_METHOD_5(
	void, BindBufferRange
	, GLenum const, target
	, GLuint const, index
	, GLuint const, buffer
	, GLintptr const, offset
	, GLsizeiptr const, size
	)

// void glBindBufferBase(GLenum target, GLuint index, GLuint buffer);
GD_DEFINE_OGL_METHOD_3(
	void, BindBufferBase
	, GLenum const, target
	, GLuint const, index
	, GLuint const, buffer
	)

// void glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar* const *varyings, GLenum bufferMode);
GD_DEFINE_OGL_METHOD_4(
	void, TransformFeedbackVaryings
	, GLuint const, program
	, GLsizei const, count
	, const GLchar* const* const, varyings
	, GLenum const, bufferMode
	)

// void glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
GD_DEFINE_OGL_METHOD_7(
	void, GetTransformFeedbackVarying
	, GLuint const, program
	, GLuint const, index
	, GLsizei const, bufSize
	, GLsizei* const, length
	, GLsizei* const, size
	, GLenum* const, type
	, GLchar* const, name
	)

// void glClampColor(GLenum target, GLenum clamp);
GD_DEFINE_OGL_METHOD_2(
	void, ClampColor
	, GLenum const, target
	, GLenum const, clamp
	)

// void glBeginConditionalRender(GLuint id, GLenum mode);
GD_DEFINE_OGL_METHOD_2(
	void, BeginConditionalRender
	, GLuint const, id
	, GLenum const, mode
	)

// void glEndConditionalRender(void);
GD_DEFINE_OGL_METHOD_0(
	void, EndConditionalRender
	/**** NO ARGUMENTS ****/
	)

// void glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
GD_DEFINE_OGL_METHOD_5(
	void, VertexAttribIPointer
	, GLuint const, index
	, GLint const, size
	, GLenum const, type
	, GLsizei const, stride
	, const GLvoid* const, pointer
	)

// void glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetVertexAttribIiv
	, GLuint const, index
	, GLenum const, pname
	, GLint* const, params
	)

// void glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetVertexAttribIuiv
	, GLuint const, index
	, GLenum const, pname
	, GLuint* const, params
	)

// void glVertexAttribI1i(GLuint index, GLint x);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttribI1i
	, GLuint const, index
	, GLint const, x
	)

// void glVertexAttribI2i(GLuint index, GLint x, GLint y);
GD_DEFINE_OGL_METHOD_3(
	void, VertexAttribI2i
	, GLuint const, index
	, GLint const, x
	, GLint const, y
	)

// void glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z);
GD_DEFINE_OGL_METHOD_4(
	void, VertexAttribI3i
	, GLuint const, index
	, GLint const, x
	, GLint const, y
	, GLint const, z
	)

// void glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w);
GD_DEFINE_OGL_METHOD_5(
	void, VertexAttribI4i
	, GLuint const, index
	, GLint const, x
	, GLint const, y
	, GLint const, z
	, GLint const, w
	)

// void glVertexAttribI1ui(GLuint index, GLuint x);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttribI1ui
	, GLuint const, index
	, GLuint const, x
	)

// void glVertexAttribI2ui(GLuint index, GLuint x, GLuint y);
GD_DEFINE_OGL_METHOD_3(
	void, VertexAttribI2ui
	, GLuint const, index
	, GLuint const, x
	, GLuint const, y
	)

// void glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z);
GD_DEFINE_OGL_METHOD_4(
	void, VertexAttribI3ui
	, GLuint const, index
	, GLuint const, x
	, GLuint const, y
	, GLuint const, z
	)

// void glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
GD_DEFINE_OGL_METHOD_5(
	void, VertexAttribI4ui
	, GLuint const, index
	, GLuint const, x
	, GLuint const, y
	, GLuint const, z
	, GLuint const, w
	)

// void glVertexAttribI1iv(GLuint index, const GLint *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttribI1iv
	, GLuint const, index
	, const GLint* const, v
	)

// void glVertexAttribI2iv(GLuint index, const GLint *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttribI2iv
	, GLuint const, index
	, const GLint* const, v
	)

// void glVertexAttribI3iv(GLuint index, const GLint *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttribI3iv
	, GLuint const, index
	, const GLint* const, v
	)

// void glVertexAttribI4iv(GLuint index, const GLint *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttribI4iv
	, GLuint const, index
	, const GLint* const, v
	)

// void glVertexAttribI1uiv(GLuint index, const GLuint *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttribI1uiv
	, GLuint const, index
	, const GLuint* const, v
	)

// void glVertexAttribI2uiv(GLuint index, const GLuint *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttribI2uiv
	, GLuint const, index
	, const GLuint* const, v
	)

// void glVertexAttribI3uiv(GLuint index, const GLuint *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttribI3uiv
	, GLuint const, index
	, const GLuint* const, v
	)

// void glVertexAttribI4uiv(GLuint index, const GLuint *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttribI4uiv
	, GLuint const, index
	, const GLuint* const, v
	)

// void glVertexAttribI4bv(GLuint index, const GLbyte *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttribI4bv
	, GLuint const, index
	, const GLbyte* const, v
	)

// void glVertexAttribI4sv(GLuint index, const GLshort *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttribI4sv
	, GLuint const, index
	, const GLshort* const, v
	)

// void glVertexAttribI4ubv(GLuint index, const GLubyte *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttribI4ubv
	, GLuint const, index
	, const GLubyte* const, v
	)

// void glVertexAttribI4usv(GLuint index, const GLushort *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttribI4usv
	, GLuint const, index
	, const GLushort* const, v
	)

// void glGetUniformuiv(GLuint program, GLint location, GLuint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetUniformuiv
	, GLuint const, program
	, GLint const, location
	, GLuint* const, params
	)

// void glBindFragDataLocation(GLuint program, GLuint color, const GLchar *name);
GD_DEFINE_OGL_METHOD_3(
	void, BindFragDataLocation
	, GLuint const, program
	, GLuint const, color
	, const GLchar* const, name
	)

// GLint glGetFragDataLocation(GLuint program, const GLchar *name);
GD_DEFINE_OGL_METHOD_2(
	GLint, GetFragDataLocation
	, GLuint const, program
	, const GLchar* const, name
	)

// void glUniform1ui(GLint location, GLuint v0);
GD_DEFINE_OGL_METHOD_2(
	void, Uniform1ui
	, GLint const, location
	, GLuint const, v0
	)

// void glUniform2ui(GLint location, GLuint v0, GLuint v1);
GD_DEFINE_OGL_METHOD_3(
	void, Uniform2ui
	, GLint const, location
	, GLuint const, v0
	, GLuint const, v1
	)

// void glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2);
GD_DEFINE_OGL_METHOD_4(
	void, Uniform3ui
	, GLint const, location
	, GLuint const, v0
	, GLuint const, v1
	, GLuint const, v2
	)

// void glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
GD_DEFINE_OGL_METHOD_5(
	void, Uniform4ui
	, GLint const, location
	, GLuint const, v0
	, GLuint const, v1
	, GLuint const, v2
	, GLuint const, v3
	)

// void glUniform1uiv(GLint location, GLsizei count, const GLuint *value);
GD_DEFINE_OGL_METHOD_3(
	void, Uniform1uiv
	, GLint const, location
	, GLsizei const, count
	, const GLuint* const, value
	)

// void glUniform2uiv(GLint location, GLsizei count, const GLuint *value);
GD_DEFINE_OGL_METHOD_3(
	void, Uniform2uiv
	, GLint const, location
	, GLsizei const, count
	, const GLuint* const, value
	)

// void glUniform3uiv(GLint location, GLsizei count, const GLuint *value);
GD_DEFINE_OGL_METHOD_3(
	void, Uniform3uiv
	, GLint const, location
	, GLsizei const, count
	, const GLuint* const, value
	)

// void glUniform4uiv(GLint location, GLsizei count, const GLuint *value);
GD_DEFINE_OGL_METHOD_3(
	void, Uniform4uiv
	, GLint const, location
	, GLsizei const, count
	, const GLuint* const, value
	)

// void glTexParameterIiv(GLenum target, GLenum pname, const GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, TexParameterIiv
	, GLenum const, target
	, GLenum const, pname
	, const GLint* const, params
	)

// void glTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params);
GD_DEFINE_OGL_METHOD_3(
	void, TexParameterIuiv
	, GLenum const, target
	, GLenum const, pname
	, const GLuint* const, params
	)

// void glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetTexParameterIiv
	, GLenum const, target
	, GLenum const, pname
	, GLint* const, params
	)

// void glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetTexParameterIuiv
	, GLenum const, target
	, GLenum const, pname
	, GLuint* const, params
	)

// void glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value);
GD_DEFINE_OGL_METHOD_3(
	void, ClearBufferiv
	, GLenum const, buffer
	, GLint const, drawbuffer
	, const GLint* const, value
	)

// void glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value);
GD_DEFINE_OGL_METHOD_3(
	void, ClearBufferuiv
	, GLenum const, buffer
	, GLint const, drawbuffer
	, const GLuint* const, value
	)

// void glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value);
GD_DEFINE_OGL_METHOD_3(
	void, ClearBufferfv
	, GLenum const, buffer
	, GLint const, drawbuffer
	, const GLfloat* const, value
	)

// void glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
GD_DEFINE_OGL_METHOD_4(
	void, ClearBufferfi
	, GLenum const, buffer
	, GLint const, drawbuffer
	, GLfloat const, depth
	, GLint const, stencil
	)

// GLubyte const* glGetStringi(GLenum name, GLuint index);
GD_DEFINE_OGL_METHOD_2(
	GLubyte const*, GetStringi
	, GLenum const, name
	, GLuint const, index
	)

// void glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
GD_DEFINE_OGL_METHOD_4(
	void, DrawArraysInstanced
	, GLenum const, mode
	, GLint const, first
	, GLsizei const, count
	, GLsizei const, instancecount
	)

// void glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei instancecount);
GD_DEFINE_OGL_METHOD_5(
	void, DrawElementsInstanced
	, GLenum const, mode
	, GLsizei const, count
	, GLenum const, type
	, const GLvoid* const, indices
	, GLsizei const, instancecount
	)

// void glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer);
GD_DEFINE_OGL_METHOD_3(
	void, TexBuffer
	, GLenum const, target
	, GLenum const, internalformat
	, GLuint const, buffer
	)

// void glPrimitiveRestartIndex(GLuint index);
GD_DEFINE_OGL_METHOD_1(
	void, PrimitiveRestartIndex
	, GLuint const, index
	)

// void glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data);
GD_DEFINE_OGL_METHOD_3(
	void, GetInteger64i_v
	, GLenum const, target
	, GLuint const, index
	, GLint64* const, data
	)

// void glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetBufferParameteri64v
	, GLenum const, target
	, GLenum const, pname
	, GLint64* const, params
	)

// void glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level);
GD_DEFINE_OGL_METHOD_4(
	void, FramebufferTexture
	, GLenum const, target
	, GLenum const, attachment
	, GLuint const, texture
	, GLint const, level
	)

// void glVertexAttribDivisor(GLuint index, GLuint divisor);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttribDivisor
	, GLuint const, index
	, GLuint const, divisor
	)

// void glMinSampleShading(GLfloat value);
GD_DEFINE_OGL_METHOD_1(
	void, MinSampleShading
	, GLfloat const, value
	)

// void glBlendEquationi(GLuint buf, GLenum mode);
GD_DEFINE_OGL_METHOD_2(
	void, BlendEquationi
	, GLuint const, buf
	, GLenum const, mode
	)

// void glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
GD_DEFINE_OGL_METHOD_3(
	void, BlendEquationSeparatei
	, GLuint const, buf
	, GLenum const, modeRGB
	, GLenum const, modeAlpha
	)

// void glBlendFunci(GLuint buf, GLenum src, GLenum dst);
GD_DEFINE_OGL_METHOD_3(
	void, BlendFunci
	, GLuint const, buf
	, GLenum const, src
	, GLenum const, dst
	)

// void glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
GD_DEFINE_OGL_METHOD_5(
	void, BlendFuncSeparatei
	, GLuint const, buf
	, GLenum const, srcRGB
	, GLenum const, dstRGB
	, GLenum const, srcAlpha
	, GLenum const, dstAlpha
	)

// GLboolean glIsRenderbuffer(GLuint renderbuffer);
GD_DEFINE_OGL_METHOD_1(
	GLboolean, IsRenderbuffer
	, GLuint const, renderbuffer
	)

// void glBindRenderbuffer(GLenum target, GLuint renderbuffer);
GD_DEFINE_OGL_METHOD_2(
	void, BindRenderbuffer
	, GLenum const, target
	, GLuint const, renderbuffer
	)

// void glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers);
GD_DEFINE_OGL_METHOD_2(
	void, DeleteRenderbuffers
	, GLsizei const, n
	, const GLuint* const, renderbuffers
	)

// void glGenRenderbuffers(GLsizei n, GLuint *renderbuffers);
GD_DEFINE_OGL_METHOD_2(
	void, GenRenderbuffers
	, GLsizei const, n
	, GLuint* const, renderbuffers
	)

// void glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
GD_DEFINE_OGL_METHOD_4(
	void, RenderbufferStorage
	, GLenum const, target
	, GLenum const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	)

// void glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetRenderbufferParameteriv
	, GLenum const, target
	, GLenum const, pname
	, GLint* const, params
	)

// GLboolean glIsFramebuffer(GLuint framebuffer);
GD_DEFINE_OGL_METHOD_1(
	GLboolean, IsFramebuffer
	, GLuint const, framebuffer
	)

// void glBindFramebuffer(GLenum target, GLuint framebuffer);
GD_DEFINE_OGL_METHOD_2(
	void, BindFramebuffer
	, GLenum const, target
	, GLuint const, framebuffer
	)

// void glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers);
GD_DEFINE_OGL_METHOD_2(
	void, DeleteFramebuffers
	, GLsizei const, n
	, const GLuint* const, framebuffers
	)

// void glGenFramebuffers(GLsizei n, GLuint *framebuffers);
GD_DEFINE_OGL_METHOD_2(
	void, GenFramebuffers
	, GLsizei const, n
	, GLuint* const, framebuffers
	)

// GLenum glCheckFramebufferStatus(GLenum target);
GD_DEFINE_OGL_METHOD_1(
	GLenum, CheckFramebufferStatus
	, GLenum const, target
	)

// void glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
GD_DEFINE_OGL_METHOD_5(
	void, FramebufferTexture1D
	, GLenum const, target
	, GLenum const, attachment
	, GLenum const, textarget
	, GLuint const, texture
	, GLint const, level
	)

// void glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
GD_DEFINE_OGL_METHOD_5(
	void, FramebufferTexture2D
	, GLenum const, target
	, GLenum const, attachment
	, GLenum const, textarget
	, GLuint const, texture
	, GLint const, level
	)

// void glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
GD_DEFINE_OGL_METHOD_6(
	void, FramebufferTexture3D
	, GLenum const, target
	, GLenum const, attachment
	, GLenum const, textarget
	, GLuint const, texture
	, GLint const, level
	, GLint const, zoffset
	)

// void glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
GD_DEFINE_OGL_METHOD_4(
	void, FramebufferRenderbuffer
	, GLenum const, target
	, GLenum const, attachment
	, GLenum const, renderbuffertarget
	, GLuint const, renderbuffer
	)

// void glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_4(
	void, GetFramebufferAttachmentParameteriv
	, GLenum const, target
	, GLenum const, attachment
	, GLenum const, pname
	, GLint* const, params
	)

// void glGenerateMipmap(GLenum target);
GD_DEFINE_OGL_METHOD_1(
	void, GenerateMipmap
	, GLenum const, target
	)

// void glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
GD_DEFINE_OGL_METHOD_10(
	void, BlitFramebuffer
	, GLint const, srcX0
	, GLint const, srcY0
	, GLint const, srcX1
	, GLint const, srcY1
	, GLint const, dstX0
	, GLint const, dstY0
	, GLint const, dstX1
	, GLint const, dstY1
	, GLbitfield const, mask
	, GLenum const, filter
	)

// void glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
GD_DEFINE_OGL_METHOD_5(
	void, RenderbufferStorageMultisample
	, GLenum const, target
	, GLsizei const, samples
	, GLenum const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	)

// void glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
GD_DEFINE_OGL_METHOD_5(
	void, FramebufferTextureLayer
	, GLenum const, target
	, GLenum const, attachment
	, GLuint const, texture
	, GLint const, level
	, GLint const, layer
	)

// GLvoid* glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
GD_DEFINE_OGL_METHOD_4(
	GLvoid*, MapBufferRange
	, GLenum const, target
	, GLintptr const, offset
	, GLsizeiptr const, length
	, GLbitfield const, access
	)

// void glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length);
GD_DEFINE_OGL_METHOD_3(
	void, FlushMappedBufferRange
	, GLenum const, target
	, GLintptr const, offset
	, GLsizeiptr const, length
	)

// void glBindVertexArray(GLuint array);
GD_DEFINE_OGL_METHOD_1(
	void, BindVertexArray
	, GLuint const, array
	)

// void glDeleteVertexArrays(GLsizei n, const GLuint *arrays);
GD_DEFINE_OGL_METHOD_2(
	void, DeleteVertexArrays
	, GLsizei const, n
	, const GLuint* const, arrays
	)

// void glGenVertexArrays(GLsizei n, GLuint *arrays);
GD_DEFINE_OGL_METHOD_2(
	void, GenVertexArrays
	, GLsizei const, n
	, GLuint* const, arrays
	)

// GLboolean glIsVertexArray(GLuint array);
GD_DEFINE_OGL_METHOD_1(
	GLboolean, IsVertexArray
	, GLuint const, array
	)

// void glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar* const *uniformNames, GLuint *uniformIndices);
GD_DEFINE_OGL_METHOD_4(
	void, GetUniformIndices
	, GLuint const, program
	, GLsizei const, uniformCount
	, const GLchar* const* const, uniformNames
	, GLuint* const, uniformIndices
	)

// void glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_5(
	void, GetActiveUniformsiv
	, GLuint const, program
	, GLsizei const, uniformCount
	, const GLuint* const, uniformIndices
	, GLenum const, pname
	, GLint* const, params
	)

// void glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
GD_DEFINE_OGL_METHOD_5(
	void, GetActiveUniformName
	, GLuint const, program
	, GLuint const, uniformIndex
	, GLsizei const, bufSize
	, GLsizei* const, length
	, GLchar* const, uniformName
	)

// GLuint glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName);
GD_DEFINE_OGL_METHOD_2(
	GLuint, GetUniformBlockIndex
	, GLuint const, program
	, const GLchar* const, uniformBlockName
	)

// void glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_4(
	void, GetActiveUniformBlockiv
	, GLuint const, program
	, GLuint const, uniformBlockIndex
	, GLenum const, pname
	, GLint* const, params
	)

// void glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
GD_DEFINE_OGL_METHOD_5(
	void, GetActiveUniformBlockName
	, GLuint const, program
	, GLuint const, uniformBlockIndex
	, GLsizei const, bufSize
	, GLsizei* const, length
	, GLchar* const, uniformBlockName
	)

// void glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
GD_DEFINE_OGL_METHOD_3(
	void, UniformBlockBinding
	, GLuint const, program
	, GLuint const, uniformBlockIndex
	, GLuint const, uniformBlockBinding
	)

// void glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
GD_DEFINE_OGL_METHOD_5(
	void, CopyBufferSubData
	, GLenum const, readTarget
	, GLenum const, writeTarget
	, GLintptr const, readOffset
	, GLintptr const, writeOffset
	, GLsizeiptr const, size
	)

// void glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
GD_DEFINE_OGL_METHOD_5(
	void, DrawElementsBaseVertex
	, GLenum const, mode
	, GLsizei const, count
	, GLenum const, type
	, const GLvoid* const, indices
	, GLint const, basevertex
	)

// void glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
GD_DEFINE_OGL_METHOD_7(
	void, DrawRangeElementsBaseVertex
	, GLenum const, mode
	, GLuint const, start
	, GLuint const, end
	, GLsizei const, count
	, GLenum const, type
	, const GLvoid* const, indices
	, GLint const, basevertex
	)

// void glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei instancecount, GLint basevertex);
GD_DEFINE_OGL_METHOD_6(
	void, DrawElementsInstancedBaseVertex
	, GLenum const, mode
	, GLsizei const, count
	, GLenum const, type
	, const GLvoid* const, indices
	, GLsizei const, instancecount
	, GLint const, basevertex
	)

// void glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const GLvoid* const *indices, GLsizei drawcount, const GLint *basevertex);
GD_DEFINE_OGL_METHOD_6(
	void, MultiDrawElementsBaseVertex
	, GLenum const, mode
	, const GLsizei* const, count
	, GLenum const, type
	, const GLvoid* const* const, indices
	, GLsizei const, drawcount
	, const GLint* const, basevertex
	)

// void glProvokingVertex(GLenum mode);
GD_DEFINE_OGL_METHOD_1(
	void, ProvokingVertex
	, GLenum const, mode
	)

// GLsync glFenceSync(GLenum condition, GLbitfield flags);
GD_DEFINE_OGL_METHOD_2(
	GLsync, FenceSync
	, GLenum const, condition
	, GLbitfield const, flags
	)

// GLboolean glIsSync(GLsync sync);
GD_DEFINE_OGL_METHOD_1(
	GLboolean, IsSync
	, GLsync const, sync
	)

// void glDeleteSync(GLsync sync);
GD_DEFINE_OGL_METHOD_1(
	void, DeleteSync
	, GLsync const, sync
	)

// GLenum glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
GD_DEFINE_OGL_METHOD_3(
	GLenum, ClientWaitSync
	, GLsync const, sync
	, GLbitfield const, flags
	, GLuint64 const, timeout
	)

// void glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
GD_DEFINE_OGL_METHOD_3(
	void, WaitSync
	, GLsync const, sync
	, GLbitfield const, flags
	, GLuint64 const, timeout
	)

// void glGetInteger64v(GLenum pname, GLint64 *params);
GD_DEFINE_OGL_METHOD_2(
	void, GetInteger64v
	, GLenum const, pname
	, GLint64* const, params
	)

// void glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
GD_DEFINE_OGL_METHOD_5(
	void, GetSynciv
	, GLsync const, sync
	, GLenum const, pname
	, GLsizei const, bufSize
	, GLsizei* const, length
	, GLint* const, values
	)

// void glTexImage2DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
GD_DEFINE_OGL_METHOD_6(
	void, TexImage2DMultisample
	, GLenum const, target
	, GLsizei const, samples
	, GLint const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	, GLboolean const, fixedsamplelocations
	)

// void glTexImage3DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
GD_DEFINE_OGL_METHOD_7(
	void, TexImage3DMultisample
	, GLenum const, target
	, GLsizei const, samples
	, GLint const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	, GLsizei const, depth
	, GLboolean const, fixedsamplelocations
	)

// void glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val);
GD_DEFINE_OGL_METHOD_3(
	void, GetMultisamplefv
	, GLenum const, pname
	, GLuint const, index
	, GLfloat* const, val
	)

// void glSampleMaski(GLuint index, GLbitfield mask);
GD_DEFINE_OGL_METHOD_2(
	void, SampleMaski
	, GLuint const, index
	, GLbitfield const, mask
	)

// void glBlendEquationiARB(GLuint buf, GLenum mode);
GD_DEFINE_OGL_METHOD_2(
	void, BlendEquationiARB
	, GLuint const, buf
	, GLenum const, mode
	)

// void glBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
GD_DEFINE_OGL_METHOD_3(
	void, BlendEquationSeparateiARB
	, GLuint const, buf
	, GLenum const, modeRGB
	, GLenum const, modeAlpha
	)

// void glBlendFunciARB(GLuint buf, GLenum src, GLenum dst);
GD_DEFINE_OGL_METHOD_3(
	void, BlendFunciARB
	, GLuint const, buf
	, GLenum const, src
	, GLenum const, dst
	)

// void glBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
GD_DEFINE_OGL_METHOD_5(
	void, BlendFuncSeparateiARB
	, GLuint const, buf
	, GLenum const, srcRGB
	, GLenum const, dstRGB
	, GLenum const, srcAlpha
	, GLenum const, dstAlpha
	)

// void glMinSampleShadingARB(GLfloat value);
GD_DEFINE_OGL_METHOD_1(
	void, MinSampleShadingARB
	, GLfloat const, value
	)

// void glNamedStringARB(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string);
GD_DEFINE_OGL_METHOD_5(
	void, NamedStringARB
	, GLenum const, type
	, GLint const, namelen
	, const GLchar* const, name
	, GLint const, stringlen
	, const GLchar* const, string
	)

// void glDeleteNamedStringARB(GLint namelen, const GLchar *name);
GD_DEFINE_OGL_METHOD_2(
	void, DeleteNamedStringARB
	, GLint const, namelen
	, const GLchar* const, name
	)

// void glCompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar* *path, const GLint *length);
GD_DEFINE_OGL_METHOD_4(
	void, CompileShaderIncludeARB
	, GLuint const, shader
	, GLsizei const, count
	, const GLchar** const, path
	, const GLint* const, length
	)

// GLboolean glIsNamedStringARB(GLint namelen, const GLchar *name);
GD_DEFINE_OGL_METHOD_2(
	GLboolean, IsNamedStringARB
	, GLint const, namelen
	, const GLchar* const, name
	)

// void glGetNamedStringARB(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string);
GD_DEFINE_OGL_METHOD_5(
	void, GetNamedStringARB
	, GLint const, namelen
	, const GLchar* const, name
	, GLsizei const, bufSize
	, GLint* const, stringlen
	, GLchar* const, string
	)

// void glGetNamedStringivARB(GLint namelen, const GLchar *name, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_4(
	void, GetNamedStringivARB
	, GLint const, namelen
	, const GLchar* const, name
	, GLenum const, pname
	, GLint* const, params
	)

// void glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
GD_DEFINE_OGL_METHOD_4(
	void, BindFragDataLocationIndexed
	, GLuint const, program
	, GLuint const, colorNumber
	, GLuint const, index
	, const GLchar* const, name
	)

// GLint glGetFragDataIndex(GLuint program, const GLchar *name);
GD_DEFINE_OGL_METHOD_2(
	GLint, GetFragDataIndex
	, GLuint const, program
	, const GLchar* const, name
	)

// void glGenSamplers(GLsizei count, GLuint *samplers);
GD_DEFINE_OGL_METHOD_2(
	void, GenSamplers
	, GLsizei const, count
	, GLuint* const, samplers
	)

// void glDeleteSamplers(GLsizei count, const GLuint *samplers);
GD_DEFINE_OGL_METHOD_2(
	void, DeleteSamplers
	, GLsizei const, count
	, const GLuint* const, samplers
	)

// GLboolean glIsSampler(GLuint sampler);
GD_DEFINE_OGL_METHOD_1(
	GLboolean, IsSampler
	, GLuint const, sampler
	)

// void glBindSampler(GLuint unit, GLuint sampler);
GD_DEFINE_OGL_METHOD_2(
	void, BindSampler
	, GLuint const, unit
	, GLuint const, sampler
	)

// void glSamplerParameteri(GLuint sampler, GLenum pname, GLint param);
GD_DEFINE_OGL_METHOD_3(
	void, SamplerParameteri
	, GLuint const, sampler
	, GLenum const, pname
	, GLint const, param
	)

// void glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *param);
GD_DEFINE_OGL_METHOD_3(
	void, SamplerParameteriv
	, GLuint const, sampler
	, GLenum const, pname
	, const GLint* const, param
	)

// void glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param);
GD_DEFINE_OGL_METHOD_3(
	void, SamplerParameterf
	, GLuint const, sampler
	, GLenum const, pname
	, GLfloat const, param
	)

// void glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *param);
GD_DEFINE_OGL_METHOD_3(
	void, SamplerParameterfv
	, GLuint const, sampler
	, GLenum const, pname
	, const GLfloat* const, param
	)

// void glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *param);
GD_DEFINE_OGL_METHOD_3(
	void, SamplerParameterIiv
	, GLuint const, sampler
	, GLenum const, pname
	, const GLint* const, param
	)

// void glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *param);
GD_DEFINE_OGL_METHOD_3(
	void, SamplerParameterIuiv
	, GLuint const, sampler
	, GLenum const, pname
	, const GLuint* const, param
	)

// void glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetSamplerParameteriv
	, GLuint const, sampler
	, GLenum const, pname
	, GLint* const, params
	)

// void glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetSamplerParameterIiv
	, GLuint const, sampler
	, GLenum const, pname
	, GLint* const, params
	)

// void glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetSamplerParameterfv
	, GLuint const, sampler
	, GLenum const, pname
	, GLfloat* const, params
	)

// void glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetSamplerParameterIuiv
	, GLuint const, sampler
	, GLenum const, pname
	, GLuint* const, params
	)

// void glQueryCounter(GLuint id, GLenum target);
GD_DEFINE_OGL_METHOD_2(
	void, QueryCounter
	, GLuint const, id
	, GLenum const, target
	)

// void glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetQueryObjecti64v
	, GLuint const, id
	, GLenum const, pname
	, GLint64* const, params
	)

// void glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetQueryObjectui64v
	, GLuint const, id
	, GLenum const, pname
	, GLuint64* const, params
	)

// void glVertexP2ui(GLenum type, GLuint value);
GD_DEFINE_OGL_METHOD_2(
	void, VertexP2ui
	, GLenum const, type
	, GLuint const, value
	)

// void glVertexP2uiv(GLenum type, const GLuint *value);
GD_DEFINE_OGL_METHOD_2(
	void, VertexP2uiv
	, GLenum const, type
	, const GLuint* const, value
	)

// void glVertexP3ui(GLenum type, GLuint value);
GD_DEFINE_OGL_METHOD_2(
	void, VertexP3ui
	, GLenum const, type
	, GLuint const, value
	)

// void glVertexP3uiv(GLenum type, const GLuint *value);
GD_DEFINE_OGL_METHOD_2(
	void, VertexP3uiv
	, GLenum const, type
	, const GLuint* const, value
	)

// void glVertexP4ui(GLenum type, GLuint value);
GD_DEFINE_OGL_METHOD_2(
	void, VertexP4ui
	, GLenum const, type
	, GLuint const, value
	)

// void glVertexP4uiv(GLenum type, const GLuint *value);
GD_DEFINE_OGL_METHOD_2(
	void, VertexP4uiv
	, GLenum const, type
	, const GLuint* const, value
	)

// void glTexCoordP1ui(GLenum type, GLuint coords);
GD_DEFINE_OGL_METHOD_2(
	void, TexCoordP1ui
	, GLenum const, type
	, GLuint const, coords
	)

// void glTexCoordP1uiv(GLenum type, const GLuint *coords);
GD_DEFINE_OGL_METHOD_2(
	void, TexCoordP1uiv
	, GLenum const, type
	, const GLuint* const, coords
	)

// void glTexCoordP2ui(GLenum type, GLuint coords);
GD_DEFINE_OGL_METHOD_2(
	void, TexCoordP2ui
	, GLenum const, type
	, GLuint const, coords
	)

// void glTexCoordP2uiv(GLenum type, const GLuint *coords);
GD_DEFINE_OGL_METHOD_2(
	void, TexCoordP2uiv
	, GLenum const, type
	, const GLuint* const, coords
	)

// void glTexCoordP3ui(GLenum type, GLuint coords);
GD_DEFINE_OGL_METHOD_2(
	void, TexCoordP3ui
	, GLenum const, type
	, GLuint const, coords
	)

// void glTexCoordP3uiv(GLenum type, const GLuint *coords);
GD_DEFINE_OGL_METHOD_2(
	void, TexCoordP3uiv
	, GLenum const, type
	, const GLuint* const, coords
	)

// void glTexCoordP4ui(GLenum type, GLuint coords);
GD_DEFINE_OGL_METHOD_2(
	void, TexCoordP4ui
	, GLenum const, type
	, GLuint const, coords
	)

// void glTexCoordP4uiv(GLenum type, const GLuint *coords);
GD_DEFINE_OGL_METHOD_2(
	void, TexCoordP4uiv
	, GLenum const, type
	, const GLuint* const, coords
	)

// void glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords);
GD_DEFINE_OGL_METHOD_3(
	void, MultiTexCoordP1ui
	, GLenum const, texture
	, GLenum const, type
	, GLuint const, coords
	)

// void glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords);
GD_DEFINE_OGL_METHOD_3(
	void, MultiTexCoordP1uiv
	, GLenum const, texture
	, GLenum const, type
	, const GLuint* const, coords
	)

// void glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords);
GD_DEFINE_OGL_METHOD_3(
	void, MultiTexCoordP2ui
	, GLenum const, texture
	, GLenum const, type
	, GLuint const, coords
	)

// void glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords);
GD_DEFINE_OGL_METHOD_3(
	void, MultiTexCoordP2uiv
	, GLenum const, texture
	, GLenum const, type
	, const GLuint* const, coords
	)

// void glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords);
GD_DEFINE_OGL_METHOD_3(
	void, MultiTexCoordP3ui
	, GLenum const, texture
	, GLenum const, type
	, GLuint const, coords
	)

// void glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords);
GD_DEFINE_OGL_METHOD_3(
	void, MultiTexCoordP3uiv
	, GLenum const, texture
	, GLenum const, type
	, const GLuint* const, coords
	)

// void glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords);
GD_DEFINE_OGL_METHOD_3(
	void, MultiTexCoordP4ui
	, GLenum const, texture
	, GLenum const, type
	, GLuint const, coords
	)

// void glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords);
GD_DEFINE_OGL_METHOD_3(
	void, MultiTexCoordP4uiv
	, GLenum const, texture
	, GLenum const, type
	, const GLuint* const, coords
	)

// void glNormalP3ui(GLenum type, GLuint coords);
GD_DEFINE_OGL_METHOD_2(
	void, NormalP3ui
	, GLenum const, type
	, GLuint const, coords
	)

// void glNormalP3uiv(GLenum type, const GLuint *coords);
GD_DEFINE_OGL_METHOD_2(
	void, NormalP3uiv
	, GLenum const, type
	, const GLuint* const, coords
	)

// void glColorP3ui(GLenum type, GLuint color);
GD_DEFINE_OGL_METHOD_2(
	void, ColorP3ui
	, GLenum const, type
	, GLuint const, color
	)

// void glColorP3uiv(GLenum type, const GLuint *color);
GD_DEFINE_OGL_METHOD_2(
	void, ColorP3uiv
	, GLenum const, type
	, const GLuint* const, color
	)

// void glColorP4ui(GLenum type, GLuint color);
GD_DEFINE_OGL_METHOD_2(
	void, ColorP4ui
	, GLenum const, type
	, GLuint const, color
	)

// void glColorP4uiv(GLenum type, const GLuint *color);
GD_DEFINE_OGL_METHOD_2(
	void, ColorP4uiv
	, GLenum const, type
	, const GLuint* const, color
	)

// void glSecondaryColorP3ui(GLenum type, GLuint color);
GD_DEFINE_OGL_METHOD_2(
	void, SecondaryColorP3ui
	, GLenum const, type
	, GLuint const, color
	)

// void glSecondaryColorP3uiv(GLenum type, const GLuint *color);
GD_DEFINE_OGL_METHOD_2(
	void, SecondaryColorP3uiv
	, GLenum const, type
	, const GLuint* const, color
	)

// void glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
GD_DEFINE_OGL_METHOD_4(
	void, VertexAttribP1ui
	, GLuint const, index
	, GLenum const, type
	, GLboolean const, normalized
	, GLuint const, value
	)

// void glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
GD_DEFINE_OGL_METHOD_4(
	void, VertexAttribP1uiv
	, GLuint const, index
	, GLenum const, type
	, GLboolean const, normalized
	, const GLuint* const, value
	)

// void glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
GD_DEFINE_OGL_METHOD_4(
	void, VertexAttribP2ui
	, GLuint const, index
	, GLenum const, type
	, GLboolean const, normalized
	, GLuint const, value
	)

// void glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
GD_DEFINE_OGL_METHOD_4(
	void, VertexAttribP2uiv
	, GLuint const, index
	, GLenum const, type
	, GLboolean const, normalized
	, const GLuint* const, value
	)

// void glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
GD_DEFINE_OGL_METHOD_4(
	void, VertexAttribP3ui
	, GLuint const, index
	, GLenum const, type
	, GLboolean const, normalized
	, GLuint const, value
	)

// void glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
GD_DEFINE_OGL_METHOD_4(
	void, VertexAttribP3uiv
	, GLuint const, index
	, GLenum const, type
	, GLboolean const, normalized
	, const GLuint* const, value
	)

// void glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
GD_DEFINE_OGL_METHOD_4(
	void, VertexAttribP4ui
	, GLuint const, index
	, GLenum const, type
	, GLboolean const, normalized
	, GLuint const, value
	)

// void glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
GD_DEFINE_OGL_METHOD_4(
	void, VertexAttribP4uiv
	, GLuint const, index
	, GLenum const, type
	, GLboolean const, normalized
	, const GLuint* const, value
	)

// void glDrawArraysIndirect(GLenum mode, const GLvoid *indirect);
GD_DEFINE_OGL_METHOD_2(
	void, DrawArraysIndirect
	, GLenum const, mode
	, const GLvoid* const, indirect
	)

// void glDrawElementsIndirect(GLenum mode, GLenum type, const GLvoid *indirect);
GD_DEFINE_OGL_METHOD_3(
	void, DrawElementsIndirect
	, GLenum const, mode
	, GLenum const, type
	, const GLvoid* const, indirect
	)

// void glUniform1d(GLint location, GLdouble x);
GD_DEFINE_OGL_METHOD_2(
	void, Uniform1d
	, GLint const, location
	, GLdouble const, x
	)

// void glUniform2d(GLint location, GLdouble x, GLdouble y);
GD_DEFINE_OGL_METHOD_3(
	void, Uniform2d
	, GLint const, location
	, GLdouble const, x
	, GLdouble const, y
	)

// void glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z);
GD_DEFINE_OGL_METHOD_4(
	void, Uniform3d
	, GLint const, location
	, GLdouble const, x
	, GLdouble const, y
	, GLdouble const, z
	)

// void glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GD_DEFINE_OGL_METHOD_5(
	void, Uniform4d
	, GLint const, location
	, GLdouble const, x
	, GLdouble const, y
	, GLdouble const, z
	, GLdouble const, w
	)

// void glUniform1dv(GLint location, GLsizei count, const GLdouble *value);
GD_DEFINE_OGL_METHOD_3(
	void, Uniform1dv
	, GLint const, location
	, GLsizei const, count
	, const GLdouble* const, value
	)

// void glUniform2dv(GLint location, GLsizei count, const GLdouble *value);
GD_DEFINE_OGL_METHOD_3(
	void, Uniform2dv
	, GLint const, location
	, GLsizei const, count
	, const GLdouble* const, value
	)

// void glUniform3dv(GLint location, GLsizei count, const GLdouble *value);
GD_DEFINE_OGL_METHOD_3(
	void, Uniform3dv
	, GLint const, location
	, GLsizei const, count
	, const GLdouble* const, value
	)

// void glUniform4dv(GLint location, GLsizei count, const GLdouble *value);
GD_DEFINE_OGL_METHOD_3(
	void, Uniform4dv
	, GLint const, location
	, GLsizei const, count
	, const GLdouble* const, value
	)

// void glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GD_DEFINE_OGL_METHOD_4(
	void, UniformMatrix2dv
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLdouble* const, value
	)

// void glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GD_DEFINE_OGL_METHOD_4(
	void, UniformMatrix3dv
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLdouble* const, value
	)

// void glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GD_DEFINE_OGL_METHOD_4(
	void, UniformMatrix4dv
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLdouble* const, value
	)

// void glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GD_DEFINE_OGL_METHOD_4(
	void, UniformMatrix2x3dv
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLdouble* const, value
	)

// void glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GD_DEFINE_OGL_METHOD_4(
	void, UniformMatrix2x4dv
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLdouble* const, value
	)

// void glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GD_DEFINE_OGL_METHOD_4(
	void, UniformMatrix3x2dv
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLdouble* const, value
	)

// void glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GD_DEFINE_OGL_METHOD_4(
	void, UniformMatrix3x4dv
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLdouble* const, value
	)

// void glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GD_DEFINE_OGL_METHOD_4(
	void, UniformMatrix4x2dv
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLdouble* const, value
	)

// void glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GD_DEFINE_OGL_METHOD_4(
	void, UniformMatrix4x3dv
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLdouble* const, value
	)

// void glGetUniformdv(GLuint program, GLint location, GLdouble *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetUniformdv
	, GLuint const, program
	, GLint const, location
	, GLdouble* const, params
	)

// GLint glGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar *name);
GD_DEFINE_OGL_METHOD_3(
	GLint, GetSubroutineUniformLocation
	, GLuint const, program
	, GLenum const, shadertype
	, const GLchar* const, name
	)

// GLuint glGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar *name);
GD_DEFINE_OGL_METHOD_3(
	GLuint, GetSubroutineIndex
	, GLuint const, program
	, GLenum const, shadertype
	, const GLchar* const, name
	)

// void glGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
GD_DEFINE_OGL_METHOD_5(
	void, GetActiveSubroutineUniformiv
	, GLuint const, program
	, GLenum const, shadertype
	, GLuint const, index
	, GLenum const, pname
	, GLint* const, values
	)

// void glGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
GD_DEFINE_OGL_METHOD_6(
	void, GetActiveSubroutineUniformName
	, GLuint const, program
	, GLenum const, shadertype
	, GLuint const, index
	, GLsizei const, bufsize
	, GLsizei* const, length
	, GLchar* const, name
	)

// void glGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
GD_DEFINE_OGL_METHOD_6(
	void, GetActiveSubroutineName
	, GLuint const, program
	, GLenum const, shadertype
	, GLuint const, index
	, GLsizei const, bufsize
	, GLsizei* const, length
	, GLchar* const, name
	)

// void glUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint *indices);
GD_DEFINE_OGL_METHOD_3(
	void, UniformSubroutinesuiv
	, GLenum const, shadertype
	, GLsizei const, count
	, const GLuint* const, indices
	)

// void glGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetUniformSubroutineuiv
	, GLenum const, shadertype
	, GLint const, location
	, GLuint* const, params
	)

// void glGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint *values);
GD_DEFINE_OGL_METHOD_4(
	void, GetProgramStageiv
	, GLuint const, program
	, GLenum const, shadertype
	, GLenum const, pname
	, GLint* const, values
	)

// void glPatchParameteri(GLenum pname, GLint value);
GD_DEFINE_OGL_METHOD_2(
	void, PatchParameteri
	, GLenum const, pname
	, GLint const, value
	)

// void glPatchParameterfv(GLenum pname, const GLfloat *values);
GD_DEFINE_OGL_METHOD_2(
	void, PatchParameterfv
	, GLenum const, pname
	, const GLfloat* const, values
	)

// void glBindTransformFeedback(GLenum target, GLuint id);
GD_DEFINE_OGL_METHOD_2(
	void, BindTransformFeedback
	, GLenum const, target
	, GLuint const, id
	)

// void glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids);
GD_DEFINE_OGL_METHOD_2(
	void, DeleteTransformFeedbacks
	, GLsizei const, n
	, const GLuint* const, ids
	)

// void glGenTransformFeedbacks(GLsizei n, GLuint *ids);
GD_DEFINE_OGL_METHOD_2(
	void, GenTransformFeedbacks
	, GLsizei const, n
	, GLuint* const, ids
	)

// GLboolean glIsTransformFeedback(GLuint id);
GD_DEFINE_OGL_METHOD_1(
	GLboolean, IsTransformFeedback
	, GLuint const, id
	)

// void glPauseTransformFeedback(void);
GD_DEFINE_OGL_METHOD_0(
	void, PauseTransformFeedback
	/**** NO ARGUMENTS ****/
	)

// void glResumeTransformFeedback(void);
GD_DEFINE_OGL_METHOD_0(
	void, ResumeTransformFeedback
	/**** NO ARGUMENTS ****/
	)

// void glDrawTransformFeedback(GLenum mode, GLuint id);
GD_DEFINE_OGL_METHOD_2(
	void, DrawTransformFeedback
	, GLenum const, mode
	, GLuint const, id
	)

// void glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream);
GD_DEFINE_OGL_METHOD_3(
	void, DrawTransformFeedbackStream
	, GLenum const, mode
	, GLuint const, id
	, GLuint const, stream
	)

// void glBeginQueryIndexed(GLenum target, GLuint index, GLuint id);
GD_DEFINE_OGL_METHOD_3(
	void, BeginQueryIndexed
	, GLenum const, target
	, GLuint const, index
	, GLuint const, id
	)

// void glEndQueryIndexed(GLenum target, GLuint index);
GD_DEFINE_OGL_METHOD_2(
	void, EndQueryIndexed
	, GLenum const, target
	, GLuint const, index
	)

// void glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_4(
	void, GetQueryIndexediv
	, GLenum const, target
	, GLuint const, index
	, GLenum const, pname
	, GLint* const, params
	)

// void glReleaseShaderCompiler(void);
GD_DEFINE_OGL_METHOD_0(
	void, ReleaseShaderCompiler
	/**** NO ARGUMENTS ****/
	)

// void glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length);
GD_DEFINE_OGL_METHOD_5(
	void, ShaderBinary
	, GLsizei const, count
	, const GLuint* const, shaders
	, GLenum const, binaryformat
	, const GLvoid* const, binary
	, GLsizei const, length
	)

// void glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
GD_DEFINE_OGL_METHOD_4(
	void, GetShaderPrecisionFormat
	, GLenum const, shadertype
	, GLenum const, precisiontype
	, GLint* const, range
	, GLint* const, precision
	)

// void glDepthRangef(GLfloat n, GLfloat f);
GD_DEFINE_OGL_METHOD_2(
	void, DepthRangef
	, GLfloat const, n
	, GLfloat const, f
	)

// void glClearDepthf(GLfloat d);
GD_DEFINE_OGL_METHOD_1(
	void, ClearDepthf
	, GLfloat const, d
	)

// void glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary);
GD_DEFINE_OGL_METHOD_5(
	void, GetProgramBinary
	, GLuint const, program
	, GLsizei const, bufSize
	, GLsizei* const, length
	, GLenum* const, binaryFormat
	, GLvoid* const, binary
	)

// void glProgramBinary(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramBinary
	, GLuint const, program
	, GLenum const, binaryFormat
	, const GLvoid* const, binary
	, GLsizei const, length
	)

// void glProgramParameteri(GLuint program, GLenum pname, GLint value);
GD_DEFINE_OGL_METHOD_3(
	void, ProgramParameteri
	, GLuint const, program
	, GLenum const, pname
	, GLint const, value
	)

// void glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program);
GD_DEFINE_OGL_METHOD_3(
	void, UseProgramStages
	, GLuint const, pipeline
	, GLbitfield const, stages
	, GLuint const, program
	)

// void glActiveShaderProgram(GLuint pipeline, GLuint program);
GD_DEFINE_OGL_METHOD_2(
	void, ActiveShaderProgram
	, GLuint const, pipeline
	, GLuint const, program
	)

// GLuint glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar* const *strings);
GD_DEFINE_OGL_METHOD_3(
	GLuint, CreateShaderProgramv
	, GLenum const, type
	, GLsizei const, count
	, const GLchar* const* const, strings
	)

// void glBindProgramPipeline(GLuint pipeline);
GD_DEFINE_OGL_METHOD_1(
	void, BindProgramPipeline
	, GLuint const, pipeline
	)

// void glDeleteProgramPipelines(GLsizei n, const GLuint *pipelines);
GD_DEFINE_OGL_METHOD_2(
	void, DeleteProgramPipelines
	, GLsizei const, n
	, const GLuint* const, pipelines
	)

// void glGenProgramPipelines(GLsizei n, GLuint *pipelines);
GD_DEFINE_OGL_METHOD_2(
	void, GenProgramPipelines
	, GLsizei const, n
	, GLuint* const, pipelines
	)

// GLboolean glIsProgramPipeline(GLuint pipeline);
GD_DEFINE_OGL_METHOD_1(
	GLboolean, IsProgramPipeline
	, GLuint const, pipeline
	)

// void glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetProgramPipelineiv
	, GLuint const, pipeline
	, GLenum const, pname
	, GLint* const, params
	)

// void glProgramUniform1i(GLuint program, GLint location, GLint v0);
GD_DEFINE_OGL_METHOD_3(
	void, ProgramUniform1i
	, GLuint const, program
	, GLint const, location
	, GLint const, v0
	)

// void glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramUniform1iv
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, const GLint* const, value
	)

// void glProgramUniform1f(GLuint program, GLint location, GLfloat v0);
GD_DEFINE_OGL_METHOD_3(
	void, ProgramUniform1f
	, GLuint const, program
	, GLint const, location
	, GLfloat const, v0
	)

// void glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramUniform1fv
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, const GLfloat* const, value
	)

// void glProgramUniform1d(GLuint program, GLint location, GLdouble v0);
GD_DEFINE_OGL_METHOD_3(
	void, ProgramUniform1d
	, GLuint const, program
	, GLint const, location
	, GLdouble const, v0
	)

// void glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramUniform1dv
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, const GLdouble* const, value
	)

// void glProgramUniform1ui(GLuint program, GLint location, GLuint v0);
GD_DEFINE_OGL_METHOD_3(
	void, ProgramUniform1ui
	, GLuint const, program
	, GLint const, location
	, GLuint const, v0
	)

// void glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramUniform1uiv
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, const GLuint* const, value
	)

// void glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramUniform2i
	, GLuint const, program
	, GLint const, location
	, GLint const, v0
	, GLint const, v1
	)

// void glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramUniform2iv
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, const GLint* const, value
	)

// void glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramUniform2f
	, GLuint const, program
	, GLint const, location
	, GLfloat const, v0
	, GLfloat const, v1
	)

// void glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramUniform2fv
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, const GLfloat* const, value
	)

// void glProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramUniform2d
	, GLuint const, program
	, GLint const, location
	, GLdouble const, v0
	, GLdouble const, v1
	)

// void glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramUniform2dv
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, const GLdouble* const, value
	)

// void glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramUniform2ui
	, GLuint const, program
	, GLint const, location
	, GLuint const, v0
	, GLuint const, v1
	)

// void glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramUniform2uiv
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, const GLuint* const, value
	)

// void glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
GD_DEFINE_OGL_METHOD_5(
	void, ProgramUniform3i
	, GLuint const, program
	, GLint const, location
	, GLint const, v0
	, GLint const, v1
	, GLint const, v2
	)

// void glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramUniform3iv
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, const GLint* const, value
	)

// void glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
GD_DEFINE_OGL_METHOD_5(
	void, ProgramUniform3f
	, GLuint const, program
	, GLint const, location
	, GLfloat const, v0
	, GLfloat const, v1
	, GLfloat const, v2
	)

// void glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramUniform3fv
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, const GLfloat* const, value
	)

// void glProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
GD_DEFINE_OGL_METHOD_5(
	void, ProgramUniform3d
	, GLuint const, program
	, GLint const, location
	, GLdouble const, v0
	, GLdouble const, v1
	, GLdouble const, v2
	)

// void glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramUniform3dv
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, const GLdouble* const, value
	)

// void glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
GD_DEFINE_OGL_METHOD_5(
	void, ProgramUniform3ui
	, GLuint const, program
	, GLint const, location
	, GLuint const, v0
	, GLuint const, v1
	, GLuint const, v2
	)

// void glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramUniform3uiv
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, const GLuint* const, value
	)

// void glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
GD_DEFINE_OGL_METHOD_6(
	void, ProgramUniform4i
	, GLuint const, program
	, GLint const, location
	, GLint const, v0
	, GLint const, v1
	, GLint const, v2
	, GLint const, v3
	)

// void glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramUniform4iv
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, const GLint* const, value
	)

// void glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
GD_DEFINE_OGL_METHOD_6(
	void, ProgramUniform4f
	, GLuint const, program
	, GLint const, location
	, GLfloat const, v0
	, GLfloat const, v1
	, GLfloat const, v2
	, GLfloat const, v3
	)

// void glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramUniform4fv
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, const GLfloat* const, value
	)

// void glProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
GD_DEFINE_OGL_METHOD_6(
	void, ProgramUniform4d
	, GLuint const, program
	, GLint const, location
	, GLdouble const, v0
	, GLdouble const, v1
	, GLdouble const, v2
	, GLdouble const, v3
	)

// void glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramUniform4dv
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, const GLdouble* const, value
	)

// void glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
GD_DEFINE_OGL_METHOD_6(
	void, ProgramUniform4ui
	, GLuint const, program
	, GLint const, location
	, GLuint const, v0
	, GLuint const, v1
	, GLuint const, v2
	, GLuint const, v3
	)

// void glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
GD_DEFINE_OGL_METHOD_4(
	void, ProgramUniform4uiv
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, const GLuint* const, value
	)

// void glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_5(
	void, ProgramUniformMatrix2fv
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_5(
	void, ProgramUniformMatrix3fv
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_5(
	void, ProgramUniformMatrix4fv
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GD_DEFINE_OGL_METHOD_5(
	void, ProgramUniformMatrix2dv
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLdouble* const, value
	)

// void glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GD_DEFINE_OGL_METHOD_5(
	void, ProgramUniformMatrix3dv
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLdouble* const, value
	)

// void glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GD_DEFINE_OGL_METHOD_5(
	void, ProgramUniformMatrix4dv
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLdouble* const, value
	)

// void glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_5(
	void, ProgramUniformMatrix2x3fv
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_5(
	void, ProgramUniformMatrix3x2fv
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_5(
	void, ProgramUniformMatrix2x4fv
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_5(
	void, ProgramUniformMatrix4x2fv
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_5(
	void, ProgramUniformMatrix3x4fv
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GD_DEFINE_OGL_METHOD_5(
	void, ProgramUniformMatrix4x3fv
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLfloat* const, value
	)

// void glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GD_DEFINE_OGL_METHOD_5(
	void, ProgramUniformMatrix2x3dv
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLdouble* const, value
	)

// void glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GD_DEFINE_OGL_METHOD_5(
	void, ProgramUniformMatrix3x2dv
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLdouble* const, value
	)

// void glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GD_DEFINE_OGL_METHOD_5(
	void, ProgramUniformMatrix2x4dv
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLdouble* const, value
	)

// void glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GD_DEFINE_OGL_METHOD_5(
	void, ProgramUniformMatrix4x2dv
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLdouble* const, value
	)

// void glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GD_DEFINE_OGL_METHOD_5(
	void, ProgramUniformMatrix3x4dv
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLdouble* const, value
	)

// void glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
GD_DEFINE_OGL_METHOD_5(
	void, ProgramUniformMatrix4x3dv
	, GLuint const, program
	, GLint const, location
	, GLsizei const, count
	, GLboolean const, transpose
	, const GLdouble* const, value
	)

// void glValidateProgramPipeline(GLuint pipeline);
GD_DEFINE_OGL_METHOD_1(
	void, ValidateProgramPipeline
	, GLuint const, pipeline
	)

// void glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
GD_DEFINE_OGL_METHOD_4(
	void, GetProgramPipelineInfoLog
	, GLuint const, pipeline
	, GLsizei const, bufSize
	, GLsizei* const, length
	, GLchar* const, infoLog
	)

// void glVertexAttribL1d(GLuint index, GLdouble x);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttribL1d
	, GLuint const, index
	, GLdouble const, x
	)

// void glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y);
GD_DEFINE_OGL_METHOD_3(
	void, VertexAttribL2d
	, GLuint const, index
	, GLdouble const, x
	, GLdouble const, y
	)

// void glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
GD_DEFINE_OGL_METHOD_4(
	void, VertexAttribL3d
	, GLuint const, index
	, GLdouble const, x
	, GLdouble const, y
	, GLdouble const, z
	)

// void glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GD_DEFINE_OGL_METHOD_5(
	void, VertexAttribL4d
	, GLuint const, index
	, GLdouble const, x
	, GLdouble const, y
	, GLdouble const, z
	, GLdouble const, w
	)

// void glVertexAttribL1dv(GLuint index, const GLdouble *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttribL1dv
	, GLuint const, index
	, const GLdouble* const, v
	)

// void glVertexAttribL2dv(GLuint index, const GLdouble *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttribL2dv
	, GLuint const, index
	, const GLdouble* const, v
	)

// void glVertexAttribL3dv(GLuint index, const GLdouble *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttribL3dv
	, GLuint const, index
	, const GLdouble* const, v
	)

// void glVertexAttribL4dv(GLuint index, const GLdouble *v);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttribL4dv
	, GLuint const, index
	, const GLdouble* const, v
	)

// void glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
GD_DEFINE_OGL_METHOD_5(
	void, VertexAttribLPointer
	, GLuint const, index
	, GLint const, size
	, GLenum const, type
	, GLsizei const, stride
	, const GLvoid* const, pointer
	)

// void glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetVertexAttribLdv
	, GLuint const, index
	, GLenum const, pname
	, GLdouble* const, params
	)

// void glViewportArrayv(GLuint first, GLsizei count, const GLfloat *v);
GD_DEFINE_OGL_METHOD_3(
	void, ViewportArrayv
	, GLuint const, first
	, GLsizei const, count
	, const GLfloat* const, v
	)

// void glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
GD_DEFINE_OGL_METHOD_5(
	void, ViewportIndexedf
	, GLuint const, index
	, GLfloat const, x
	, GLfloat const, y
	, GLfloat const, w
	, GLfloat const, h
	)

// void glViewportIndexedfv(GLuint index, const GLfloat *v);
GD_DEFINE_OGL_METHOD_2(
	void, ViewportIndexedfv
	, GLuint const, index
	, const GLfloat* const, v
	)

// void glScissorArrayv(GLuint first, GLsizei count, const GLint *v);
GD_DEFINE_OGL_METHOD_3(
	void, ScissorArrayv
	, GLuint const, first
	, GLsizei const, count
	, const GLint* const, v
	)

// void glScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
GD_DEFINE_OGL_METHOD_5(
	void, ScissorIndexed
	, GLuint const, index
	, GLint const, left
	, GLint const, bottom
	, GLsizei const, width
	, GLsizei const, height
	)

// void glScissorIndexedv(GLuint index, const GLint *v);
GD_DEFINE_OGL_METHOD_2(
	void, ScissorIndexedv
	, GLuint const, index
	, const GLint* const, v
	)

// void glDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble *v);
GD_DEFINE_OGL_METHOD_3(
	void, DepthRangeArrayv
	, GLuint const, first
	, GLsizei const, count
	, const GLdouble* const, v
	)

// void glDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f);
GD_DEFINE_OGL_METHOD_3(
	void, DepthRangeIndexed
	, GLuint const, index
	, GLdouble const, n
	, GLdouble const, f
	)

// void glGetFloati_v(GLenum target, GLuint index, GLfloat *data);
GD_DEFINE_OGL_METHOD_3(
	void, GetFloati_v
	, GLenum const, target
	, GLuint const, index
	, GLfloat* const, data
	)

// void glGetDoublei_v(GLenum target, GLuint index, GLdouble *data);
GD_DEFINE_OGL_METHOD_3(
	void, GetDoublei_v
	, GLenum const, target
	, GLuint const, index
	, GLdouble* const, data
	)

// GLsync glCreateSyncFromCLeventARB(struct _cl_context *context, struct _cl_event *event, GLbitfield flags);
GD_DEFINE_OGL_METHOD_3(
	GLsync, CreateSyncFromCLeventARB
	, struct _cl_context* const, context
	, struct _cl_event* const, event
	, GLbitfield const, flags
	)

// void glDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
GD_DEFINE_OGL_METHOD_6(
	void, DebugMessageControlARB
	, GLenum const, source
	, GLenum const, type
	, GLenum const, severity
	, GLsizei const, count
	, const GLuint* const, ids
	, GLboolean const, enabled
	)

// void glDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
GD_DEFINE_OGL_METHOD_6(
	void, DebugMessageInsertARB
	, GLenum const, source
	, GLenum const, type
	, GLuint const, id
	, GLenum const, severity
	, GLsizei const, length
	, const GLchar* const, buf
	)

// void glDebugMessageCallbackARB(GLDEBUGPROCARB callback, const GLvoid *userParam);
GD_DEFINE_OGL_METHOD_2(
	void, DebugMessageCallbackARB
	, GLDEBUGPROCARB const, callback
	, const GLvoid* const, userParam
	)

// GLuint glGetDebugMessageLogARB(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
GD_DEFINE_OGL_METHOD_8(
	GLuint, GetDebugMessageLogARB
	, GLuint const, count
	, GLsizei const, bufsize
	, GLenum* const, sources
	, GLenum* const, types
	, GLuint* const, ids
	, GLenum* const, severities
	, GLsizei* const, lengths
	, GLchar* const, messageLog
	)

// GLenum glGetGraphicsResetStatusARB(void);
GD_DEFINE_OGL_METHOD_0(
	GLenum, GetGraphicsResetStatusARB
	/**** NO ARGUMENTS ****/
	)

// void glGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img);
GD_DEFINE_OGL_METHOD_6(
	void, GetnTexImageARB
	, GLenum const, target
	, GLint const, level
	, GLenum const, format
	, GLenum const, type
	, GLsizei const, bufSize
	, GLvoid* const, img
	)

// void glReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data);
GD_DEFINE_OGL_METHOD_8(
	void, ReadnPixelsARB
	, GLint const, x
	, GLint const, y
	, GLsizei const, width
	, GLsizei const, height
	, GLenum const, format
	, GLenum const, type
	, GLsizei const, bufSize
	, GLvoid* const, data
	)

// void glGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, GLvoid *img);
GD_DEFINE_OGL_METHOD_4(
	void, GetnCompressedTexImageARB
	, GLenum const, target
	, GLint const, lod
	, GLsizei const, bufSize
	, GLvoid* const, img
	)

// void glGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
GD_DEFINE_OGL_METHOD_4(
	void, GetnUniformfvARB
	, GLuint const, program
	, GLint const, location
	, GLsizei const, bufSize
	, GLfloat* const, params
	)

// void glGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint *params);
GD_DEFINE_OGL_METHOD_4(
	void, GetnUniformivARB
	, GLuint const, program
	, GLint const, location
	, GLsizei const, bufSize
	, GLint* const, params
	)

// void glGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
GD_DEFINE_OGL_METHOD_4(
	void, GetnUniformuivARB
	, GLuint const, program
	, GLint const, location
	, GLsizei const, bufSize
	, GLuint* const, params
	)

// void glGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
GD_DEFINE_OGL_METHOD_4(
	void, GetnUniformdvARB
	, GLuint const, program
	, GLint const, location
	, GLsizei const, bufSize
	, GLdouble* const, params
	)

// void glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
GD_DEFINE_OGL_METHOD_5(
	void, DrawArraysInstancedBaseInstance
	, GLenum const, mode
	, GLint const, first
	, GLsizei const, count
	, GLsizei const, instancecount
	, GLuint const, baseinstance
	)

// void glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);
GD_DEFINE_OGL_METHOD_6(
	void, DrawElementsInstancedBaseInstance
	, GLenum const, mode
	, GLsizei const, count
	, GLenum const, type
	, const void* const, indices
	, GLsizei const, instancecount
	, GLuint const, baseinstance
	)

// void glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
GD_DEFINE_OGL_METHOD_7(
	void, DrawElementsInstancedBaseVertexBaseInstance
	, GLenum const, mode
	, GLsizei const, count
	, GLenum const, type
	, const void* const, indices
	, GLsizei const, instancecount
	, GLint const, basevertex
	, GLuint const, baseinstance
	)

// void glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount);
GD_DEFINE_OGL_METHOD_3(
	void, DrawTransformFeedbackInstanced
	, GLenum const, mode
	, GLuint const, id
	, GLsizei const, instancecount
	)

// void glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
GD_DEFINE_OGL_METHOD_4(
	void, DrawTransformFeedbackStreamInstanced
	, GLenum const, mode
	, GLuint const, id
	, GLuint const, stream
	, GLsizei const, instancecount
	)

// void glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);
GD_DEFINE_OGL_METHOD_5(
	void, GetInternalformativ
	, GLenum const, target
	, GLenum const, internalformat
	, GLenum const, pname
	, GLsizei const, bufSize
	, GLint* const, params
	)

// void glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_4(
	void, GetActiveAtomicCounterBufferiv
	, GLuint const, program
	, GLuint const, bufferIndex
	, GLenum const, pname
	, GLint* const, params
	)

// void glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
GD_DEFINE_OGL_METHOD_7(
	void, BindImageTexture
	, GLuint const, unit
	, GLuint const, texture
	, GLint const, level
	, GLboolean const, layered
	, GLint const, layer
	, GLenum const, access
	, GLenum const, format
	)

// void glMemoryBarrier(GLbitfield barriers);
GD_DEFINE_OGL_METHOD_1(
	void, MemoryBarrier
	, GLbitfield const, barriers
	)

// void glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
GD_DEFINE_OGL_METHOD_4(
	void, TexStorage1D
	, GLenum const, target
	, GLsizei const, levels
	, GLenum const, internalformat
	, GLsizei const, width
	)

// void glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
GD_DEFINE_OGL_METHOD_5(
	void, TexStorage2D
	, GLenum const, target
	, GLsizei const, levels
	, GLenum const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	)

// void glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
GD_DEFINE_OGL_METHOD_6(
	void, TexStorage3D
	, GLenum const, target
	, GLsizei const, levels
	, GLenum const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	, GLsizei const, depth
	)

// void glTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
GD_DEFINE_OGL_METHOD_5(
	void, TextureStorage1DEXT
	, GLuint const, texture
	, GLenum const, target
	, GLsizei const, levels
	, GLenum const, internalformat
	, GLsizei const, width
	)

// void glTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
GD_DEFINE_OGL_METHOD_6(
	void, TextureStorage2DEXT
	, GLuint const, texture
	, GLenum const, target
	, GLsizei const, levels
	, GLenum const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	)

// void glTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
GD_DEFINE_OGL_METHOD_7(
	void, TextureStorage3DEXT
	, GLuint const, texture
	, GLenum const, target
	, GLsizei const, levels
	, GLenum const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	, GLsizei const, depth
	)

// void glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
GD_DEFINE_OGL_METHOD_6(
	void, DebugMessageControl
	, GLenum const, source
	, GLenum const, type
	, GLenum const, severity
	, GLsizei const, count
	, const GLuint* const, ids
	, GLboolean const, enabled
	)

// void glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
GD_DEFINE_OGL_METHOD_6(
	void, DebugMessageInsert
	, GLenum const, source
	, GLenum const, type
	, GLuint const, id
	, GLenum const, severity
	, GLsizei const, length
	, const GLchar* const, buf
	)

// void glDebugMessageCallback(GLDEBUGPROC callback, const void *userParam);
GD_DEFINE_OGL_METHOD_2(
	void, DebugMessageCallback
	, GLDEBUGPROC const, callback
	, const void* const, userParam
	)

// GLuint glGetDebugMessageLog(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
GD_DEFINE_OGL_METHOD_8(
	GLuint, GetDebugMessageLog
	, GLuint const, count
	, GLsizei const, bufsize
	, GLenum* const, sources
	, GLenum* const, types
	, GLuint* const, ids
	, GLenum* const, severities
	, GLsizei* const, lengths
	, GLchar* const, messageLog
	)

// void glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message);
GD_DEFINE_OGL_METHOD_4(
	void, PushDebugGroup
	, GLenum const, source
	, GLuint const, id
	, GLsizei const, length
	, const GLchar* const, message
	)

// void glPopDebugGroup(void);
GD_DEFINE_OGL_METHOD_0(
	void, PopDebugGroup
	/**** NO ARGUMENTS ****/
	)

// void glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
GD_DEFINE_OGL_METHOD_4(
	void, ObjectLabel
	, GLenum const, identifier
	, GLuint const, name
	, GLsizei const, length
	, const GLchar* const, label
	)

// void glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
GD_DEFINE_OGL_METHOD_5(
	void, GetObjectLabel
	, GLenum const, identifier
	, GLuint const, name
	, GLsizei const, bufSize
	, GLsizei* const, length
	, GLchar* const, label
	)

// void glObjectPtrLabel(const void *ptr, GLsizei length, const GLchar *label);
GD_DEFINE_OGL_METHOD_3(
	void, ObjectPtrLabel
	, const void* const, ptr
	, GLsizei const, length
	, const GLchar* const, label
	)

// void glGetObjectPtrLabel(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
GD_DEFINE_OGL_METHOD_4(
	void, GetObjectPtrLabel
	, const void* const, ptr
	, GLsizei const, bufSize
	, GLsizei* const, length
	, GLchar* const, label
	)

// void glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);
GD_DEFINE_OGL_METHOD_5(
	void, ClearBufferData
	, GLenum const, target
	, GLenum const, internalformat
	, GLenum const, format
	, GLenum const, type
	, const void* const, data
	)

// void glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
GD_DEFINE_OGL_METHOD_7(
	void, ClearBufferSubData
	, GLenum const, target
	, GLenum const, internalformat
	, GLintptr const, offset
	, GLsizeiptr const, size
	, GLenum const, format
	, GLenum const, type
	, const void* const, data
	)

// void glClearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
GD_DEFINE_OGL_METHOD_5(
	void, ClearNamedBufferDataEXT
	, GLuint const, buffer
	, GLenum const, internalformat
	, GLenum const, format
	, GLenum const, type
	, const void* const, data
	)

// void glClearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, GLsizeiptr offset, GLsizeiptr size, const void *data);
GD_DEFINE_OGL_METHOD_7(
	void, ClearNamedBufferSubDataEXT
	, GLuint const, buffer
	, GLenum const, internalformat
	, GLenum const, format
	, GLenum const, type
	, GLsizeiptr const, offset
	, GLsizeiptr const, size
	, const void* const, data
	)

// void glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
GD_DEFINE_OGL_METHOD_3(
	void, DispatchCompute
	, GLuint const, num_groups_x
	, GLuint const, num_groups_y
	, GLuint const, num_groups_z
	)

// void glDispatchComputeIndirect(GLintptr indirect);
GD_DEFINE_OGL_METHOD_1(
	void, DispatchComputeIndirect
	, GLintptr const, indirect
	)

// void glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
// ***** SKIPPED DUE ARGUMENTS COUNT LIMITATION *****

// void glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
GD_DEFINE_OGL_METHOD_8(
	void, TextureView
	, GLuint const, texture
	, GLenum const, target
	, GLuint const, origtexture
	, GLenum const, internalformat
	, GLuint const, minlevel
	, GLuint const, numlevels
	, GLuint const, minlayer
	, GLuint const, numlayers
	)

// void glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
GD_DEFINE_OGL_METHOD_4(
	void, BindVertexBuffer
	, GLuint const, bindingindex
	, GLuint const, buffer
	, GLintptr const, offset
	, GLsizei const, stride
	)

// void glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
GD_DEFINE_OGL_METHOD_5(
	void, VertexAttribFormat
	, GLuint const, attribindex
	, GLint const, size
	, GLenum const, type
	, GLboolean const, normalized
	, GLuint const, relativeoffset
	)

// void glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
GD_DEFINE_OGL_METHOD_4(
	void, VertexAttribIFormat
	, GLuint const, attribindex
	, GLint const, size
	, GLenum const, type
	, GLuint const, relativeoffset
	)

// void glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
GD_DEFINE_OGL_METHOD_4(
	void, VertexAttribLFormat
	, GLuint const, attribindex
	, GLint const, size
	, GLenum const, type
	, GLuint const, relativeoffset
	)

// void glVertexAttribBinding(GLuint attribindex, GLuint bindingindex);
GD_DEFINE_OGL_METHOD_2(
	void, VertexAttribBinding
	, GLuint const, attribindex
	, GLuint const, bindingindex
	)

// void glVertexBindingDivisor(GLuint bindingindex, GLuint divisor);
GD_DEFINE_OGL_METHOD_2(
	void, VertexBindingDivisor
	, GLuint const, bindingindex
	, GLuint const, divisor
	)

// void glVertexArrayBindVertexBufferEXT(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
GD_DEFINE_OGL_METHOD_5(
	void, VertexArrayBindVertexBufferEXT
	, GLuint const, vaobj
	, GLuint const, bindingindex
	, GLuint const, buffer
	, GLintptr const, offset
	, GLsizei const, stride
	)

// void glVertexArrayVertexAttribFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
GD_DEFINE_OGL_METHOD_6(
	void, VertexArrayVertexAttribFormatEXT
	, GLuint const, vaobj
	, GLuint const, attribindex
	, GLint const, size
	, GLenum const, type
	, GLboolean const, normalized
	, GLuint const, relativeoffset
	)

// void glVertexArrayVertexAttribIFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
GD_DEFINE_OGL_METHOD_5(
	void, VertexArrayVertexAttribIFormatEXT
	, GLuint const, vaobj
	, GLuint const, attribindex
	, GLint const, size
	, GLenum const, type
	, GLuint const, relativeoffset
	)

// void glVertexArrayVertexAttribLFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
GD_DEFINE_OGL_METHOD_5(
	void, VertexArrayVertexAttribLFormatEXT
	, GLuint const, vaobj
	, GLuint const, attribindex
	, GLint const, size
	, GLenum const, type
	, GLuint const, relativeoffset
	)

// void glVertexArrayVertexAttribBindingEXT(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
GD_DEFINE_OGL_METHOD_3(
	void, VertexArrayVertexAttribBindingEXT
	, GLuint const, vaobj
	, GLuint const, attribindex
	, GLuint const, bindingindex
	)

// void glVertexArrayVertexBindingDivisorEXT(GLuint vaobj, GLuint bindingindex, GLuint divisor);
GD_DEFINE_OGL_METHOD_3(
	void, VertexArrayVertexBindingDivisorEXT
	, GLuint const, vaobj
	, GLuint const, bindingindex
	, GLuint const, divisor
	)

// void glFramebufferParameteri(GLenum target, GLenum pname, GLint param);
GD_DEFINE_OGL_METHOD_3(
	void, FramebufferParameteri
	, GLenum const, target
	, GLenum const, pname
	, GLint const, param
	)

// void glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetFramebufferParameteriv
	, GLenum const, target
	, GLenum const, pname
	, GLint* const, params
	)

// void glNamedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param);
GD_DEFINE_OGL_METHOD_3(
	void, NamedFramebufferParameteriEXT
	, GLuint const, framebuffer
	, GLenum const, pname
	, GLint const, param
	)

// void glGetNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_3(
	void, GetNamedFramebufferParameterivEXT
	, GLuint const, framebuffer
	, GLenum const, pname
	, GLint* const, params
	)

// void glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params);
GD_DEFINE_OGL_METHOD_5(
	void, GetInternalformati64v
	, GLenum const, target
	, GLenum const, internalformat
	, GLenum const, pname
	, GLsizei const, bufSize
	, GLint64* const, params
	)

// void glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
GD_DEFINE_OGL_METHOD_8(
	void, InvalidateTexSubImage
	, GLuint const, texture
	, GLint const, level
	, GLint const, xoffset
	, GLint const, yoffset
	, GLint const, zoffset
	, GLsizei const, width
	, GLsizei const, height
	, GLsizei const, depth
	)

// void glInvalidateTexImage(GLuint texture, GLint level);
GD_DEFINE_OGL_METHOD_2(
	void, InvalidateTexImage
	, GLuint const, texture
	, GLint const, level
	)

// void glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length);
GD_DEFINE_OGL_METHOD_3(
	void, InvalidateBufferSubData
	, GLuint const, buffer
	, GLintptr const, offset
	, GLsizeiptr const, length
	)

// void glInvalidateBufferData(GLuint buffer);
GD_DEFINE_OGL_METHOD_1(
	void, InvalidateBufferData
	, GLuint const, buffer
	)

// void glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments);
GD_DEFINE_OGL_METHOD_3(
	void, InvalidateFramebuffer
	, GLenum const, target
	, GLsizei const, numAttachments
	, const GLenum* const, attachments
	)

// void glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
GD_DEFINE_OGL_METHOD_7(
	void, InvalidateSubFramebuffer
	, GLenum const, target
	, GLsizei const, numAttachments
	, const GLenum* const, attachments
	, GLint const, x
	, GLint const, y
	, GLsizei const, width
	, GLsizei const, height
	)

// void glMultiDrawArraysIndirect(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);
GD_DEFINE_OGL_METHOD_4(
	void, MultiDrawArraysIndirect
	, GLenum const, mode
	, const void* const, indirect
	, GLsizei const, drawcount
	, GLsizei const, stride
	)

// void glMultiDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);
GD_DEFINE_OGL_METHOD_5(
	void, MultiDrawElementsIndirect
	, GLenum const, mode
	, GLenum const, type
	, const void* const, indirect
	, GLsizei const, drawcount
	, GLsizei const, stride
	)

// void glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params);
GD_DEFINE_OGL_METHOD_4(
	void, GetProgramInterfaceiv
	, GLuint const, program
	, GLenum const, programInterface
	, GLenum const, pname
	, GLint* const, params
	)

// GLuint glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name);
GD_DEFINE_OGL_METHOD_3(
	GLuint, GetProgramResourceIndex
	, GLuint const, program
	, GLenum const, programInterface
	, const GLchar* const, name
	)

// void glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
GD_DEFINE_OGL_METHOD_6(
	void, GetProgramResourceName
	, GLuint const, program
	, GLenum const, programInterface
	, GLuint const, index
	, GLsizei const, bufSize
	, GLsizei* const, length
	, GLchar* const, name
	)

// void glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params);
GD_DEFINE_OGL_METHOD_8(
	void, GetProgramResourceiv
	, GLuint const, program
	, GLenum const, programInterface
	, GLuint const, index
	, GLsizei const, propCount
	, const GLenum* const, props
	, GLsizei const, bufSize
	, GLsizei* const, length
	, GLint* const, params
	)

// GLint glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name);
GD_DEFINE_OGL_METHOD_3(
	GLint, GetProgramResourceLocation
	, GLuint const, program
	, GLenum const, programInterface
	, const GLchar* const, name
	)

// GLint glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar *name);
GD_DEFINE_OGL_METHOD_3(
	GLint, GetProgramResourceLocationIndex
	, GLuint const, program
	, GLenum const, programInterface
	, const GLchar* const, name
	)

// void glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
GD_DEFINE_OGL_METHOD_3(
	void, ShaderStorageBlockBinding
	, GLuint const, program
	, GLuint const, storageBlockIndex
	, GLuint const, storageBlockBinding
	)

// void glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
GD_DEFINE_OGL_METHOD_5(
	void, TexBufferRange
	, GLenum const, target
	, GLenum const, internalformat
	, GLuint const, buffer
	, GLintptr const, offset
	, GLsizeiptr const, size
	)

// void glTextureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
GD_DEFINE_OGL_METHOD_6(
	void, TextureBufferRangeEXT
	, GLuint const, texture
	, GLenum const, target
	, GLenum const, internalformat
	, GLuint const, buffer
	, GLintptr const, offset
	, GLsizeiptr const, size
	)

// void glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
GD_DEFINE_OGL_METHOD_6(
	void, TexStorage2DMultisample
	, GLenum const, target
	, GLsizei const, samples
	, GLenum const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	, GLboolean const, fixedsamplelocations
	)

// void glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
GD_DEFINE_OGL_METHOD_7(
	void, TexStorage3DMultisample
	, GLenum const, target
	, GLsizei const, samples
	, GLenum const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	, GLsizei const, depth
	, GLboolean const, fixedsamplelocations
	)

// void glTextureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
GD_DEFINE_OGL_METHOD_7(
	void, TextureStorage2DMultisampleEXT
	, GLuint const, texture
	, GLenum const, target
	, GLsizei const, samples
	, GLenum const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	, GLboolean const, fixedsamplelocations
	)

// void glTextureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
GD_DEFINE_OGL_METHOD_8(
	void, TextureStorage3DMultisampleEXT
	, GLuint const, texture
	, GLenum const, target
	, GLsizei const, samples
	, GLenum const, internalformat
	, GLsizei const, width
	, GLsizei const, height
	, GLsizei const, depth
	, GLboolean const, fixedsamplelocations
	)
#endif	// if (defined(GD_HRI_OGL_ES))

#if (defined(GD_PLATFORM_WINAPI))
#	pragma pop_macro("MemoryBarrier")
#	pragma pop_macro("near")
#	pragma pop_macro("far")
#endif	// if (defined(GD_PLATFORM_WINAPI))

#undef GD_DEFINE_OGL_METHOD
#undef GD_DEFINE_OGL_METHOD_0
#undef GD_DEFINE_OGL_METHOD_1
#undef GD_DEFINE_OGL_METHOD_2
#undef GD_DEFINE_OGL_METHOD_3
#undef GD_DEFINE_OGL_METHOD_4
#undef GD_DEFINE_OGL_METHOD_5
#undef GD_DEFINE_OGL_METHOD_6
#undef GD_DEFINE_OGL_METHOD_7
#undef GD_DEFINE_OGL_METHOD_8
#undef GD_DEFINE_OGL_METHOD_9
#undef GD_DEFINE_OGL_METHOD_10
#undef GD_DEFINE_OGL_METHOD_11
#undef GD_DEFINE_OGL_METHOD_GLUE_ARGS
