<?xml version="1.0" encoding="utf-8"?>
<!--
##########################################################################
# GoddamnTemplateLibrary.natvis Visual Studio native visualizer helper.
# Copyright (C) $(GODDAMN_DEV) 2011 - Present. All Rights Reserved.
#
# History:
#     * 12.06.2014 - Created by James Jhuighuy.
##########################################################################
-->
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
  <!-- 
  ##########################################################################
  Template library. Containers, etc.
  ##########################################################################
  -->
  <!-- String class -->
	<Type Name="Goddamn::BaseString&lt;*&gt;">
    <DisplayString Condition="StringSize &gt;= StringMaxHeapSize">{StringHeapPointer}</DisplayString>
    <DisplayString Condition="StringSize &lt; StringMaxHeapSize">{&amp;StringStackArray[0]}</DisplayString>
    <StringView Condition="StringSize &gt;= StringMaxHeapSize">StringHeapPointer</StringView>
    <StringView Condition="StringSize &lt; StringMaxHeapSize">&amp;StringStackArray[0]</StringView>
		<Expand>
			<Item Name="Length">StringSize</Item>
			<ArrayItems>
        <Size>StringSize</Size>
        <ValuePointer Condition="StringSize &gt;= StringMaxHeapSize">StringHeapPointer</ValuePointer>
        <ValuePointer Condition="StringSize &lt; StringMaxHeapSize">&amp;StringStackArray[0]</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>
	<!-- Vector class -->
	<Type Name="Goddamn::Vector&lt;*&gt;">
		<DisplayString>{{ Count = {Count} }}</DisplayString>
		<Expand>
			<Item Name="Size">Count</Item>
			<Item Name="Capacity">MemoryProviderInstance.Capacity</Item>
			<ArrayItems>
				<Size>Count</Size>
				<ValuePointer>MemoryProviderInstance.Memory</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>
	<!-- UniquePtr class -->
	<Type Name="Goddamn::UniquePtr&lt;*&gt;">
    <DisplayString Condition="Pointer == 0">Empty</DisplayString>
    <DisplayString Condition="Pointer != 0">{*Pointer}</DisplayString>
    <Expand>
      <Item Condition="Pointer != 0" Name="Pointer">Pointer</Item>
    </Expand>
	</Type>
  <!-- SharedPtr class -->
  <Type Name="Goddamn::SharedPtr&lt;*&gt;">
    <DisplayString Condition="Pointer == 0">Empty</DisplayString>
    <DisplayString Condition="Pointer != 0">{*Pointer}</DisplayString>
    <Expand>
      <Item Condition="Pointer != 0" Name="Pointer">Pointer</Item>
      <Item Condition="Pointer != 0" Name="Reference counter">*ReferenceCount</Item>
    </Expand>
  </Type>
  <!-- RefPtr class -->
  <Type Name="Goddamn::RefPtr&lt;*&gt;">
    <DisplayString Condition="Pointer == 0">Empty</DisplayString>
    <DisplayString Condition="Pointer != 0">{*Pointer}</DisplayString>
    <Expand>
      <Item Condition="Pointer != 0" Name="Pointer">Pointer</Item>
      <Item Condition="Pointer != 0" Name="Reference counter">Pointer->ReferenceCount</Item>
    </Expand>
  </Type>
  <!-- 
  ##########################################################################
  Math library. Vectors, matrices, etc.
  ##########################################################################
  -->
  <!-- Vector2 class -->
  <Type Name="Goddamn::Vector2t&lt;*&gt;">
    <DisplayString>X: {x} Y: {y}</DisplayString>
    <Expand>
      <Item Name="X">x</Item>
      <Item Name="Y">y</Item>
    </Expand>
  </Type>
  <!-- Vector3 class -->
  <Type Name="Goddamn::Vector3t&lt;*&gt;">
    <DisplayString>X: {x} Y: {y} Z: {z}</DisplayString>
    <Expand>
      <Item Name="X">x</Item>
      <Item Name="Y">y</Item>
      <Item Name="Z">z</Item>
    </Expand>
  </Type>
  <!-- Vector4 class -->
  <Type Name="Goddamn::Vector4t&lt;*&gt;">
    <DisplayString>X: {x} Y: {y} Z: {z} W: {w}</DisplayString>
    <Expand>
      <Item Name="X">x</Item>
      <Item Name="Y">y</Item>
      <Item Name="Z">z</Item>
      <Item Name="W">w</Item>
    </Expand>
  </Type>
  <!-- Matrix3x3 class -->
  <!-- Matrix3x4 class -->
  <!-- Matrix4x3 class -->
  <!-- Matrix4x4 class -->
  <Type Name="Goddamn::Matrix4x4t&lt;*&gt;">
    <DisplayString>{_0}, {_1}, {_2}, {_3}</DisplayString>
    <Expand>
      <Item Name="Row 0">_0</Item>
      <Item Name="Row 1">_1</Item>
      <Item Name="Row 2">_2</Item>
      <Item Name="Row 3">_3</Item>
     </Expand>
  </Type>
</AutoVisualizer>
