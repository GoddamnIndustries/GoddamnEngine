#ifndef GD_CORE_FORMAT_FORMAT_SELECTOR
#define GD_CORE_FORMAT_FORMAT_SELECTOR

#include <GoddamnEngine/Include.hh>
#include <GoddamnEngine/Core/Math/Vector3.hh>
#include <GoddamnEngine/Core/Math/Vector4.hh>
#include <GoddamnEngine/Core/Format/Format.hh>

#define GD_SPECIFY_FORMAT_SELECTOR(Type, FormatDecl) \
	template<> struct FormatTypeSelector<Type               > final { static Format const SpecifiedFormat = FormatDecl; }; \
	template<> struct FormatTypeSelector<Type          const> final { static Format const SpecifiedFormat = FormatDecl; }; \
	template<> struct FormatTypeSelector<Type volatile      > final { static Format const SpecifiedFormat = FormatDecl; }; \
	template<> struct FormatTypeSelector<Type volatile const> final { static Format const SpecifiedFormat = FormatDecl; };

GD_NAMESPACE_BEGIN

	template<class FormatType>
	struct FormatTypeSelector final 
	{
		static Format const SpecifiedFormat = GD_FORMAT_UNKNOWN;
	};	// struct FormatTypeSelector

	GD_SPECIFY_FORMAT_SELECTOR(Int8,  GD_FORMAT_R8_SINT);
	GD_SPECIFY_FORMAT_SELECTOR(Int16, GD_FORMAT_R16_SINT);
	GD_SPECIFY_FORMAT_SELECTOR(Int32, GD_FORMAT_R32_SINT);
	GD_SPECIFY_FORMAT_SELECTOR(Int64, GD_FORMAT_R64_SINT);

	GD_SPECIFY_FORMAT_SELECTOR( Int8x2, GD_FORMAT_R8G8_SINT);
	GD_SPECIFY_FORMAT_SELECTOR(Int16x2, GD_FORMAT_R16G16_SINT);
	GD_SPECIFY_FORMAT_SELECTOR(Int32x2, GD_FORMAT_R32G32_SINT);
	GD_SPECIFY_FORMAT_SELECTOR(Int64x2, GD_FORMAT_R64G64_SINT);

	GD_SPECIFY_FORMAT_SELECTOR( Int8x3, GD_FORMAT_R8G8B8_SINT);
	GD_SPECIFY_FORMAT_SELECTOR(Int16x3, GD_FORMAT_R16G16B16_SINT);
	GD_SPECIFY_FORMAT_SELECTOR(Int32x3, GD_FORMAT_R32G32B32_SINT);
	GD_SPECIFY_FORMAT_SELECTOR(Int64x3, GD_FORMAT_R64G64B64_SINT);

	GD_SPECIFY_FORMAT_SELECTOR( Int8x4,	GD_FORMAT_R8G8B8A8_SINT);
	GD_SPECIFY_FORMAT_SELECTOR(Int16x4,	GD_FORMAT_R16G16B16A16_SINT);
	GD_SPECIFY_FORMAT_SELECTOR(Int32x4,	GD_FORMAT_R32G32B32A32_SINT);
	GD_SPECIFY_FORMAT_SELECTOR(Int64x4,	GD_FORMAT_R64G64B64A64_SINT);

	GD_SPECIFY_FORMAT_SELECTOR( UInt8, GD_FORMAT_R8_UINT);
	GD_SPECIFY_FORMAT_SELECTOR(UInt16, GD_FORMAT_R16_UINT);
	GD_SPECIFY_FORMAT_SELECTOR(UInt32, GD_FORMAT_R32_UINT);
	GD_SPECIFY_FORMAT_SELECTOR(UInt64, GD_FORMAT_R64_UINT);

	GD_SPECIFY_FORMAT_SELECTOR( UInt8x2, GD_FORMAT_R8G8_UINT);
	GD_SPECIFY_FORMAT_SELECTOR(UInt16x2, GD_FORMAT_R16G16_UINT);
	GD_SPECIFY_FORMAT_SELECTOR(UInt32x2, GD_FORMAT_R32G32_UINT);
	GD_SPECIFY_FORMAT_SELECTOR(UInt64x2, GD_FORMAT_R64G64_UINT);

	GD_SPECIFY_FORMAT_SELECTOR( UInt8x3, GD_FORMAT_R8G8B8_UINT);
	GD_SPECIFY_FORMAT_SELECTOR(UInt16x3, GD_FORMAT_R16G16B16_UINT);
	GD_SPECIFY_FORMAT_SELECTOR(UInt32x3, GD_FORMAT_R32G32B32_UINT);
	GD_SPECIFY_FORMAT_SELECTOR(UInt64x3, GD_FORMAT_R64G64B64_UINT);

	GD_SPECIFY_FORMAT_SELECTOR( UInt8x4, GD_FORMAT_R8G8B8A8_UINT);
	GD_SPECIFY_FORMAT_SELECTOR(UInt16x4, GD_FORMAT_R16G16B16A16_UINT);
	GD_SPECIFY_FORMAT_SELECTOR(UInt32x4, GD_FORMAT_R32G32B32A32_UINT);
	GD_SPECIFY_FORMAT_SELECTOR(UInt64x4, GD_FORMAT_R64G64B64A64_UINT);

	GD_SPECIFY_FORMAT_SELECTOR( Float8, GD_FORMAT_R8_FLOAT);
	GD_SPECIFY_FORMAT_SELECTOR(Float16, GD_FORMAT_R16_FLOAT);
	GD_SPECIFY_FORMAT_SELECTOR(Float32, GD_FORMAT_R32_FLOAT);
	GD_SPECIFY_FORMAT_SELECTOR(Float64, GD_FORMAT_R64_FLOAT);

//	GD_SPECIFY_FORMAT_SELECTOR( Float8x2, GD_FORMAT_R8G8_FLOAT);
//	GD_SPECIFY_FORMAT_SELECTOR(Float16x2, GD_FORMAT_R16G16_FLOAT);
	GD_SPECIFY_FORMAT_SELECTOR(Float32x2, GD_FORMAT_R32G32_FLOAT);
	GD_SPECIFY_FORMAT_SELECTOR(Float64x2, GD_FORMAT_R64G64_FLOAT);

//	GD_SPECIFY_FORMAT_SELECTOR( Float8x3, GD_FORMAT_R8G8B8_FLOAT);
//	GD_SPECIFY_FORMAT_SELECTOR(Float16x3, GD_FORMAT_R16G16B16_FLOAT);
	GD_SPECIFY_FORMAT_SELECTOR(Float32x3, GD_FORMAT_R32G32B32_FLOAT);
	GD_SPECIFY_FORMAT_SELECTOR(Float64x3, GD_FORMAT_R64G64B64_FLOAT);

//	GD_SPECIFY_FORMAT_SELECTOR( Float8x4, GD_FORMAT_R8G8B8A8_FLOAT);
//	GD_SPECIFY_FORMAT_SELECTOR(Float16x4, GD_FORMAT_R16G16B16A16_FLOAT);
	GD_SPECIFY_FORMAT_SELECTOR(Float32x4, GD_FORMAT_R32G32B32A32_FLOAT);
	GD_SPECIFY_FORMAT_SELECTOR(Float64x4, GD_FORMAT_R64G64B64A64_FLOAT);

GD_NAMESPACE_END

#undef GD_SPECIFY_FORMAT_SELECTOR
#endif
