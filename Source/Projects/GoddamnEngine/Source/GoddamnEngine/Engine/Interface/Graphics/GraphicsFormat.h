// ==========================================================================================
// Copyright (C) Goddamn Industries 2018. All Rights Reserved.
// 
// This software or any its part is distributed under terms of Goddamn Industries End User
// License Agreement. By downloading or using this software or any its part you agree with 
// terms of Goddamn Industries End User License Agreement.
// ==========================================================================================

/*!
 * @file GoddamnEngine/Engine/Interface/Graphics/GraphicsFormat.h
 * File contains enumeration with all supported formats for the IGraphics interface.
 */
#pragma once

#include <GoddamnEngine/Include.h>

GD_NAMESPACE_BEGIN

	/*!
	 * Defines a type of the components inside the format value.
	 */
	enum IGraphicsFormatType : UInt8
	{
		IGRAPHICS_FORMAT_TYPE_INT8,
		IGRAPHICS_FORMAT_TYPE_UINT8,
		IGRAPHICS_FORMAT_TYPE_INT16,
		IGRAPHICS_FORMAT_TYPE_UINT16,
		IGRAPHICS_FORMAT_TYPE_INT32,
		IGRAPHICS_FORMAT_TYPE_UINT32,
		IGRAPHICS_FORMAT_TYPE_NORM8,
		IGRAPHICS_FORMAT_TYPE_UNORM8,
		IGRAPHICS_FORMAT_TYPE_NORM16,
		IGRAPHICS_FORMAT_TYPE_UNORM16,
		IGRAPHICS_FORMAT_TYPE_NORM32,
		IGRAPHICS_FORMAT_TYPE_UNORM32,
		IGRAPHICS_FORMAT_TYPE_FLOAT32,
		IGRAPHICS_FORMAT_TYPE_FLOAT64,
		IGRAPHICS_FORMAT_TYPE_UNKNOWN,
		IGRAPHICS_FORMAT_TYPES_COUNT,
	};	// enum IGraphicsFormatType

	/*!
	 * Defines the layout of the components inside the format value.
	 * The integer value of the enumeration value also was managed to represent the amount of the
	 * components inside the layout.
	 */
	enum IGraphicsFormatLayout : UInt8
	{
		IGRAPHICS_FORMAT_LAYOUT_DEPTH,
		IGRAPHICS_FORMAT_LAYOUT_R,
		IGRAPHICS_FORMAT_LAYOUT_RG,
		IGRAPHICS_FORMAT_LAYOUT_RGB,
		IGRAPHICS_FORMAT_LAYOUT_RGBA,
		IGRAPHICS_FORMAT_LAYOUT_UNKNOWN,
		IGRAPHICS_FORMAT_LAYOUTS_COUNT,
	};	// enum IGraphicsFormatLayout

	/*!
	 * Defines a format with specified types.
	 * @param Layout Layout of the format elements.
	 * @param Type Type of the format elements.
	 */
	//! @{
#define GD_IGRAPHICS_FORMAT(Layout, Type) ((__COUNTER__ - IGraphicsFormatCounterBase) & 0xFF) | ((Layout & 0xFF) << 8) | ((Type & 0xFF) << 16)
#if !GD_DOCUMENTATION
	UInt32 static const IGraphicsFormatCounterBase = __COUNTER__;
#endif	// if !GD_DOCUMENTATION
	//! @}

	/*!
	 * Defines a list of formats that IGraphics subsystem supports.
	 * Value of this enumeration are not contagious - use special macros to convert the enum value into index.
	 */
	enum IGraphicsFormat : UInt32
	{
		// ..Generic formats..
		// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		IGRAPHICS_FORMAT_R32G32B32A32_FLOAT = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RGBA , IGRAPHICS_FORMAT_TYPE_FLOAT32),
		IGRAPHICS_FORMAT_R32G32B32A32_UINT  = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RGBA , IGRAPHICS_FORMAT_TYPE_UINT32),
		IGRAPHICS_FORMAT_R32G32B32A32_SINT  = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RGBA , IGRAPHICS_FORMAT_TYPE_INT32),
		IGRAPHICS_FORMAT_R32G32B32_FLOAT    = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RGB  , IGRAPHICS_FORMAT_TYPE_FLOAT32),
		IGRAPHICS_FORMAT_R32G32B32_UINT     = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RGB  , IGRAPHICS_FORMAT_TYPE_UINT32),
		IGRAPHICS_FORMAT_R32G32B32_SINT     = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RGB  , IGRAPHICS_FORMAT_TYPE_INT32),
		IGRAPHICS_FORMAT_R32G32_FLOAT       = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RG   , IGRAPHICS_FORMAT_TYPE_FLOAT32),
		IGRAPHICS_FORMAT_R32G32_UINT        = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RG   , IGRAPHICS_FORMAT_TYPE_UINT32),
		IGRAPHICS_FORMAT_R32G32_SINT        = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RG   , IGRAPHICS_FORMAT_TYPE_INT32),
		IGRAPHICS_FORMAT_R32_FLOAT          = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_R    , IGRAPHICS_FORMAT_TYPE_FLOAT32),
		IGRAPHICS_FORMAT_R32_UINT           = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_R    , IGRAPHICS_FORMAT_TYPE_UINT32),
		IGRAPHICS_FORMAT_R32_SINT           = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_R    , IGRAPHICS_FORMAT_TYPE_INT32),
	//	IGRAPHICS_FORMAT_R16G16B16A16_FLOAT = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RGBA , IGRAPHICS_FORMAT_TYPE_FLOAT16),
		IGRAPHICS_FORMAT_R16G16B16A16_UNORM = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RGBA , IGRAPHICS_FORMAT_TYPE_UNORM16),
		IGRAPHICS_FORMAT_R16G16B16A16_NORM  = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RGBA , IGRAPHICS_FORMAT_TYPE_NORM16),
		IGRAPHICS_FORMAT_R16G16B16A16_UINT  = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RGBA , IGRAPHICS_FORMAT_TYPE_UINT16),
		IGRAPHICS_FORMAT_R16G16B16A16_SINT  = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RGBA , IGRAPHICS_FORMAT_TYPE_INT16),
	//	IGRAPHICS_FORMAT_R16G16B16_FLOAT    = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RGB  , IGRAPHICS_FORMAT_TYPE_FLOAT16),
		IGRAPHICS_FORMAT_R16G16B16_UNORM    = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RGB  , IGRAPHICS_FORMAT_TYPE_UNORM16),
		IGRAPHICS_FORMAT_R16G16B16_NORM     = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RGB  , IGRAPHICS_FORMAT_TYPE_NORM16),
		IGRAPHICS_FORMAT_R16G16B16_UINT     = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RGB  , IGRAPHICS_FORMAT_TYPE_UINT16),
		IGRAPHICS_FORMAT_R16G16B16_SINT     = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RGB  , IGRAPHICS_FORMAT_TYPE_INT16),
	//	IGRAPHICS_FORMAT_R16G16_FLOAT       = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RG   , IGRAPHICS_FORMAT_TYPE_FLOAT16),
		IGRAPHICS_FORMAT_R16G16_UNORM       = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RG   , IGRAPHICS_FORMAT_TYPE_UNORM16),
		IGRAPHICS_FORMAT_R16G16_NORM        = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RG   , IGRAPHICS_FORMAT_TYPE_NORM16),
		IGRAPHICS_FORMAT_R16G16_UINT        = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RG   , IGRAPHICS_FORMAT_TYPE_UINT16),
		IGRAPHICS_FORMAT_R16G16_SINT        = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RG   , IGRAPHICS_FORMAT_TYPE_INT16),
	//	IGRAPHICS_FORMAT_R16_FLOAT          = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_R    , IGRAPHICS_FORMAT_TYPE_FLOAT16),
		IGRAPHICS_FORMAT_R16_UNORM          = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_R    , IGRAPHICS_FORMAT_TYPE_UNORM16),
		IGRAPHICS_FORMAT_R16_NORM           = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_R    , IGRAPHICS_FORMAT_TYPE_NORM16),
		IGRAPHICS_FORMAT_R16_UINT           = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_R    , IGRAPHICS_FORMAT_TYPE_UINT16),
		IGRAPHICS_FORMAT_R16_SINT           = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_R    , IGRAPHICS_FORMAT_TYPE_INT16),
	//	IGRAPHICS_FORMAT_R8G8B8A8_FLOAT     = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RGBA , IGRAPHICS_FORMAT_TYPE_FLOAT8),
		IGRAPHICS_FORMAT_R8G8B8A8_UNORM     = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RGBA , IGRAPHICS_FORMAT_TYPE_UNORM8),
		IGRAPHICS_FORMAT_R8G8B8A8_NORM      = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RGBA , IGRAPHICS_FORMAT_TYPE_NORM8),
		IGRAPHICS_FORMAT_R8G8B8A8_UINT      = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RGBA , IGRAPHICS_FORMAT_TYPE_UINT8),
		IGRAPHICS_FORMAT_R8G8B8A8_SINT      = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RGBA , IGRAPHICS_FORMAT_TYPE_INT8),
	//	IGRAPHICS_FORMAT_R8G8B8_FLOAT       = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RGB  , IGRAPHICS_FORMAT_TYPE_FLOAT8),
		IGRAPHICS_FORMAT_R8G8B8_UNORM       = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RGB  , IGRAPHICS_FORMAT_TYPE_UNORM8),
		IGRAPHICS_FORMAT_R8G8B8_NORM        = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RGB  , IGRAPHICS_FORMAT_TYPE_NORM8),
		IGRAPHICS_FORMAT_R8G8B8_UINT        = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RGB  , IGRAPHICS_FORMAT_TYPE_UINT8),
		IGRAPHICS_FORMAT_R8G8B8_SINT        = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RGB  , IGRAPHICS_FORMAT_TYPE_INT8),
	//	IGRAPHICS_FORMAT_R8G8_FLOAT         = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RG   , IGRAPHICS_FORMAT_TYPE_FLOAT8),
		IGRAPHICS_FORMAT_R8G8_UNORM         = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RG   , IGRAPHICS_FORMAT_TYPE_UNORM8),
		IGRAPHICS_FORMAT_R8G8_NORM          = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RG   , IGRAPHICS_FORMAT_TYPE_NORM8),
		IGRAPHICS_FORMAT_R8G8_UINT          = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RG   , IGRAPHICS_FORMAT_TYPE_UINT8),
		IGRAPHICS_FORMAT_R8G8_SINT          = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_RG   , IGRAPHICS_FORMAT_TYPE_INT8),
	//	IGRAPHICS_FORMAT_R8_FLOAT           = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_R    , IGRAPHICS_FORMAT_TYPE_FLOAT8),
		IGRAPHICS_FORMAT_R8_UNORM           = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_R    , IGRAPHICS_FORMAT_TYPE_UNORM8),
		IGRAPHICS_FORMAT_R8_NORM            = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_R    , IGRAPHICS_FORMAT_TYPE_NORM8),
		IGRAPHICS_FORMAT_R8_UINT            = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_R    , IGRAPHICS_FORMAT_TYPE_UINT8),
		IGRAPHICS_FORMAT_R8_SINT            = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_R    , IGRAPHICS_FORMAT_TYPE_INT8),

		// ..Depth formats..
		// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		IGRAPHICS_FORMAT_DEPTH32_FLOAT      = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_DEPTH, IGRAPHICS_FORMAT_TYPE_FLOAT32),
		IGRAPHICS_FORMAT_DEPTH32_UNORM      = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_DEPTH, IGRAPHICS_FORMAT_TYPE_UNORM32),
		IGRAPHICS_FORMAT_DEPTH32_NORM       = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_DEPTH, IGRAPHICS_FORMAT_TYPE_NORM32),
		IGRAPHICS_FORMAT_DEPTH32_UINT       = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_DEPTH, IGRAPHICS_FORMAT_TYPE_UINT32),
		IGRAPHICS_FORMAT_DEPTH32_INT        = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_DEPTH, IGRAPHICS_FORMAT_TYPE_INT32),
	//	IGRAPHICS_FORMAT_DEPTH16_FLOAT      = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_DEPTH, IGRAPHICS_FORMAT_TYPE_FLOAT16),
		IGRAPHICS_FORMAT_DEPTH16_UNORM      = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_DEPTH, IGRAPHICS_FORMAT_TYPE_UNORM16),
		IGRAPHICS_FORMAT_DEPTH16_NORM       = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_DEPTH, IGRAPHICS_FORMAT_TYPE_NORM16),
		IGRAPHICS_FORMAT_DEPTH16_UINT       = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_DEPTH, IGRAPHICS_FORMAT_TYPE_UINT16),
		IGRAPHICS_FORMAT_DEPTH16_INT        = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_DEPTH, IGRAPHICS_FORMAT_TYPE_INT16),
	//	IGRAPHICS_FORMAT_DEPTH8_FLOAT       = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_DEPTH, IGRAPHICS_FORMAT_TYPE_FLOAT8),
		IGRAPHICS_FORMAT_DEPTH8_UNORM       = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_DEPTH, IGRAPHICS_FORMAT_TYPE_UNORM8),
		IGRAPHICS_FORMAT_DEPTH8_NORM        = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_DEPTH, IGRAPHICS_FORMAT_TYPE_NORM8),
		IGRAPHICS_FORMAT_DEPTH8_UINT        = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_DEPTH, IGRAPHICS_FORMAT_TYPE_UINT8),
		IGRAPHICS_FORMAT_DEPTH8_INT         = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_DEPTH, IGRAPHICS_FORMAT_TYPE_INT8),

		// ..Additional invalid format..
		// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		IGRAPHICS_FORMAT_UNKNOWN            = GD_IGRAPHICS_FORMAT(IGRAPHICS_FORMAT_LAYOUT_UNKNOWN, IGRAPHICS_FORMAT_TYPE_UNKNOWN),
		IGRAPHICS_FORMATS_COUNT             = GD_IGRAPHICS_FORMAT(0                       , 0),
	};	// enum IGraphicsFormat

	/*!
	 * Returns the numeric id of this format value in contagious array.
	 * @param gfxFormat the format value to process.
	 */
	GDINL static SizeTp IGraphicsFormatGetIndex(IGraphicsFormat const gfxFormat)
	{
		return static_cast<SizeTp>(static_cast<UInt32>(gfxFormat) & 0xFF);
	}

	/*!
	 * Returns the layout that this format value represents.
	 * @param gfxFormat the format value to process.
	 */
	GDINL static IGraphicsFormatLayout IGraphicsFormatGetLayout(IGraphicsFormat const gfxFormat)
	{
		return static_cast<IGraphicsFormatLayout>(static_cast<UInt32>(gfxFormat) >> 8 & 0xFF);
	}

	/*!
	 * Returns the type that this format value represents.
	 * @param gfxFormat the format value to process.
	 */
	GDINL static IGraphicsFormatType IGraphicsFormatGetType(IGraphicsFormat const gfxFormat)
	{
		return static_cast<IGraphicsFormatType>(static_cast<UInt32>(gfxFormat) >> 16 & 0xFF);
	}

	/*!
	 * Returns size of variable to the corresponding format in bytes.
	 * @param gfxFormat the format value to process.
	 */
	GDINL static SizeTp IGraphicsFormatSizeof(IGraphicsFormat const gfxFormat)
	{
		SizeTp static const IGraphicsFormatTypeSizesTable[IGRAPHICS_FORMAT_TYPES_COUNT] = {
			/* IGRAPHICS_FORMAT_TYPE_INT8    */ sizeof(Int8),
			/* IGRAPHICS_FORMAT_TYPE_UINT8   */ sizeof(UInt8),
			/* IGRAPHICS_FORMAT_TYPE_INT16   */ sizeof( Int16),
			/* IGRAPHICS_FORMAT_TYPE_UINT16  */ sizeof(UInt16),
			/* IGRAPHICS_FORMAT_TYPE_INT32   */ sizeof( Int32),
			/* IGRAPHICS_FORMAT_TYPE_UINT32  */ sizeof(UInt32),
			/* IGRAPHICS_FORMAT_TYPE_NORM8   */ sizeof( Int8),
			/* IGRAPHICS_FORMAT_TYPE_UNORM8  */ sizeof(UInt8),
			/* IGRAPHICS_FORMAT_TYPE_NORM16  */ sizeof( Int16),
			/* IGRAPHICS_FORMAT_TYPE_UNORM16 */ sizeof(UInt16),
			/* IGRAPHICS_FORMAT_TYPE_NORM32  */ sizeof( Int32),
			/* IGRAPHICS_FORMAT_TYPE_UNORM32 */ sizeof(UInt32),
			/* IGRAPHICS_FORMAT_TYPE_FLOAT32 */ sizeof(Float32),
			/* IGRAPHICS_FORMAT_TYPE_FLOAT64 */ sizeof(Float64),
			/* IGRAPHICS_FORMAT_TYPE_UNKNOWN */ 0,
		};
		return IGraphicsFormatGetLayout(gfxFormat) * IGraphicsFormatTypeSizesTable[IGraphicsFormatGetType(gfxFormat)];
	}

GD_NAMESPACE_END
